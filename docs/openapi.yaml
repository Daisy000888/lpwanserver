openapi: 3.0.0
servers: []
info:
  description: >-
    This service goes between an IoT application server and the various networks
    to which the devices connect.  LPWAN Server uses extensions to support
    additional networks.
  version: 1.2.0
  title: LPWAN Server
  termsOfService: ''
  contact:
    email: d.malas@cablelabs.com
    name: Darly Malas
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: session
    description: Operations about session
  - name: user
    description: Operations about user
paths:
  /api/sessions:
    post:
      operationId: createSession
      summary: Create a session
      description: Submit a user's credentials and receive a JWT token
      parameters: []
      security: []
      tags:
        - session
      requestBody:
        $ref: '#/components/requestBodies/LoginCredentials'
      responses:
        '200':
          description: JWT as response body
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
    delete:
      operationId: deleteSession
      summary: Delete a session
      description: Invalidate the user's current jwt token
      parameters: []
      security:
        - bearer_token: []
      tags:
        - session
      responses:
        '204':
          description: No content
  /api/users:
    post:
      operationId: createUser
      summary: Create a user
      description: Create a user, available only to system administrators
      parameters: []
      security:
        - bearer_token: []
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/CreateUserInput'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCreatedResponse'
        '403':
          description: Authenticated user not allowed to perform this operation
        '400':
          description: Bad request
    get:
      operationId: listUsers
      summary: List users
      description: List users, available only to system administrators
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - name: companyId
          in: query
          description: The ID of the users' company
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Search for a string within username
          required: false
          schema:
            type: string
      security:
        - bearer_token: []
      tags:
        - user
      responses:
        '200':
          description: Query response with totalCount and list of records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserResponse'
        '403':
          description: Authenticated user not allowed to perform this operation
        '400':
          description: Bad request
  /api/users/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      operationId: loadUser
      summary: Get user
      description: Get user
      parameters: []
      security:
        - bearer_token: []
      tags:
        - user
      responses:
        '200':
          description: User record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Authenticated user not allowed to perform this operation
        '404':
          description: User not found
    put:
      operationId: updateUser
      summary: Update user
      description: Update user, available only to system administrators
      parameters: []
      security:
        - bearer_token: []
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserInput'
      responses:
        '204':
          description: User update succeeded
        '400':
          description: Bad request
        '403':
          description: Authenticated user not allowed to perform this operation
        '404':
          description: User not found
    delete:
      operationId: deleteUser
      summary: Delete user
      description: Delete user, available only to system administrators
      parameters: []
      security:
        - bearer_token: []
      tags:
        - user
      responses:
        '204':
          description: User record was deleted
        '403':
          description: Authenticated user not allowed to perform this operation
        '404':
          description: User not found
  /api/users/me:
    get:
      operationId: loadMyUser
      summary: Load my user
      description: Load the record of the session user
      parameters: []
      security:
        - bearer_token: []
      tags:
        - user
      responses:
        '200':
          description: User record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /api/users/verifyEmail/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: Email verification link ID
        required: true
        schema:
          type: string
    put:
      operationId: verifyUserEmail
      summary: Verify user email
      description: Endpoint for email verification links
        - name: function
          in: query
          description: Accept or reject new email
          required: true
          schema:
            type: string
            enum:
              - accept
              - reject
      security:
        - bearer_token: []
      tags:
        - user
      responses:
        '204':
          description: Email address was successfully verified or rejected
        '400':
          description: Bad request
        '403':
          description: Authenticated user not allowed to perform this operation
        '404':
          description: Invalid uuid
components:
  parameters:
    idParam:
      name: id
      in: path
      description: ID of resource
      required: true
      schema:
        type: string
    offsetParam:
      name: offset
      in: query
      description: Number of records to skip
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:
      name: limit
      in: query
      description: Max records to return
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
        email:
          type: string
          format: email
        companyId:
          type: string
    ResourceCreatedResponse:
      type: object
      properties:
        id:
          type: string
    ListUserResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        records:
          type: Array
          items:
            $ref: '#/components/schemas/User'
  requestBodies:
    LoginCredentials:
      content:
        application/json:
          schema:
            type: object
            required:
              - login_username
              - login_password
            properties:
              login_username:
                type: string
              login_password:
                type: string
      description: User's login credentials
      required: true
    CreateUserInput:
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - role
              - companyId
            properties:
              username:
                type: string
              password:
                type: string
              role:
                type: string
                enum:
                  - ADMIN
                  - USER
              companyId:
                type: string
              email:
                type: string
                format: email
      description: User to be created
      required: true
    UpdateUserInput:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
              role:
                type: string
                enum:
                  - ADMIN
                  - USER
              companyId:
                type: string
              email:
                type: string
                format: email
      description: User properties to be updated
      required: true
  securitySchemes:
    bearer_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
