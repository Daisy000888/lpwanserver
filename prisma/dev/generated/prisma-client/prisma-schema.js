module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateApplication {
  count: Int!
}

type AggregateApplicationNetworkTypeLink {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCompanyNetworkTypeLink {
  count: Int!
}

type AggregateCompanyType {
  count: Int!
}

type AggregateDevice {
  count: Int!
}

type AggregateDeviceNetworkTypeLink {
  count: Int!
}

type AggregateDeviceProfile {
  count: Int!
}

type AggregateEmailVerification {
  count: Int!
}

type AggregateNetwork {
  count: Int!
}

type AggregateNetworkProtocol {
  count: Int!
}

type AggregateNetworkProvider {
  count: Int!
}

type AggregateNetworkType {
  count: Int!
}

type AggregatePasswordPolicy {
  count: Int!
}

type AggregateProtocolData {
  count: Int!
}

type AggregateReportingProtocol {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserRole {
  count: Int!
}

type Application {
  applicationNetworkTypeLinks(where: ApplicationNetworkTypeLinkWhereInput, orderBy: ApplicationNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApplicationNetworkTypeLink!]
  baseUrl: String
  company: Company
  description: String
  devices(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Device!]
  id: Int!
  name: String
  reportingProtocol: ReportingProtocol
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput
  baseUrl: String
  company: CompanyCreateOneWithoutApplicationsInput
  description: String
  devices: DeviceCreateManyWithoutApplicationInput
  name: String
  reportingProtocol: ReportingProtocolCreateOneWithoutApplicationsInput
}

input ApplicationCreateManyWithoutCompanyInput {
  create: [ApplicationCreateWithoutCompanyInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutReportingProtocolInput {
  create: [ApplicationCreateWithoutReportingProtocolInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateOneWithoutApplicationNetworkTypeLinksInput {
  create: ApplicationCreateWithoutApplicationNetworkTypeLinksInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationCreateOneWithoutDevicesInput {
  create: ApplicationCreateWithoutDevicesInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationCreateWithoutApplicationNetworkTypeLinksInput {
  baseUrl: String
  company: CompanyCreateOneWithoutApplicationsInput
  description: String
  devices: DeviceCreateManyWithoutApplicationInput
  name: String
  reportingProtocol: ReportingProtocolCreateOneWithoutApplicationsInput
}

input ApplicationCreateWithoutCompanyInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput
  baseUrl: String
  description: String
  devices: DeviceCreateManyWithoutApplicationInput
  name: String
  reportingProtocol: ReportingProtocolCreateOneWithoutApplicationsInput
}

input ApplicationCreateWithoutDevicesInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput
  baseUrl: String
  company: CompanyCreateOneWithoutApplicationsInput
  description: String
  name: String
  reportingProtocol: ReportingProtocolCreateOneWithoutApplicationsInput
}

input ApplicationCreateWithoutReportingProtocolInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput
  baseUrl: String
  company: CompanyCreateOneWithoutApplicationsInput
  description: String
  devices: DeviceCreateManyWithoutApplicationInput
  name: String
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

type ApplicationNetworkTypeLink {
  application: Application!
  id: Int!
  networkSettings: String
  networkType: NetworkType!
}

type ApplicationNetworkTypeLinkConnection {
  pageInfo: PageInfo!
  edges: [ApplicationNetworkTypeLinkEdge]!
  aggregate: AggregateApplicationNetworkTypeLink!
}

input ApplicationNetworkTypeLinkCreateInput {
  application: ApplicationCreateOneWithoutApplicationNetworkTypeLinksInput!
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutApplicationNetworkTypeLinksInput!
}

input ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput {
  create: [ApplicationNetworkTypeLinkCreateWithoutApplicationInput!]
  connect: [ApplicationNetworkTypeLinkWhereUniqueInput!]
}

input ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput {
  create: [ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput!]
  connect: [ApplicationNetworkTypeLinkWhereUniqueInput!]
}

input ApplicationNetworkTypeLinkCreateWithoutApplicationInput {
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutApplicationNetworkTypeLinksInput!
}

input ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput {
  application: ApplicationCreateOneWithoutApplicationNetworkTypeLinksInput!
  networkSettings: String
}

type ApplicationNetworkTypeLinkEdge {
  node: ApplicationNetworkTypeLink!
  cursor: String!
}

enum ApplicationNetworkTypeLinkOrderByInput {
  id_ASC
  id_DESC
  networkSettings_ASC
  networkSettings_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApplicationNetworkTypeLinkPreviousValues {
  id: Int!
  networkSettings: String
}

input ApplicationNetworkTypeLinkScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  AND: [ApplicationNetworkTypeLinkScalarWhereInput!]
  OR: [ApplicationNetworkTypeLinkScalarWhereInput!]
  NOT: [ApplicationNetworkTypeLinkScalarWhereInput!]
}

type ApplicationNetworkTypeLinkSubscriptionPayload {
  mutation: MutationType!
  node: ApplicationNetworkTypeLink
  updatedFields: [String!]
  previousValues: ApplicationNetworkTypeLinkPreviousValues
}

input ApplicationNetworkTypeLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationNetworkTypeLinkWhereInput
  AND: [ApplicationNetworkTypeLinkSubscriptionWhereInput!]
  OR: [ApplicationNetworkTypeLinkSubscriptionWhereInput!]
  NOT: [ApplicationNetworkTypeLinkSubscriptionWhereInput!]
}

input ApplicationNetworkTypeLinkUpdateInput {
  application: ApplicationUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput
}

input ApplicationNetworkTypeLinkUpdateManyDataInput {
  networkSettings: String
}

input ApplicationNetworkTypeLinkUpdateManyMutationInput {
  networkSettings: String
}

input ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput {
  create: [ApplicationNetworkTypeLinkCreateWithoutApplicationInput!]
  delete: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  connect: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  set: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  disconnect: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  update: [ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutApplicationInput!]
  upsert: [ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutApplicationInput!]
  deleteMany: [ApplicationNetworkTypeLinkScalarWhereInput!]
  updateMany: [ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput {
  create: [ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput!]
  delete: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  connect: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  set: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  disconnect: [ApplicationNetworkTypeLinkWhereUniqueInput!]
  update: [ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput!]
  upsert: [ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput!]
  deleteMany: [ApplicationNetworkTypeLinkScalarWhereInput!]
  updateMany: [ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput {
  where: ApplicationNetworkTypeLinkScalarWhereInput!
  data: ApplicationNetworkTypeLinkUpdateManyDataInput!
}

input ApplicationNetworkTypeLinkUpdateWithoutApplicationDataInput {
  networkSettings: String
  networkType: NetworkTypeUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput
}

input ApplicationNetworkTypeLinkUpdateWithoutNetworkTypeDataInput {
  application: ApplicationUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput
  networkSettings: String
}

input ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutApplicationInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput!
  data: ApplicationNetworkTypeLinkUpdateWithoutApplicationDataInput!
}

input ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput!
  data: ApplicationNetworkTypeLinkUpdateWithoutNetworkTypeDataInput!
}

input ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutApplicationInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput!
  update: ApplicationNetworkTypeLinkUpdateWithoutApplicationDataInput!
  create: ApplicationNetworkTypeLinkCreateWithoutApplicationInput!
}

input ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput!
  update: ApplicationNetworkTypeLinkUpdateWithoutNetworkTypeDataInput!
  create: ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput!
}

input ApplicationNetworkTypeLinkWhereInput {
  application: ApplicationWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  networkType: NetworkTypeWhereInput
  AND: [ApplicationNetworkTypeLinkWhereInput!]
  OR: [ApplicationNetworkTypeLinkWhereInput!]
  NOT: [ApplicationNetworkTypeLinkWhereInput!]
}

input ApplicationNetworkTypeLinkWhereUniqueInput {
  id: Int
}

enum ApplicationOrderByInput {
  baseUrl_ASC
  baseUrl_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApplicationPreviousValues {
  baseUrl: String
  description: String
  id: Int!
  name: String
}

input ApplicationScalarWhereInput {
  baseUrl: String
  baseUrl_not: String
  baseUrl_in: [String!]
  baseUrl_not_in: [String!]
  baseUrl_lt: String
  baseUrl_lte: String
  baseUrl_gt: String
  baseUrl_gte: String
  baseUrl_contains: String
  baseUrl_not_contains: String
  baseUrl_starts_with: String
  baseUrl_not_starts_with: String
  baseUrl_ends_with: String
  baseUrl_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput
  baseUrl: String
  company: CompanyUpdateOneWithoutApplicationsInput
  description: String
  devices: DeviceUpdateManyWithoutApplicationInput
  name: String
  reportingProtocol: ReportingProtocolUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateManyDataInput {
  baseUrl: String
  description: String
  name: String
}

input ApplicationUpdateManyMutationInput {
  baseUrl: String
  description: String
  name: String
}

input ApplicationUpdateManyWithoutCompanyInput {
  create: [ApplicationCreateWithoutCompanyInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithoutReportingProtocolInput {
  create: [ApplicationCreateWithoutReportingProtocolInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutReportingProtocolInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutReportingProtocolInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyDataInput!
}

input ApplicationUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput {
  create: ApplicationCreateWithoutApplicationNetworkTypeLinksInput
  update: ApplicationUpdateWithoutApplicationNetworkTypeLinksDataInput
  upsert: ApplicationUpsertWithoutApplicationNetworkTypeLinksInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationUpdateOneRequiredWithoutDevicesInput {
  create: ApplicationCreateWithoutDevicesInput
  update: ApplicationUpdateWithoutDevicesDataInput
  upsert: ApplicationUpsertWithoutDevicesInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationUpdateWithoutApplicationNetworkTypeLinksDataInput {
  baseUrl: String
  company: CompanyUpdateOneWithoutApplicationsInput
  description: String
  devices: DeviceUpdateManyWithoutApplicationInput
  name: String
  reportingProtocol: ReportingProtocolUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateWithoutCompanyDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput
  baseUrl: String
  description: String
  devices: DeviceUpdateManyWithoutApplicationInput
  name: String
  reportingProtocol: ReportingProtocolUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateWithoutDevicesDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput
  baseUrl: String
  company: CompanyUpdateOneWithoutApplicationsInput
  description: String
  name: String
  reportingProtocol: ReportingProtocolUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateWithoutReportingProtocolDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput
  baseUrl: String
  company: CompanyUpdateOneWithoutApplicationsInput
  description: String
  devices: DeviceUpdateManyWithoutApplicationInput
  name: String
}

input ApplicationUpdateWithWhereUniqueWithoutCompanyInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutCompanyDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutReportingProtocolInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutReportingProtocolDataInput!
}

input ApplicationUpsertWithoutApplicationNetworkTypeLinksInput {
  update: ApplicationUpdateWithoutApplicationNetworkTypeLinksDataInput!
  create: ApplicationCreateWithoutApplicationNetworkTypeLinksInput!
}

input ApplicationUpsertWithoutDevicesInput {
  update: ApplicationUpdateWithoutDevicesDataInput!
  create: ApplicationCreateWithoutDevicesInput!
}

input ApplicationUpsertWithWhereUniqueWithoutCompanyInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutCompanyDataInput!
  create: ApplicationCreateWithoutCompanyInput!
}

input ApplicationUpsertWithWhereUniqueWithoutReportingProtocolInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutReportingProtocolDataInput!
  create: ApplicationCreateWithoutReportingProtocolInput!
}

input ApplicationWhereInput {
  applicationNetworkTypeLinks_every: ApplicationNetworkTypeLinkWhereInput
  applicationNetworkTypeLinks_some: ApplicationNetworkTypeLinkWhereInput
  applicationNetworkTypeLinks_none: ApplicationNetworkTypeLinkWhereInput
  baseUrl: String
  baseUrl_not: String
  baseUrl_in: [String!]
  baseUrl_not_in: [String!]
  baseUrl_lt: String
  baseUrl_lte: String
  baseUrl_gt: String
  baseUrl_gte: String
  baseUrl_contains: String
  baseUrl_not_contains: String
  baseUrl_starts_with: String
  baseUrl_not_starts_with: String
  baseUrl_ends_with: String
  baseUrl_not_ends_with: String
  company: CompanyWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  devices_every: DeviceWhereInput
  devices_some: DeviceWhereInput
  devices_none: DeviceWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  reportingProtocol: ReportingProtocolWhereInput
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Company {
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  companyNetworkTypeLinks(where: CompanyNetworkTypeLinkWhereInput, orderBy: CompanyNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyNetworkTypeLink!]
  deviceProfiles(where: DeviceProfileWhereInput, orderBy: DeviceProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceProfile!]
  id: Int!
  name: String
  passwordPolicies(where: PasswordPolicyWhereInput, orderBy: PasswordPolicyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordPolicy!]
  type: CompanyType
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  applications: ApplicationCreateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileCreateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyCreateManyWithoutCompanyInput
  type: CompanyTypeCreateOneWithoutCompaniesInput
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateManyWithoutTypeInput {
  create: [CompanyCreateWithoutTypeInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutApplicationsInput {
  create: CompanyCreateWithoutApplicationsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutCompanyNetworkTypeLinksInput {
  create: CompanyCreateWithoutCompanyNetworkTypeLinksInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutDeviceProfilesInput {
  create: CompanyCreateWithoutDeviceProfilesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutPasswordPoliciesInput {
  create: CompanyCreateWithoutPasswordPoliciesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutUsersInput {
  create: CompanyCreateWithoutUsersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutApplicationsInput {
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileCreateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyCreateManyWithoutCompanyInput
  type: CompanyTypeCreateOneWithoutCompaniesInput
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutCompanyNetworkTypeLinksInput {
  applications: ApplicationCreateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileCreateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyCreateManyWithoutCompanyInput
  type: CompanyTypeCreateOneWithoutCompaniesInput
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutDeviceProfilesInput {
  applications: ApplicationCreateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyCreateManyWithoutCompanyInput
  type: CompanyTypeCreateOneWithoutCompaniesInput
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutPasswordPoliciesInput {
  applications: ApplicationCreateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileCreateManyWithoutCompanyInput
  name: String
  type: CompanyTypeCreateOneWithoutCompaniesInput
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutTypeInput {
  applications: ApplicationCreateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileCreateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyCreateManyWithoutCompanyInput
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutUsersInput {
  applications: ApplicationCreateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileCreateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyCreateManyWithoutCompanyInput
  type: CompanyTypeCreateOneWithoutCompaniesInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

type CompanyNetworkTypeLink {
  company: Company!
  id: Int!
  networkSettings: String
  networkType: NetworkType!
}

type CompanyNetworkTypeLinkConnection {
  pageInfo: PageInfo!
  edges: [CompanyNetworkTypeLinkEdge]!
  aggregate: AggregateCompanyNetworkTypeLink!
}

input CompanyNetworkTypeLinkCreateInput {
  company: CompanyCreateOneWithoutCompanyNetworkTypeLinksInput!
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutCompanyNetworkTypeLinksInput!
}

input CompanyNetworkTypeLinkCreateManyWithoutCompanyInput {
  create: [CompanyNetworkTypeLinkCreateWithoutCompanyInput!]
  connect: [CompanyNetworkTypeLinkWhereUniqueInput!]
}

input CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput {
  create: [CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput!]
  connect: [CompanyNetworkTypeLinkWhereUniqueInput!]
}

input CompanyNetworkTypeLinkCreateWithoutCompanyInput {
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutCompanyNetworkTypeLinksInput!
}

input CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput {
  company: CompanyCreateOneWithoutCompanyNetworkTypeLinksInput!
  networkSettings: String
}

type CompanyNetworkTypeLinkEdge {
  node: CompanyNetworkTypeLink!
  cursor: String!
}

enum CompanyNetworkTypeLinkOrderByInput {
  id_ASC
  id_DESC
  networkSettings_ASC
  networkSettings_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyNetworkTypeLinkPreviousValues {
  id: Int!
  networkSettings: String
}

input CompanyNetworkTypeLinkScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  AND: [CompanyNetworkTypeLinkScalarWhereInput!]
  OR: [CompanyNetworkTypeLinkScalarWhereInput!]
  NOT: [CompanyNetworkTypeLinkScalarWhereInput!]
}

type CompanyNetworkTypeLinkSubscriptionPayload {
  mutation: MutationType!
  node: CompanyNetworkTypeLink
  updatedFields: [String!]
  previousValues: CompanyNetworkTypeLinkPreviousValues
}

input CompanyNetworkTypeLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyNetworkTypeLinkWhereInput
  AND: [CompanyNetworkTypeLinkSubscriptionWhereInput!]
  OR: [CompanyNetworkTypeLinkSubscriptionWhereInput!]
  NOT: [CompanyNetworkTypeLinkSubscriptionWhereInput!]
}

input CompanyNetworkTypeLinkUpdateInput {
  company: CompanyUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput
}

input CompanyNetworkTypeLinkUpdateManyDataInput {
  networkSettings: String
}

input CompanyNetworkTypeLinkUpdateManyMutationInput {
  networkSettings: String
}

input CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput {
  create: [CompanyNetworkTypeLinkCreateWithoutCompanyInput!]
  delete: [CompanyNetworkTypeLinkWhereUniqueInput!]
  connect: [CompanyNetworkTypeLinkWhereUniqueInput!]
  set: [CompanyNetworkTypeLinkWhereUniqueInput!]
  disconnect: [CompanyNetworkTypeLinkWhereUniqueInput!]
  update: [CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CompanyNetworkTypeLinkScalarWhereInput!]
  updateMany: [CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput {
  create: [CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput!]
  delete: [CompanyNetworkTypeLinkWhereUniqueInput!]
  connect: [CompanyNetworkTypeLinkWhereUniqueInput!]
  set: [CompanyNetworkTypeLinkWhereUniqueInput!]
  disconnect: [CompanyNetworkTypeLinkWhereUniqueInput!]
  update: [CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput!]
  upsert: [CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput!]
  deleteMany: [CompanyNetworkTypeLinkScalarWhereInput!]
  updateMany: [CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput {
  where: CompanyNetworkTypeLinkScalarWhereInput!
  data: CompanyNetworkTypeLinkUpdateManyDataInput!
}

input CompanyNetworkTypeLinkUpdateWithoutCompanyDataInput {
  networkSettings: String
  networkType: NetworkTypeUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput
}

input CompanyNetworkTypeLinkUpdateWithoutNetworkTypeDataInput {
  company: CompanyUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput
  networkSettings: String
}

input CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput!
  data: CompanyNetworkTypeLinkUpdateWithoutCompanyDataInput!
}

input CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput!
  data: CompanyNetworkTypeLinkUpdateWithoutNetworkTypeDataInput!
}

input CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput!
  update: CompanyNetworkTypeLinkUpdateWithoutCompanyDataInput!
  create: CompanyNetworkTypeLinkCreateWithoutCompanyInput!
}

input CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput!
  update: CompanyNetworkTypeLinkUpdateWithoutNetworkTypeDataInput!
  create: CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput!
}

input CompanyNetworkTypeLinkWhereInput {
  company: CompanyWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  networkType: NetworkTypeWhereInput
  AND: [CompanyNetworkTypeLinkWhereInput!]
  OR: [CompanyNetworkTypeLinkWhereInput!]
  NOT: [CompanyNetworkTypeLinkWhereInput!]
}

input CompanyNetworkTypeLinkWhereUniqueInput {
  id: Int
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: Int!
  name: String
}

input CompanyScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

type CompanyType {
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  id: Int!
  name: String
}

type CompanyTypeConnection {
  pageInfo: PageInfo!
  edges: [CompanyTypeEdge]!
  aggregate: AggregateCompanyType!
}

input CompanyTypeCreateInput {
  companies: CompanyCreateManyWithoutTypeInput
  name: String
}

input CompanyTypeCreateOneWithoutCompaniesInput {
  create: CompanyTypeCreateWithoutCompaniesInput
  connect: CompanyTypeWhereUniqueInput
}

input CompanyTypeCreateWithoutCompaniesInput {
  name: String
}

type CompanyTypeEdge {
  node: CompanyType!
  cursor: String!
}

enum CompanyTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyTypePreviousValues {
  id: Int!
  name: String
}

type CompanyTypeSubscriptionPayload {
  mutation: MutationType!
  node: CompanyType
  updatedFields: [String!]
  previousValues: CompanyTypePreviousValues
}

input CompanyTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyTypeWhereInput
  AND: [CompanyTypeSubscriptionWhereInput!]
  OR: [CompanyTypeSubscriptionWhereInput!]
  NOT: [CompanyTypeSubscriptionWhereInput!]
}

input CompanyTypeUpdateInput {
  companies: CompanyUpdateManyWithoutTypeInput
  name: String
}

input CompanyTypeUpdateManyMutationInput {
  name: String
}

input CompanyTypeUpdateOneWithoutCompaniesInput {
  create: CompanyTypeCreateWithoutCompaniesInput
  update: CompanyTypeUpdateWithoutCompaniesDataInput
  upsert: CompanyTypeUpsertWithoutCompaniesInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyTypeWhereUniqueInput
}

input CompanyTypeUpdateWithoutCompaniesDataInput {
  name: String
}

input CompanyTypeUpsertWithoutCompaniesInput {
  update: CompanyTypeUpdateWithoutCompaniesDataInput!
  create: CompanyTypeCreateWithoutCompaniesInput!
}

input CompanyTypeWhereInput {
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CompanyTypeWhereInput!]
  OR: [CompanyTypeWhereInput!]
  NOT: [CompanyTypeWhereInput!]
}

input CompanyTypeWhereUniqueInput {
  id: Int
}

input CompanyUpdateInput {
  applications: ApplicationUpdateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileUpdateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyUpdateManyWithoutCompanyInput
  type: CompanyTypeUpdateOneWithoutCompaniesInput
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyDataInput {
  name: String
}

input CompanyUpdateManyMutationInput {
  name: String
}

input CompanyUpdateManyWithoutTypeInput {
  create: [CompanyCreateWithoutTypeInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutTypeInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutTypeInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput {
  create: CompanyCreateWithoutCompanyNetworkTypeLinksInput
  update: CompanyUpdateWithoutCompanyNetworkTypeLinksDataInput
  upsert: CompanyUpsertWithoutCompanyNetworkTypeLinksInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutApplicationsInput {
  create: CompanyCreateWithoutApplicationsInput
  update: CompanyUpdateWithoutApplicationsDataInput
  upsert: CompanyUpsertWithoutApplicationsInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutDeviceProfilesInput {
  create: CompanyCreateWithoutDeviceProfilesInput
  update: CompanyUpdateWithoutDeviceProfilesDataInput
  upsert: CompanyUpsertWithoutDeviceProfilesInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutPasswordPoliciesInput {
  create: CompanyCreateWithoutPasswordPoliciesInput
  update: CompanyUpdateWithoutPasswordPoliciesDataInput
  upsert: CompanyUpsertWithoutPasswordPoliciesInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutUsersInput {
  create: CompanyCreateWithoutUsersInput
  update: CompanyUpdateWithoutUsersDataInput
  upsert: CompanyUpsertWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutApplicationsDataInput {
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileUpdateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyUpdateManyWithoutCompanyInput
  type: CompanyTypeUpdateOneWithoutCompaniesInput
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutCompanyNetworkTypeLinksDataInput {
  applications: ApplicationUpdateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileUpdateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyUpdateManyWithoutCompanyInput
  type: CompanyTypeUpdateOneWithoutCompaniesInput
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutDeviceProfilesDataInput {
  applications: ApplicationUpdateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyUpdateManyWithoutCompanyInput
  type: CompanyTypeUpdateOneWithoutCompaniesInput
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutPasswordPoliciesDataInput {
  applications: ApplicationUpdateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileUpdateManyWithoutCompanyInput
  name: String
  type: CompanyTypeUpdateOneWithoutCompaniesInput
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutTypeDataInput {
  applications: ApplicationUpdateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileUpdateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyUpdateManyWithoutCompanyInput
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutUsersDataInput {
  applications: ApplicationUpdateManyWithoutCompanyInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput
  deviceProfiles: DeviceProfileUpdateManyWithoutCompanyInput
  name: String
  passwordPolicies: PasswordPolicyUpdateManyWithoutCompanyInput
  type: CompanyTypeUpdateOneWithoutCompaniesInput
}

input CompanyUpdateWithWhereUniqueWithoutTypeInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutTypeDataInput!
}

input CompanyUpsertWithoutApplicationsInput {
  update: CompanyUpdateWithoutApplicationsDataInput!
  create: CompanyCreateWithoutApplicationsInput!
}

input CompanyUpsertWithoutCompanyNetworkTypeLinksInput {
  update: CompanyUpdateWithoutCompanyNetworkTypeLinksDataInput!
  create: CompanyCreateWithoutCompanyNetworkTypeLinksInput!
}

input CompanyUpsertWithoutDeviceProfilesInput {
  update: CompanyUpdateWithoutDeviceProfilesDataInput!
  create: CompanyCreateWithoutDeviceProfilesInput!
}

input CompanyUpsertWithoutPasswordPoliciesInput {
  update: CompanyUpdateWithoutPasswordPoliciesDataInput!
  create: CompanyCreateWithoutPasswordPoliciesInput!
}

input CompanyUpsertWithoutUsersInput {
  update: CompanyUpdateWithoutUsersDataInput!
  create: CompanyCreateWithoutUsersInput!
}

input CompanyUpsertWithWhereUniqueWithoutTypeInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutTypeDataInput!
  create: CompanyCreateWithoutTypeInput!
}

input CompanyWhereInput {
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  companyNetworkTypeLinks_every: CompanyNetworkTypeLinkWhereInput
  companyNetworkTypeLinks_some: CompanyNetworkTypeLinkWhereInput
  companyNetworkTypeLinks_none: CompanyNetworkTypeLinkWhereInput
  deviceProfiles_every: DeviceProfileWhereInput
  deviceProfiles_some: DeviceProfileWhereInput
  deviceProfiles_none: DeviceProfileWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  passwordPolicies_every: PasswordPolicyWhereInput
  passwordPolicies_some: PasswordPolicyWhereInput
  passwordPolicies_none: PasswordPolicyWhereInput
  type: CompanyTypeWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: Int
}

type Device {
  application: Application!
  description: String
  deviceModel: String
  deviceNetworkTypeLinks(where: DeviceNetworkTypeLinkWhereInput, orderBy: DeviceNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceNetworkTypeLink!]
  id: Int!
  name: String
}

type DeviceConnection {
  pageInfo: PageInfo!
  edges: [DeviceEdge]!
  aggregate: AggregateDevice!
}

input DeviceCreateInput {
  application: ApplicationCreateOneWithoutDevicesInput!
  description: String
  deviceModel: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutDeviceInput
  name: String
}

input DeviceCreateManyWithoutApplicationInput {
  create: [DeviceCreateWithoutApplicationInput!]
  connect: [DeviceWhereUniqueInput!]
}

input DeviceCreateOneWithoutDeviceNetworkTypeLinksInput {
  create: DeviceCreateWithoutDeviceNetworkTypeLinksInput
  connect: DeviceWhereUniqueInput
}

input DeviceCreateWithoutApplicationInput {
  description: String
  deviceModel: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutDeviceInput
  name: String
}

input DeviceCreateWithoutDeviceNetworkTypeLinksInput {
  application: ApplicationCreateOneWithoutDevicesInput!
  description: String
  deviceModel: String
  name: String
}

type DeviceEdge {
  node: Device!
  cursor: String!
}

type DeviceNetworkTypeLink {
  device: Device
  deviceProfile: DeviceProfile
  id: Int!
  networkSettings: String
  networkType: NetworkType
}

type DeviceNetworkTypeLinkConnection {
  pageInfo: PageInfo!
  edges: [DeviceNetworkTypeLinkEdge]!
  aggregate: AggregateDeviceNetworkTypeLink!
}

input DeviceNetworkTypeLinkCreateInput {
  device: DeviceCreateOneWithoutDeviceNetworkTypeLinksInput
  deviceProfile: DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput
}

input DeviceNetworkTypeLinkCreateManyWithoutDeviceInput {
  create: [DeviceNetworkTypeLinkCreateWithoutDeviceInput!]
  connect: [DeviceNetworkTypeLinkWhereUniqueInput!]
}

input DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput {
  create: [DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput!]
  connect: [DeviceNetworkTypeLinkWhereUniqueInput!]
}

input DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput {
  create: [DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput!]
  connect: [DeviceNetworkTypeLinkWhereUniqueInput!]
}

input DeviceNetworkTypeLinkCreateWithoutDeviceInput {
  deviceProfile: DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput
}

input DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput {
  device: DeviceCreateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput
}

input DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput {
  device: DeviceCreateOneWithoutDeviceNetworkTypeLinksInput
  deviceProfile: DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
}

type DeviceNetworkTypeLinkEdge {
  node: DeviceNetworkTypeLink!
  cursor: String!
}

enum DeviceNetworkTypeLinkOrderByInput {
  id_ASC
  id_DESC
  networkSettings_ASC
  networkSettings_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DeviceNetworkTypeLinkPreviousValues {
  id: Int!
  networkSettings: String
}

input DeviceNetworkTypeLinkScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  AND: [DeviceNetworkTypeLinkScalarWhereInput!]
  OR: [DeviceNetworkTypeLinkScalarWhereInput!]
  NOT: [DeviceNetworkTypeLinkScalarWhereInput!]
}

type DeviceNetworkTypeLinkSubscriptionPayload {
  mutation: MutationType!
  node: DeviceNetworkTypeLink
  updatedFields: [String!]
  previousValues: DeviceNetworkTypeLinkPreviousValues
}

input DeviceNetworkTypeLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeviceNetworkTypeLinkWhereInput
  AND: [DeviceNetworkTypeLinkSubscriptionWhereInput!]
  OR: [DeviceNetworkTypeLinkSubscriptionWhereInput!]
  NOT: [DeviceNetworkTypeLinkSubscriptionWhereInput!]
}

input DeviceNetworkTypeLinkUpdateInput {
  device: DeviceUpdateOneWithoutDeviceNetworkTypeLinksInput
  deviceProfile: DeviceProfileUpdateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeUpdateOneWithoutDeviceNetworkTypeLinksInput
}

input DeviceNetworkTypeLinkUpdateManyDataInput {
  networkSettings: String
}

input DeviceNetworkTypeLinkUpdateManyMutationInput {
  networkSettings: String
}

input DeviceNetworkTypeLinkUpdateManyWithoutDeviceInput {
  create: [DeviceNetworkTypeLinkCreateWithoutDeviceInput!]
  delete: [DeviceNetworkTypeLinkWhereUniqueInput!]
  connect: [DeviceNetworkTypeLinkWhereUniqueInput!]
  set: [DeviceNetworkTypeLinkWhereUniqueInput!]
  disconnect: [DeviceNetworkTypeLinkWhereUniqueInput!]
  update: [DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceInput!]
  upsert: [DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceInput!]
  deleteMany: [DeviceNetworkTypeLinkScalarWhereInput!]
  updateMany: [DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput {
  create: [DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput!]
  delete: [DeviceNetworkTypeLinkWhereUniqueInput!]
  connect: [DeviceNetworkTypeLinkWhereUniqueInput!]
  set: [DeviceNetworkTypeLinkWhereUniqueInput!]
  disconnect: [DeviceNetworkTypeLinkWhereUniqueInput!]
  update: [DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceProfileInput!]
  upsert: [DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceProfileInput!]
  deleteMany: [DeviceNetworkTypeLinkScalarWhereInput!]
  updateMany: [DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput {
  create: [DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput!]
  delete: [DeviceNetworkTypeLinkWhereUniqueInput!]
  connect: [DeviceNetworkTypeLinkWhereUniqueInput!]
  set: [DeviceNetworkTypeLinkWhereUniqueInput!]
  disconnect: [DeviceNetworkTypeLinkWhereUniqueInput!]
  update: [DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput!]
  upsert: [DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput!]
  deleteMany: [DeviceNetworkTypeLinkScalarWhereInput!]
  updateMany: [DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput!]
}

input DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput {
  where: DeviceNetworkTypeLinkScalarWhereInput!
  data: DeviceNetworkTypeLinkUpdateManyDataInput!
}

input DeviceNetworkTypeLinkUpdateWithoutDeviceDataInput {
  deviceProfile: DeviceProfileUpdateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeUpdateOneWithoutDeviceNetworkTypeLinksInput
}

input DeviceNetworkTypeLinkUpdateWithoutDeviceProfileDataInput {
  device: DeviceUpdateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
  networkType: NetworkTypeUpdateOneWithoutDeviceNetworkTypeLinksInput
}

input DeviceNetworkTypeLinkUpdateWithoutNetworkTypeDataInput {
  device: DeviceUpdateOneWithoutDeviceNetworkTypeLinksInput
  deviceProfile: DeviceProfileUpdateOneWithoutDeviceNetworkTypeLinksInput
  networkSettings: String
}

input DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput!
  data: DeviceNetworkTypeLinkUpdateWithoutDeviceDataInput!
}

input DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceProfileInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput!
  data: DeviceNetworkTypeLinkUpdateWithoutDeviceProfileDataInput!
}

input DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput!
  data: DeviceNetworkTypeLinkUpdateWithoutNetworkTypeDataInput!
}

input DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput!
  update: DeviceNetworkTypeLinkUpdateWithoutDeviceDataInput!
  create: DeviceNetworkTypeLinkCreateWithoutDeviceInput!
}

input DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceProfileInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput!
  update: DeviceNetworkTypeLinkUpdateWithoutDeviceProfileDataInput!
  create: DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput!
}

input DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput!
  update: DeviceNetworkTypeLinkUpdateWithoutNetworkTypeDataInput!
  create: DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput!
}

input DeviceNetworkTypeLinkWhereInput {
  device: DeviceWhereInput
  deviceProfile: DeviceProfileWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  networkType: NetworkTypeWhereInput
  AND: [DeviceNetworkTypeLinkWhereInput!]
  OR: [DeviceNetworkTypeLinkWhereInput!]
  NOT: [DeviceNetworkTypeLinkWhereInput!]
}

input DeviceNetworkTypeLinkWhereUniqueInput {
  id: Int
}

enum DeviceOrderByInput {
  description_ASC
  description_DESC
  deviceModel_ASC
  deviceModel_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DevicePreviousValues {
  description: String
  deviceModel: String
  id: Int!
  name: String
}

type DeviceProfile {
  company: Company
  description: String
  deviceNetworkTypeLinks(where: DeviceNetworkTypeLinkWhereInput, orderBy: DeviceNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceNetworkTypeLink!]
  id: Int!
  name: String
  networkSettings: String
  networkType: NetworkType
}

type DeviceProfileConnection {
  pageInfo: PageInfo!
  edges: [DeviceProfileEdge]!
  aggregate: AggregateDeviceProfile!
}

input DeviceProfileCreateInput {
  company: CompanyCreateOneWithoutDeviceProfilesInput
  description: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput
  name: String
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutDeviceProfilesInput
}

input DeviceProfileCreateManyWithoutCompanyInput {
  create: [DeviceProfileCreateWithoutCompanyInput!]
  connect: [DeviceProfileWhereUniqueInput!]
}

input DeviceProfileCreateManyWithoutNetworkTypeInput {
  create: [DeviceProfileCreateWithoutNetworkTypeInput!]
  connect: [DeviceProfileWhereUniqueInput!]
}

input DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput {
  create: DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput
  connect: DeviceProfileWhereUniqueInput
}

input DeviceProfileCreateWithoutCompanyInput {
  description: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput
  name: String
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutDeviceProfilesInput
}

input DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput {
  company: CompanyCreateOneWithoutDeviceProfilesInput
  description: String
  name: String
  networkSettings: String
  networkType: NetworkTypeCreateOneWithoutDeviceProfilesInput
}

input DeviceProfileCreateWithoutNetworkTypeInput {
  company: CompanyCreateOneWithoutDeviceProfilesInput
  description: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput
  name: String
  networkSettings: String
}

type DeviceProfileEdge {
  node: DeviceProfile!
  cursor: String!
}

enum DeviceProfileOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  networkSettings_ASC
  networkSettings_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DeviceProfilePreviousValues {
  description: String
  id: Int!
  name: String
  networkSettings: String
}

input DeviceProfileScalarWhereInput {
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  AND: [DeviceProfileScalarWhereInput!]
  OR: [DeviceProfileScalarWhereInput!]
  NOT: [DeviceProfileScalarWhereInput!]
}

type DeviceProfileSubscriptionPayload {
  mutation: MutationType!
  node: DeviceProfile
  updatedFields: [String!]
  previousValues: DeviceProfilePreviousValues
}

input DeviceProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeviceProfileWhereInput
  AND: [DeviceProfileSubscriptionWhereInput!]
  OR: [DeviceProfileSubscriptionWhereInput!]
  NOT: [DeviceProfileSubscriptionWhereInput!]
}

input DeviceProfileUpdateInput {
  company: CompanyUpdateOneWithoutDeviceProfilesInput
  description: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput
  name: String
  networkSettings: String
  networkType: NetworkTypeUpdateOneWithoutDeviceProfilesInput
}

input DeviceProfileUpdateManyDataInput {
  description: String
  name: String
  networkSettings: String
}

input DeviceProfileUpdateManyMutationInput {
  description: String
  name: String
  networkSettings: String
}

input DeviceProfileUpdateManyWithoutCompanyInput {
  create: [DeviceProfileCreateWithoutCompanyInput!]
  delete: [DeviceProfileWhereUniqueInput!]
  connect: [DeviceProfileWhereUniqueInput!]
  set: [DeviceProfileWhereUniqueInput!]
  disconnect: [DeviceProfileWhereUniqueInput!]
  update: [DeviceProfileUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [DeviceProfileUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [DeviceProfileScalarWhereInput!]
  updateMany: [DeviceProfileUpdateManyWithWhereNestedInput!]
}

input DeviceProfileUpdateManyWithoutNetworkTypeInput {
  create: [DeviceProfileCreateWithoutNetworkTypeInput!]
  delete: [DeviceProfileWhereUniqueInput!]
  connect: [DeviceProfileWhereUniqueInput!]
  set: [DeviceProfileWhereUniqueInput!]
  disconnect: [DeviceProfileWhereUniqueInput!]
  update: [DeviceProfileUpdateWithWhereUniqueWithoutNetworkTypeInput!]
  upsert: [DeviceProfileUpsertWithWhereUniqueWithoutNetworkTypeInput!]
  deleteMany: [DeviceProfileScalarWhereInput!]
  updateMany: [DeviceProfileUpdateManyWithWhereNestedInput!]
}

input DeviceProfileUpdateManyWithWhereNestedInput {
  where: DeviceProfileScalarWhereInput!
  data: DeviceProfileUpdateManyDataInput!
}

input DeviceProfileUpdateOneWithoutDeviceNetworkTypeLinksInput {
  create: DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput
  update: DeviceProfileUpdateWithoutDeviceNetworkTypeLinksDataInput
  upsert: DeviceProfileUpsertWithoutDeviceNetworkTypeLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: DeviceProfileWhereUniqueInput
}

input DeviceProfileUpdateWithoutCompanyDataInput {
  description: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput
  name: String
  networkSettings: String
  networkType: NetworkTypeUpdateOneWithoutDeviceProfilesInput
}

input DeviceProfileUpdateWithoutDeviceNetworkTypeLinksDataInput {
  company: CompanyUpdateOneWithoutDeviceProfilesInput
  description: String
  name: String
  networkSettings: String
  networkType: NetworkTypeUpdateOneWithoutDeviceProfilesInput
}

input DeviceProfileUpdateWithoutNetworkTypeDataInput {
  company: CompanyUpdateOneWithoutDeviceProfilesInput
  description: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput
  name: String
  networkSettings: String
}

input DeviceProfileUpdateWithWhereUniqueWithoutCompanyInput {
  where: DeviceProfileWhereUniqueInput!
  data: DeviceProfileUpdateWithoutCompanyDataInput!
}

input DeviceProfileUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceProfileWhereUniqueInput!
  data: DeviceProfileUpdateWithoutNetworkTypeDataInput!
}

input DeviceProfileUpsertWithoutDeviceNetworkTypeLinksInput {
  update: DeviceProfileUpdateWithoutDeviceNetworkTypeLinksDataInput!
  create: DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput!
}

input DeviceProfileUpsertWithWhereUniqueWithoutCompanyInput {
  where: DeviceProfileWhereUniqueInput!
  update: DeviceProfileUpdateWithoutCompanyDataInput!
  create: DeviceProfileCreateWithoutCompanyInput!
}

input DeviceProfileUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceProfileWhereUniqueInput!
  update: DeviceProfileUpdateWithoutNetworkTypeDataInput!
  create: DeviceProfileCreateWithoutNetworkTypeInput!
}

input DeviceProfileWhereInput {
  company: CompanyWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  deviceNetworkTypeLinks_every: DeviceNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_some: DeviceNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_none: DeviceNetworkTypeLinkWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networkSettings: String
  networkSettings_not: String
  networkSettings_in: [String!]
  networkSettings_not_in: [String!]
  networkSettings_lt: String
  networkSettings_lte: String
  networkSettings_gt: String
  networkSettings_gte: String
  networkSettings_contains: String
  networkSettings_not_contains: String
  networkSettings_starts_with: String
  networkSettings_not_starts_with: String
  networkSettings_ends_with: String
  networkSettings_not_ends_with: String
  networkType: NetworkTypeWhereInput
  AND: [DeviceProfileWhereInput!]
  OR: [DeviceProfileWhereInput!]
  NOT: [DeviceProfileWhereInput!]
}

input DeviceProfileWhereUniqueInput {
  id: Int
}

input DeviceScalarWhereInput {
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  deviceModel: String
  deviceModel_not: String
  deviceModel_in: [String!]
  deviceModel_not_in: [String!]
  deviceModel_lt: String
  deviceModel_lte: String
  deviceModel_gt: String
  deviceModel_gte: String
  deviceModel_contains: String
  deviceModel_not_contains: String
  deviceModel_starts_with: String
  deviceModel_not_starts_with: String
  deviceModel_ends_with: String
  deviceModel_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DeviceScalarWhereInput!]
  OR: [DeviceScalarWhereInput!]
  NOT: [DeviceScalarWhereInput!]
}

type DeviceSubscriptionPayload {
  mutation: MutationType!
  node: Device
  updatedFields: [String!]
  previousValues: DevicePreviousValues
}

input DeviceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeviceWhereInput
  AND: [DeviceSubscriptionWhereInput!]
  OR: [DeviceSubscriptionWhereInput!]
  NOT: [DeviceSubscriptionWhereInput!]
}

input DeviceUpdateInput {
  application: ApplicationUpdateOneRequiredWithoutDevicesInput
  description: String
  deviceModel: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutDeviceInput
  name: String
}

input DeviceUpdateManyDataInput {
  description: String
  deviceModel: String
  name: String
}

input DeviceUpdateManyMutationInput {
  description: String
  deviceModel: String
  name: String
}

input DeviceUpdateManyWithoutApplicationInput {
  create: [DeviceCreateWithoutApplicationInput!]
  delete: [DeviceWhereUniqueInput!]
  connect: [DeviceWhereUniqueInput!]
  set: [DeviceWhereUniqueInput!]
  disconnect: [DeviceWhereUniqueInput!]
  update: [DeviceUpdateWithWhereUniqueWithoutApplicationInput!]
  upsert: [DeviceUpsertWithWhereUniqueWithoutApplicationInput!]
  deleteMany: [DeviceScalarWhereInput!]
  updateMany: [DeviceUpdateManyWithWhereNestedInput!]
}

input DeviceUpdateManyWithWhereNestedInput {
  where: DeviceScalarWhereInput!
  data: DeviceUpdateManyDataInput!
}

input DeviceUpdateOneWithoutDeviceNetworkTypeLinksInput {
  create: DeviceCreateWithoutDeviceNetworkTypeLinksInput
  update: DeviceUpdateWithoutDeviceNetworkTypeLinksDataInput
  upsert: DeviceUpsertWithoutDeviceNetworkTypeLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: DeviceWhereUniqueInput
}

input DeviceUpdateWithoutApplicationDataInput {
  description: String
  deviceModel: String
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutDeviceInput
  name: String
}

input DeviceUpdateWithoutDeviceNetworkTypeLinksDataInput {
  application: ApplicationUpdateOneRequiredWithoutDevicesInput
  description: String
  deviceModel: String
  name: String
}

input DeviceUpdateWithWhereUniqueWithoutApplicationInput {
  where: DeviceWhereUniqueInput!
  data: DeviceUpdateWithoutApplicationDataInput!
}

input DeviceUpsertWithoutDeviceNetworkTypeLinksInput {
  update: DeviceUpdateWithoutDeviceNetworkTypeLinksDataInput!
  create: DeviceCreateWithoutDeviceNetworkTypeLinksInput!
}

input DeviceUpsertWithWhereUniqueWithoutApplicationInput {
  where: DeviceWhereUniqueInput!
  update: DeviceUpdateWithoutApplicationDataInput!
  create: DeviceCreateWithoutApplicationInput!
}

input DeviceWhereInput {
  application: ApplicationWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  deviceModel: String
  deviceModel_not: String
  deviceModel_in: [String!]
  deviceModel_not_in: [String!]
  deviceModel_lt: String
  deviceModel_lte: String
  deviceModel_gt: String
  deviceModel_gte: String
  deviceModel_contains: String
  deviceModel_not_contains: String
  deviceModel_starts_with: String
  deviceModel_not_starts_with: String
  deviceModel_ends_with: String
  deviceModel_not_ends_with: String
  deviceNetworkTypeLinks_every: DeviceNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_some: DeviceNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_none: DeviceNetworkTypeLinkWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  NOT: [DeviceWhereInput!]
}

input DeviceWhereUniqueInput {
  id: Int
}

type EmailVerification {
  changeRequested: String
  email: String
  id: Int!
  user: User
  uuid: String
}

type EmailVerificationConnection {
  pageInfo: PageInfo!
  edges: [EmailVerificationEdge]!
  aggregate: AggregateEmailVerification!
}

input EmailVerificationCreateInput {
  changeRequested: String
  email: String
  user: UserCreateOneWithoutEmailVerificationsInput
  uuid: String
}

input EmailVerificationCreateManyWithoutUserInput {
  create: [EmailVerificationCreateWithoutUserInput!]
  connect: [EmailVerificationWhereUniqueInput!]
}

input EmailVerificationCreateWithoutUserInput {
  changeRequested: String
  email: String
  uuid: String
}

type EmailVerificationEdge {
  node: EmailVerification!
  cursor: String!
}

enum EmailVerificationOrderByInput {
  changeRequested_ASC
  changeRequested_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  uuid_ASC
  uuid_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmailVerificationPreviousValues {
  changeRequested: String
  email: String
  id: Int!
  uuid: String
}

input EmailVerificationScalarWhereInput {
  changeRequested: String
  changeRequested_not: String
  changeRequested_in: [String!]
  changeRequested_not_in: [String!]
  changeRequested_lt: String
  changeRequested_lte: String
  changeRequested_gt: String
  changeRequested_gte: String
  changeRequested_contains: String
  changeRequested_not_contains: String
  changeRequested_starts_with: String
  changeRequested_not_starts_with: String
  changeRequested_ends_with: String
  changeRequested_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_lt: String
  uuid_lte: String
  uuid_gt: String
  uuid_gte: String
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  AND: [EmailVerificationScalarWhereInput!]
  OR: [EmailVerificationScalarWhereInput!]
  NOT: [EmailVerificationScalarWhereInput!]
}

type EmailVerificationSubscriptionPayload {
  mutation: MutationType!
  node: EmailVerification
  updatedFields: [String!]
  previousValues: EmailVerificationPreviousValues
}

input EmailVerificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmailVerificationWhereInput
  AND: [EmailVerificationSubscriptionWhereInput!]
  OR: [EmailVerificationSubscriptionWhereInput!]
  NOT: [EmailVerificationSubscriptionWhereInput!]
}

input EmailVerificationUpdateInput {
  changeRequested: String
  email: String
  user: UserUpdateOneWithoutEmailVerificationsInput
  uuid: String
}

input EmailVerificationUpdateManyDataInput {
  changeRequested: String
  email: String
  uuid: String
}

input EmailVerificationUpdateManyMutationInput {
  changeRequested: String
  email: String
  uuid: String
}

input EmailVerificationUpdateManyWithoutUserInput {
  create: [EmailVerificationCreateWithoutUserInput!]
  delete: [EmailVerificationWhereUniqueInput!]
  connect: [EmailVerificationWhereUniqueInput!]
  set: [EmailVerificationWhereUniqueInput!]
  disconnect: [EmailVerificationWhereUniqueInput!]
  update: [EmailVerificationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EmailVerificationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [EmailVerificationScalarWhereInput!]
  updateMany: [EmailVerificationUpdateManyWithWhereNestedInput!]
}

input EmailVerificationUpdateManyWithWhereNestedInput {
  where: EmailVerificationScalarWhereInput!
  data: EmailVerificationUpdateManyDataInput!
}

input EmailVerificationUpdateWithoutUserDataInput {
  changeRequested: String
  email: String
  uuid: String
}

input EmailVerificationUpdateWithWhereUniqueWithoutUserInput {
  where: EmailVerificationWhereUniqueInput!
  data: EmailVerificationUpdateWithoutUserDataInput!
}

input EmailVerificationUpsertWithWhereUniqueWithoutUserInput {
  where: EmailVerificationWhereUniqueInput!
  update: EmailVerificationUpdateWithoutUserDataInput!
  create: EmailVerificationCreateWithoutUserInput!
}

input EmailVerificationWhereInput {
  changeRequested: String
  changeRequested_not: String
  changeRequested_in: [String!]
  changeRequested_not_in: [String!]
  changeRequested_lt: String
  changeRequested_lte: String
  changeRequested_gt: String
  changeRequested_gte: String
  changeRequested_contains: String
  changeRequested_not_contains: String
  changeRequested_starts_with: String
  changeRequested_not_starts_with: String
  changeRequested_ends_with: String
  changeRequested_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  user: UserWhereInput
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_lt: String
  uuid_lte: String
  uuid_gt: String
  uuid_gte: String
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  AND: [EmailVerificationWhereInput!]
  OR: [EmailVerificationWhereInput!]
  NOT: [EmailVerificationWhereInput!]
}

input EmailVerificationWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createApplicationNetworkTypeLink(data: ApplicationNetworkTypeLinkCreateInput!): ApplicationNetworkTypeLink!
  updateApplicationNetworkTypeLink(data: ApplicationNetworkTypeLinkUpdateInput!, where: ApplicationNetworkTypeLinkWhereUniqueInput!): ApplicationNetworkTypeLink
  updateManyApplicationNetworkTypeLinks(data: ApplicationNetworkTypeLinkUpdateManyMutationInput!, where: ApplicationNetworkTypeLinkWhereInput): BatchPayload!
  upsertApplicationNetworkTypeLink(where: ApplicationNetworkTypeLinkWhereUniqueInput!, create: ApplicationNetworkTypeLinkCreateInput!, update: ApplicationNetworkTypeLinkUpdateInput!): ApplicationNetworkTypeLink!
  deleteApplicationNetworkTypeLink(where: ApplicationNetworkTypeLinkWhereUniqueInput!): ApplicationNetworkTypeLink
  deleteManyApplicationNetworkTypeLinks(where: ApplicationNetworkTypeLinkWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createCompanyNetworkTypeLink(data: CompanyNetworkTypeLinkCreateInput!): CompanyNetworkTypeLink!
  updateCompanyNetworkTypeLink(data: CompanyNetworkTypeLinkUpdateInput!, where: CompanyNetworkTypeLinkWhereUniqueInput!): CompanyNetworkTypeLink
  updateManyCompanyNetworkTypeLinks(data: CompanyNetworkTypeLinkUpdateManyMutationInput!, where: CompanyNetworkTypeLinkWhereInput): BatchPayload!
  upsertCompanyNetworkTypeLink(where: CompanyNetworkTypeLinkWhereUniqueInput!, create: CompanyNetworkTypeLinkCreateInput!, update: CompanyNetworkTypeLinkUpdateInput!): CompanyNetworkTypeLink!
  deleteCompanyNetworkTypeLink(where: CompanyNetworkTypeLinkWhereUniqueInput!): CompanyNetworkTypeLink
  deleteManyCompanyNetworkTypeLinks(where: CompanyNetworkTypeLinkWhereInput): BatchPayload!
  createCompanyType(data: CompanyTypeCreateInput!): CompanyType!
  updateCompanyType(data: CompanyTypeUpdateInput!, where: CompanyTypeWhereUniqueInput!): CompanyType
  updateManyCompanyTypes(data: CompanyTypeUpdateManyMutationInput!, where: CompanyTypeWhereInput): BatchPayload!
  upsertCompanyType(where: CompanyTypeWhereUniqueInput!, create: CompanyTypeCreateInput!, update: CompanyTypeUpdateInput!): CompanyType!
  deleteCompanyType(where: CompanyTypeWhereUniqueInput!): CompanyType
  deleteManyCompanyTypes(where: CompanyTypeWhereInput): BatchPayload!
  createDevice(data: DeviceCreateInput!): Device!
  updateDevice(data: DeviceUpdateInput!, where: DeviceWhereUniqueInput!): Device
  updateManyDevices(data: DeviceUpdateManyMutationInput!, where: DeviceWhereInput): BatchPayload!
  upsertDevice(where: DeviceWhereUniqueInput!, create: DeviceCreateInput!, update: DeviceUpdateInput!): Device!
  deleteDevice(where: DeviceWhereUniqueInput!): Device
  deleteManyDevices(where: DeviceWhereInput): BatchPayload!
  createDeviceNetworkTypeLink(data: DeviceNetworkTypeLinkCreateInput!): DeviceNetworkTypeLink!
  updateDeviceNetworkTypeLink(data: DeviceNetworkTypeLinkUpdateInput!, where: DeviceNetworkTypeLinkWhereUniqueInput!): DeviceNetworkTypeLink
  updateManyDeviceNetworkTypeLinks(data: DeviceNetworkTypeLinkUpdateManyMutationInput!, where: DeviceNetworkTypeLinkWhereInput): BatchPayload!
  upsertDeviceNetworkTypeLink(where: DeviceNetworkTypeLinkWhereUniqueInput!, create: DeviceNetworkTypeLinkCreateInput!, update: DeviceNetworkTypeLinkUpdateInput!): DeviceNetworkTypeLink!
  deleteDeviceNetworkTypeLink(where: DeviceNetworkTypeLinkWhereUniqueInput!): DeviceNetworkTypeLink
  deleteManyDeviceNetworkTypeLinks(where: DeviceNetworkTypeLinkWhereInput): BatchPayload!
  createDeviceProfile(data: DeviceProfileCreateInput!): DeviceProfile!
  updateDeviceProfile(data: DeviceProfileUpdateInput!, where: DeviceProfileWhereUniqueInput!): DeviceProfile
  updateManyDeviceProfiles(data: DeviceProfileUpdateManyMutationInput!, where: DeviceProfileWhereInput): BatchPayload!
  upsertDeviceProfile(where: DeviceProfileWhereUniqueInput!, create: DeviceProfileCreateInput!, update: DeviceProfileUpdateInput!): DeviceProfile!
  deleteDeviceProfile(where: DeviceProfileWhereUniqueInput!): DeviceProfile
  deleteManyDeviceProfiles(where: DeviceProfileWhereInput): BatchPayload!
  createEmailVerification(data: EmailVerificationCreateInput!): EmailVerification!
  updateEmailVerification(data: EmailVerificationUpdateInput!, where: EmailVerificationWhereUniqueInput!): EmailVerification
  updateManyEmailVerifications(data: EmailVerificationUpdateManyMutationInput!, where: EmailVerificationWhereInput): BatchPayload!
  upsertEmailVerification(where: EmailVerificationWhereUniqueInput!, create: EmailVerificationCreateInput!, update: EmailVerificationUpdateInput!): EmailVerification!
  deleteEmailVerification(where: EmailVerificationWhereUniqueInput!): EmailVerification
  deleteManyEmailVerifications(where: EmailVerificationWhereInput): BatchPayload!
  createNetwork(data: NetworkCreateInput!): Network!
  updateNetwork(data: NetworkUpdateInput!, where: NetworkWhereUniqueInput!): Network
  updateManyNetworks(data: NetworkUpdateManyMutationInput!, where: NetworkWhereInput): BatchPayload!
  upsertNetwork(where: NetworkWhereUniqueInput!, create: NetworkCreateInput!, update: NetworkUpdateInput!): Network!
  deleteNetwork(where: NetworkWhereUniqueInput!): Network
  deleteManyNetworks(where: NetworkWhereInput): BatchPayload!
  createNetworkProtocol(data: NetworkProtocolCreateInput!): NetworkProtocol!
  updateNetworkProtocol(data: NetworkProtocolUpdateInput!, where: NetworkProtocolWhereUniqueInput!): NetworkProtocol
  updateManyNetworkProtocols(data: NetworkProtocolUpdateManyMutationInput!, where: NetworkProtocolWhereInput): BatchPayload!
  upsertNetworkProtocol(where: NetworkProtocolWhereUniqueInput!, create: NetworkProtocolCreateInput!, update: NetworkProtocolUpdateInput!): NetworkProtocol!
  deleteNetworkProtocol(where: NetworkProtocolWhereUniqueInput!): NetworkProtocol
  deleteManyNetworkProtocols(where: NetworkProtocolWhereInput): BatchPayload!
  createNetworkProvider(data: NetworkProviderCreateInput!): NetworkProvider!
  updateNetworkProvider(data: NetworkProviderUpdateInput!, where: NetworkProviderWhereUniqueInput!): NetworkProvider
  updateManyNetworkProviders(data: NetworkProviderUpdateManyMutationInput!, where: NetworkProviderWhereInput): BatchPayload!
  upsertNetworkProvider(where: NetworkProviderWhereUniqueInput!, create: NetworkProviderCreateInput!, update: NetworkProviderUpdateInput!): NetworkProvider!
  deleteNetworkProvider(where: NetworkProviderWhereUniqueInput!): NetworkProvider
  deleteManyNetworkProviders(where: NetworkProviderWhereInput): BatchPayload!
  createNetworkType(data: NetworkTypeCreateInput!): NetworkType!
  updateNetworkType(data: NetworkTypeUpdateInput!, where: NetworkTypeWhereUniqueInput!): NetworkType
  updateManyNetworkTypes(data: NetworkTypeUpdateManyMutationInput!, where: NetworkTypeWhereInput): BatchPayload!
  upsertNetworkType(where: NetworkTypeWhereUniqueInput!, create: NetworkTypeCreateInput!, update: NetworkTypeUpdateInput!): NetworkType!
  deleteNetworkType(where: NetworkTypeWhereUniqueInput!): NetworkType
  deleteManyNetworkTypes(where: NetworkTypeWhereInput): BatchPayload!
  createPasswordPolicy(data: PasswordPolicyCreateInput!): PasswordPolicy!
  updatePasswordPolicy(data: PasswordPolicyUpdateInput!, where: PasswordPolicyWhereUniqueInput!): PasswordPolicy
  updateManyPasswordPolicies(data: PasswordPolicyUpdateManyMutationInput!, where: PasswordPolicyWhereInput): BatchPayload!
  upsertPasswordPolicy(where: PasswordPolicyWhereUniqueInput!, create: PasswordPolicyCreateInput!, update: PasswordPolicyUpdateInput!): PasswordPolicy!
  deletePasswordPolicy(where: PasswordPolicyWhereUniqueInput!): PasswordPolicy
  deleteManyPasswordPolicies(where: PasswordPolicyWhereInput): BatchPayload!
  createProtocolData(data: ProtocolDataCreateInput!): ProtocolData!
  updateProtocolData(data: ProtocolDataUpdateInput!, where: ProtocolDataWhereUniqueInput!): ProtocolData
  updateManyProtocolDatas(data: ProtocolDataUpdateManyMutationInput!, where: ProtocolDataWhereInput): BatchPayload!
  upsertProtocolData(where: ProtocolDataWhereUniqueInput!, create: ProtocolDataCreateInput!, update: ProtocolDataUpdateInput!): ProtocolData!
  deleteProtocolData(where: ProtocolDataWhereUniqueInput!): ProtocolData
  deleteManyProtocolDatas(where: ProtocolDataWhereInput): BatchPayload!
  createReportingProtocol(data: ReportingProtocolCreateInput!): ReportingProtocol!
  updateReportingProtocol(data: ReportingProtocolUpdateInput!, where: ReportingProtocolWhereUniqueInput!): ReportingProtocol
  updateManyReportingProtocols(data: ReportingProtocolUpdateManyMutationInput!, where: ReportingProtocolWhereInput): BatchPayload!
  upsertReportingProtocol(where: ReportingProtocolWhereUniqueInput!, create: ReportingProtocolCreateInput!, update: ReportingProtocolUpdateInput!): ReportingProtocol!
  deleteReportingProtocol(where: ReportingProtocolWhereUniqueInput!): ReportingProtocol
  deleteManyReportingProtocols(where: ReportingProtocolWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserRole(data: UserRoleCreateInput!): UserRole!
  updateUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  updateManyUserRoles(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  upsertUserRole(where: UserRoleWhereUniqueInput!, create: UserRoleCreateInput!, update: UserRoleUpdateInput!): UserRole!
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  deleteManyUserRoles(where: UserRoleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Network {
  baseUrl: String
  id: Int!
  name: String
  networkProtocol: NetworkProtocol
  networkProvider: NetworkProvider
  networkType: NetworkType
  protocolDatas(where: ProtocolDataWhereInput, orderBy: ProtocolDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProtocolData!]
  securityData: String
}

type NetworkConnection {
  pageInfo: PageInfo!
  edges: [NetworkEdge]!
  aggregate: AggregateNetwork!
}

input NetworkCreateInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput
  networkType: NetworkTypeCreateOneWithoutNetworksInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkInput
  securityData: String
}

input NetworkCreateManyWithoutNetworkProtocolInput {
  create: [NetworkCreateWithoutNetworkProtocolInput!]
  connect: [NetworkWhereUniqueInput!]
}

input NetworkCreateManyWithoutNetworkProviderInput {
  create: [NetworkCreateWithoutNetworkProviderInput!]
  connect: [NetworkWhereUniqueInput!]
}

input NetworkCreateManyWithoutNetworkTypeInput {
  create: [NetworkCreateWithoutNetworkTypeInput!]
  connect: [NetworkWhereUniqueInput!]
}

input NetworkCreateOneWithoutProtocolDatasInput {
  create: NetworkCreateWithoutProtocolDatasInput
  connect: NetworkWhereUniqueInput
}

input NetworkCreateWithoutNetworkProtocolInput {
  baseUrl: String
  name: String
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput
  networkType: NetworkTypeCreateOneWithoutNetworksInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkInput
  securityData: String
}

input NetworkCreateWithoutNetworkProviderInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput
  networkType: NetworkTypeCreateOneWithoutNetworksInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkInput
  securityData: String
}

input NetworkCreateWithoutNetworkTypeInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkInput
  securityData: String
}

input NetworkCreateWithoutProtocolDatasInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput
  networkType: NetworkTypeCreateOneWithoutNetworksInput
  securityData: String
}

type NetworkEdge {
  node: Network!
  cursor: String!
}

enum NetworkOrderByInput {
  baseUrl_ASC
  baseUrl_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  securityData_ASC
  securityData_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NetworkPreviousValues {
  baseUrl: String
  id: Int!
  name: String
  securityData: String
}

type NetworkProtocol {
  id: Int!
  masterProtocol: NetworkProtocol
  name: String
  networkProtocols(where: NetworkProtocolWhereInput, orderBy: NetworkProtocolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkProtocol!]
  networkProtocolVersion: String
  networks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network!]
  networkType: NetworkType
  protocolDatas(where: ProtocolDataWhereInput, orderBy: ProtocolDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProtocolData!]
  protocolHandler: String
}

type NetworkProtocolConnection {
  pageInfo: PageInfo!
  edges: [NetworkProtocolEdge]!
  aggregate: AggregateNetworkProtocol!
}

input NetworkProtocolCreateInput {
  masterProtocol: NetworkProtocolCreateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkCreateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolCreateManyWithoutNetworkProtocolsInput {
  create: [NetworkProtocolCreateWithoutNetworkProtocolsInput!]
  connect: [NetworkProtocolWhereUniqueInput!]
}

input NetworkProtocolCreateManyWithoutNetworkTypeInput {
  create: [NetworkProtocolCreateWithoutNetworkTypeInput!]
  connect: [NetworkProtocolWhereUniqueInput!]
}

input NetworkProtocolCreateOneWithoutMasterProtocolInput {
  create: NetworkProtocolCreateWithoutMasterProtocolInput
  connect: NetworkProtocolWhereUniqueInput
}

input NetworkProtocolCreateOneWithoutNetworksInput {
  create: NetworkProtocolCreateWithoutNetworksInput
  connect: NetworkProtocolWhereUniqueInput
}

input NetworkProtocolCreateOneWithoutProtocolDatasInput {
  create: NetworkProtocolCreateWithoutProtocolDatasInput
  connect: NetworkProtocolWhereUniqueInput
}

input NetworkProtocolCreateWithoutMasterProtocolInput {
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkCreateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolCreateWithoutNetworkProtocolsInput {
  masterProtocol: NetworkProtocolCreateOneWithoutMasterProtocolInput
  name: String
  networkProtocolVersion: String
  networks: NetworkCreateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolCreateWithoutNetworksInput {
  masterProtocol: NetworkProtocolCreateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolCreateWithoutNetworkTypeInput {
  masterProtocol: NetworkProtocolCreateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkCreateManyWithoutNetworkProtocolInput
  protocolDatas: ProtocolDataCreateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolCreateWithoutProtocolDatasInput {
  masterProtocol: NetworkProtocolCreateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkCreateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput
  protocolHandler: String
}

type NetworkProtocolEdge {
  node: NetworkProtocol!
  cursor: String!
}

enum NetworkProtocolOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  networkProtocolVersion_ASC
  networkProtocolVersion_DESC
  protocolHandler_ASC
  protocolHandler_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NetworkProtocolPreviousValues {
  id: Int!
  name: String
  networkProtocolVersion: String
  protocolHandler: String
}

input NetworkProtocolScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networkProtocolVersion: String
  networkProtocolVersion_not: String
  networkProtocolVersion_in: [String!]
  networkProtocolVersion_not_in: [String!]
  networkProtocolVersion_lt: String
  networkProtocolVersion_lte: String
  networkProtocolVersion_gt: String
  networkProtocolVersion_gte: String
  networkProtocolVersion_contains: String
  networkProtocolVersion_not_contains: String
  networkProtocolVersion_starts_with: String
  networkProtocolVersion_not_starts_with: String
  networkProtocolVersion_ends_with: String
  networkProtocolVersion_not_ends_with: String
  protocolHandler: String
  protocolHandler_not: String
  protocolHandler_in: [String!]
  protocolHandler_not_in: [String!]
  protocolHandler_lt: String
  protocolHandler_lte: String
  protocolHandler_gt: String
  protocolHandler_gte: String
  protocolHandler_contains: String
  protocolHandler_not_contains: String
  protocolHandler_starts_with: String
  protocolHandler_not_starts_with: String
  protocolHandler_ends_with: String
  protocolHandler_not_ends_with: String
  AND: [NetworkProtocolScalarWhereInput!]
  OR: [NetworkProtocolScalarWhereInput!]
  NOT: [NetworkProtocolScalarWhereInput!]
}

type NetworkProtocolSubscriptionPayload {
  mutation: MutationType!
  node: NetworkProtocol
  updatedFields: [String!]
  previousValues: NetworkProtocolPreviousValues
}

input NetworkProtocolSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkProtocolWhereInput
  AND: [NetworkProtocolSubscriptionWhereInput!]
  OR: [NetworkProtocolSubscriptionWhereInput!]
  NOT: [NetworkProtocolSubscriptionWhereInput!]
}

input NetworkProtocolUpdateInput {
  masterProtocol: NetworkProtocolUpdateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkUpdateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeUpdateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolUpdateManyDataInput {
  name: String
  networkProtocolVersion: String
  protocolHandler: String
}

input NetworkProtocolUpdateManyMutationInput {
  name: String
  networkProtocolVersion: String
  protocolHandler: String
}

input NetworkProtocolUpdateManyWithoutNetworkProtocolsInput {
  create: [NetworkProtocolCreateWithoutNetworkProtocolsInput!]
  delete: [NetworkProtocolWhereUniqueInput!]
  connect: [NetworkProtocolWhereUniqueInput!]
  set: [NetworkProtocolWhereUniqueInput!]
  disconnect: [NetworkProtocolWhereUniqueInput!]
  update: [NetworkProtocolUpdateWithWhereUniqueWithoutNetworkProtocolsInput!]
  upsert: [NetworkProtocolUpsertWithWhereUniqueWithoutNetworkProtocolsInput!]
  deleteMany: [NetworkProtocolScalarWhereInput!]
  updateMany: [NetworkProtocolUpdateManyWithWhereNestedInput!]
}

input NetworkProtocolUpdateManyWithoutNetworkTypeInput {
  create: [NetworkProtocolCreateWithoutNetworkTypeInput!]
  delete: [NetworkProtocolWhereUniqueInput!]
  connect: [NetworkProtocolWhereUniqueInput!]
  set: [NetworkProtocolWhereUniqueInput!]
  disconnect: [NetworkProtocolWhereUniqueInput!]
  update: [NetworkProtocolUpdateWithWhereUniqueWithoutNetworkTypeInput!]
  upsert: [NetworkProtocolUpsertWithWhereUniqueWithoutNetworkTypeInput!]
  deleteMany: [NetworkProtocolScalarWhereInput!]
  updateMany: [NetworkProtocolUpdateManyWithWhereNestedInput!]
}

input NetworkProtocolUpdateManyWithWhereNestedInput {
  where: NetworkProtocolScalarWhereInput!
  data: NetworkProtocolUpdateManyDataInput!
}

input NetworkProtocolUpdateOneWithoutMasterProtocolInput {
  create: NetworkProtocolCreateWithoutMasterProtocolInput
  update: NetworkProtocolUpdateWithoutMasterProtocolDataInput
  upsert: NetworkProtocolUpsertWithoutMasterProtocolInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkProtocolWhereUniqueInput
}

input NetworkProtocolUpdateOneWithoutNetworksInput {
  create: NetworkProtocolCreateWithoutNetworksInput
  update: NetworkProtocolUpdateWithoutNetworksDataInput
  upsert: NetworkProtocolUpsertWithoutNetworksInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkProtocolWhereUniqueInput
}

input NetworkProtocolUpdateOneWithoutProtocolDatasInput {
  create: NetworkProtocolCreateWithoutProtocolDatasInput
  update: NetworkProtocolUpdateWithoutProtocolDatasDataInput
  upsert: NetworkProtocolUpsertWithoutProtocolDatasInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkProtocolWhereUniqueInput
}

input NetworkProtocolUpdateWithoutMasterProtocolDataInput {
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkUpdateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeUpdateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolUpdateWithoutNetworkProtocolsDataInput {
  masterProtocol: NetworkProtocolUpdateOneWithoutMasterProtocolInput
  name: String
  networkProtocolVersion: String
  networks: NetworkUpdateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeUpdateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolUpdateWithoutNetworksDataInput {
  masterProtocol: NetworkProtocolUpdateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networkType: NetworkTypeUpdateOneWithoutNetworkProtocolsInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolUpdateWithoutNetworkTypeDataInput {
  masterProtocol: NetworkProtocolUpdateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkUpdateManyWithoutNetworkProtocolInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkProtocolInput
  protocolHandler: String
}

input NetworkProtocolUpdateWithoutProtocolDatasDataInput {
  masterProtocol: NetworkProtocolUpdateOneWithoutMasterProtocolInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkProtocolsInput
  networkProtocolVersion: String
  networks: NetworkUpdateManyWithoutNetworkProtocolInput
  networkType: NetworkTypeUpdateOneWithoutNetworkProtocolsInput
  protocolHandler: String
}

input NetworkProtocolUpdateWithWhereUniqueWithoutNetworkProtocolsInput {
  where: NetworkProtocolWhereUniqueInput!
  data: NetworkProtocolUpdateWithoutNetworkProtocolsDataInput!
}

input NetworkProtocolUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkProtocolWhereUniqueInput!
  data: NetworkProtocolUpdateWithoutNetworkTypeDataInput!
}

input NetworkProtocolUpsertWithoutMasterProtocolInput {
  update: NetworkProtocolUpdateWithoutMasterProtocolDataInput!
  create: NetworkProtocolCreateWithoutMasterProtocolInput!
}

input NetworkProtocolUpsertWithoutNetworksInput {
  update: NetworkProtocolUpdateWithoutNetworksDataInput!
  create: NetworkProtocolCreateWithoutNetworksInput!
}

input NetworkProtocolUpsertWithoutProtocolDatasInput {
  update: NetworkProtocolUpdateWithoutProtocolDatasDataInput!
  create: NetworkProtocolCreateWithoutProtocolDatasInput!
}

input NetworkProtocolUpsertWithWhereUniqueWithoutNetworkProtocolsInput {
  where: NetworkProtocolWhereUniqueInput!
  update: NetworkProtocolUpdateWithoutNetworkProtocolsDataInput!
  create: NetworkProtocolCreateWithoutNetworkProtocolsInput!
}

input NetworkProtocolUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkProtocolWhereUniqueInput!
  update: NetworkProtocolUpdateWithoutNetworkTypeDataInput!
  create: NetworkProtocolCreateWithoutNetworkTypeInput!
}

input NetworkProtocolWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  masterProtocol: NetworkProtocolWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networkProtocols_every: NetworkProtocolWhereInput
  networkProtocols_some: NetworkProtocolWhereInput
  networkProtocols_none: NetworkProtocolWhereInput
  networkProtocolVersion: String
  networkProtocolVersion_not: String
  networkProtocolVersion_in: [String!]
  networkProtocolVersion_not_in: [String!]
  networkProtocolVersion_lt: String
  networkProtocolVersion_lte: String
  networkProtocolVersion_gt: String
  networkProtocolVersion_gte: String
  networkProtocolVersion_contains: String
  networkProtocolVersion_not_contains: String
  networkProtocolVersion_starts_with: String
  networkProtocolVersion_not_starts_with: String
  networkProtocolVersion_ends_with: String
  networkProtocolVersion_not_ends_with: String
  networks_every: NetworkWhereInput
  networks_some: NetworkWhereInput
  networks_none: NetworkWhereInput
  networkType: NetworkTypeWhereInput
  protocolDatas_every: ProtocolDataWhereInput
  protocolDatas_some: ProtocolDataWhereInput
  protocolDatas_none: ProtocolDataWhereInput
  protocolHandler: String
  protocolHandler_not: String
  protocolHandler_in: [String!]
  protocolHandler_not_in: [String!]
  protocolHandler_lt: String
  protocolHandler_lte: String
  protocolHandler_gt: String
  protocolHandler_gte: String
  protocolHandler_contains: String
  protocolHandler_not_contains: String
  protocolHandler_starts_with: String
  protocolHandler_not_starts_with: String
  protocolHandler_ends_with: String
  protocolHandler_not_ends_with: String
  AND: [NetworkProtocolWhereInput!]
  OR: [NetworkProtocolWhereInput!]
  NOT: [NetworkProtocolWhereInput!]
}

input NetworkProtocolWhereUniqueInput {
  id: Int
}

type NetworkProvider {
  id: Int!
  name: String
  networks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network!]
}

type NetworkProviderConnection {
  pageInfo: PageInfo!
  edges: [NetworkProviderEdge]!
  aggregate: AggregateNetworkProvider!
}

input NetworkProviderCreateInput {
  name: String
  networks: NetworkCreateManyWithoutNetworkProviderInput
}

input NetworkProviderCreateOneWithoutNetworksInput {
  create: NetworkProviderCreateWithoutNetworksInput
  connect: NetworkProviderWhereUniqueInput
}

input NetworkProviderCreateWithoutNetworksInput {
  name: String
}

type NetworkProviderEdge {
  node: NetworkProvider!
  cursor: String!
}

enum NetworkProviderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NetworkProviderPreviousValues {
  id: Int!
  name: String
}

type NetworkProviderSubscriptionPayload {
  mutation: MutationType!
  node: NetworkProvider
  updatedFields: [String!]
  previousValues: NetworkProviderPreviousValues
}

input NetworkProviderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkProviderWhereInput
  AND: [NetworkProviderSubscriptionWhereInput!]
  OR: [NetworkProviderSubscriptionWhereInput!]
  NOT: [NetworkProviderSubscriptionWhereInput!]
}

input NetworkProviderUpdateInput {
  name: String
  networks: NetworkUpdateManyWithoutNetworkProviderInput
}

input NetworkProviderUpdateManyMutationInput {
  name: String
}

input NetworkProviderUpdateOneWithoutNetworksInput {
  create: NetworkProviderCreateWithoutNetworksInput
  update: NetworkProviderUpdateWithoutNetworksDataInput
  upsert: NetworkProviderUpsertWithoutNetworksInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkProviderWhereUniqueInput
}

input NetworkProviderUpdateWithoutNetworksDataInput {
  name: String
}

input NetworkProviderUpsertWithoutNetworksInput {
  update: NetworkProviderUpdateWithoutNetworksDataInput!
  create: NetworkProviderCreateWithoutNetworksInput!
}

input NetworkProviderWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networks_every: NetworkWhereInput
  networks_some: NetworkWhereInput
  networks_none: NetworkWhereInput
  AND: [NetworkProviderWhereInput!]
  OR: [NetworkProviderWhereInput!]
  NOT: [NetworkProviderWhereInput!]
}

input NetworkProviderWhereUniqueInput {
  id: Int
}

input NetworkScalarWhereInput {
  baseUrl: String
  baseUrl_not: String
  baseUrl_in: [String!]
  baseUrl_not_in: [String!]
  baseUrl_lt: String
  baseUrl_lte: String
  baseUrl_gt: String
  baseUrl_gte: String
  baseUrl_contains: String
  baseUrl_not_contains: String
  baseUrl_starts_with: String
  baseUrl_not_starts_with: String
  baseUrl_ends_with: String
  baseUrl_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  securityData: String
  securityData_not: String
  securityData_in: [String!]
  securityData_not_in: [String!]
  securityData_lt: String
  securityData_lte: String
  securityData_gt: String
  securityData_gte: String
  securityData_contains: String
  securityData_not_contains: String
  securityData_starts_with: String
  securityData_not_starts_with: String
  securityData_ends_with: String
  securityData_not_ends_with: String
  AND: [NetworkScalarWhereInput!]
  OR: [NetworkScalarWhereInput!]
  NOT: [NetworkScalarWhereInput!]
}

type NetworkSubscriptionPayload {
  mutation: MutationType!
  node: Network
  updatedFields: [String!]
  previousValues: NetworkPreviousValues
}

input NetworkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkWhereInput
  AND: [NetworkSubscriptionWhereInput!]
  OR: [NetworkSubscriptionWhereInput!]
  NOT: [NetworkSubscriptionWhereInput!]
}

type NetworkType {
  applicationNetworkTypeLinks(where: ApplicationNetworkTypeLinkWhereInput, orderBy: ApplicationNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApplicationNetworkTypeLink!]
  companyNetworkTypeLinks(where: CompanyNetworkTypeLinkWhereInput, orderBy: CompanyNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyNetworkTypeLink!]
  deviceNetworkTypeLinks(where: DeviceNetworkTypeLinkWhereInput, orderBy: DeviceNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceNetworkTypeLink!]
  deviceProfiles(where: DeviceProfileWhereInput, orderBy: DeviceProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceProfile!]
  id: Int!
  name: String
  networkProtocols(where: NetworkProtocolWhereInput, orderBy: NetworkProtocolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkProtocol!]
  networks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network!]
}

type NetworkTypeConnection {
  pageInfo: PageInfo!
  edges: [NetworkTypeEdge]!
  aggregate: AggregateNetworkType!
}

input NetworkTypeCreateInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileCreateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkTypeInput
  networks: NetworkCreateManyWithoutNetworkTypeInput
}

input NetworkTypeCreateOneWithoutApplicationNetworkTypeLinksInput {
  create: NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeCreateOneWithoutCompanyNetworkTypeLinksInput {
  create: NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput {
  create: NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeCreateOneWithoutDeviceProfilesInput {
  create: NetworkTypeCreateWithoutDeviceProfilesInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeCreateOneWithoutNetworkProtocolsInput {
  create: NetworkTypeCreateWithoutNetworkProtocolsInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeCreateOneWithoutNetworksInput {
  create: NetworkTypeCreateWithoutNetworksInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput {
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileCreateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkTypeInput
  networks: NetworkCreateManyWithoutNetworkTypeInput
}

input NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileCreateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkTypeInput
  networks: NetworkCreateManyWithoutNetworkTypeInput
}

input NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileCreateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkTypeInput
  networks: NetworkCreateManyWithoutNetworkTypeInput
}

input NetworkTypeCreateWithoutDeviceProfilesInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkTypeInput
  networks: NetworkCreateManyWithoutNetworkTypeInput
}

input NetworkTypeCreateWithoutNetworkProtocolsInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileCreateManyWithoutNetworkTypeInput
  name: String
  networks: NetworkCreateManyWithoutNetworkTypeInput
}

input NetworkTypeCreateWithoutNetworksInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileCreateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolCreateManyWithoutNetworkTypeInput
}

type NetworkTypeEdge {
  node: NetworkType!
  cursor: String!
}

enum NetworkTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NetworkTypePreviousValues {
  id: Int!
  name: String
}

type NetworkTypeSubscriptionPayload {
  mutation: MutationType!
  node: NetworkType
  updatedFields: [String!]
  previousValues: NetworkTypePreviousValues
}

input NetworkTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkTypeWhereInput
  AND: [NetworkTypeSubscriptionWhereInput!]
  OR: [NetworkTypeSubscriptionWhereInput!]
  NOT: [NetworkTypeSubscriptionWhereInput!]
}

input NetworkTypeUpdateInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileUpdateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkTypeInput
  networks: NetworkUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpdateManyMutationInput {
  name: String
}

input NetworkTypeUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput {
  create: NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput
  update: NetworkTypeUpdateWithoutApplicationNetworkTypeLinksDataInput
  upsert: NetworkTypeUpsertWithoutApplicationNetworkTypeLinksInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput {
  create: NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput
  update: NetworkTypeUpdateWithoutCompanyNetworkTypeLinksDataInput
  upsert: NetworkTypeUpsertWithoutCompanyNetworkTypeLinksInput
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeUpdateOneWithoutDeviceNetworkTypeLinksInput {
  create: NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput
  update: NetworkTypeUpdateWithoutDeviceNetworkTypeLinksDataInput
  upsert: NetworkTypeUpsertWithoutDeviceNetworkTypeLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeUpdateOneWithoutDeviceProfilesInput {
  create: NetworkTypeCreateWithoutDeviceProfilesInput
  update: NetworkTypeUpdateWithoutDeviceProfilesDataInput
  upsert: NetworkTypeUpsertWithoutDeviceProfilesInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeUpdateOneWithoutNetworkProtocolsInput {
  create: NetworkTypeCreateWithoutNetworkProtocolsInput
  update: NetworkTypeUpdateWithoutNetworkProtocolsDataInput
  upsert: NetworkTypeUpsertWithoutNetworkProtocolsInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeUpdateOneWithoutNetworksInput {
  create: NetworkTypeCreateWithoutNetworksInput
  update: NetworkTypeUpdateWithoutNetworksDataInput
  upsert: NetworkTypeUpsertWithoutNetworksInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkTypeWhereUniqueInput
}

input NetworkTypeUpdateWithoutApplicationNetworkTypeLinksDataInput {
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileUpdateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkTypeInput
  networks: NetworkUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpdateWithoutCompanyNetworkTypeLinksDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileUpdateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkTypeInput
  networks: NetworkUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpdateWithoutDeviceNetworkTypeLinksDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileUpdateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkTypeInput
  networks: NetworkUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpdateWithoutDeviceProfilesDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkTypeInput
  networks: NetworkUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpdateWithoutNetworkProtocolsDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileUpdateManyWithoutNetworkTypeInput
  name: String
  networks: NetworkUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpdateWithoutNetworksDataInput {
  applicationNetworkTypeLinks: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  companyNetworkTypeLinks: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceNetworkTypeLinks: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput
  deviceProfiles: DeviceProfileUpdateManyWithoutNetworkTypeInput
  name: String
  networkProtocols: NetworkProtocolUpdateManyWithoutNetworkTypeInput
}

input NetworkTypeUpsertWithoutApplicationNetworkTypeLinksInput {
  update: NetworkTypeUpdateWithoutApplicationNetworkTypeLinksDataInput!
  create: NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput!
}

input NetworkTypeUpsertWithoutCompanyNetworkTypeLinksInput {
  update: NetworkTypeUpdateWithoutCompanyNetworkTypeLinksDataInput!
  create: NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput!
}

input NetworkTypeUpsertWithoutDeviceNetworkTypeLinksInput {
  update: NetworkTypeUpdateWithoutDeviceNetworkTypeLinksDataInput!
  create: NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput!
}

input NetworkTypeUpsertWithoutDeviceProfilesInput {
  update: NetworkTypeUpdateWithoutDeviceProfilesDataInput!
  create: NetworkTypeCreateWithoutDeviceProfilesInput!
}

input NetworkTypeUpsertWithoutNetworkProtocolsInput {
  update: NetworkTypeUpdateWithoutNetworkProtocolsDataInput!
  create: NetworkTypeCreateWithoutNetworkProtocolsInput!
}

input NetworkTypeUpsertWithoutNetworksInput {
  update: NetworkTypeUpdateWithoutNetworksDataInput!
  create: NetworkTypeCreateWithoutNetworksInput!
}

input NetworkTypeWhereInput {
  applicationNetworkTypeLinks_every: ApplicationNetworkTypeLinkWhereInput
  applicationNetworkTypeLinks_some: ApplicationNetworkTypeLinkWhereInput
  applicationNetworkTypeLinks_none: ApplicationNetworkTypeLinkWhereInput
  companyNetworkTypeLinks_every: CompanyNetworkTypeLinkWhereInput
  companyNetworkTypeLinks_some: CompanyNetworkTypeLinkWhereInput
  companyNetworkTypeLinks_none: CompanyNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_every: DeviceNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_some: DeviceNetworkTypeLinkWhereInput
  deviceNetworkTypeLinks_none: DeviceNetworkTypeLinkWhereInput
  deviceProfiles_every: DeviceProfileWhereInput
  deviceProfiles_some: DeviceProfileWhereInput
  deviceProfiles_none: DeviceProfileWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networkProtocols_every: NetworkProtocolWhereInput
  networkProtocols_some: NetworkProtocolWhereInput
  networkProtocols_none: NetworkProtocolWhereInput
  networks_every: NetworkWhereInput
  networks_some: NetworkWhereInput
  networks_none: NetworkWhereInput
  AND: [NetworkTypeWhereInput!]
  OR: [NetworkTypeWhereInput!]
  NOT: [NetworkTypeWhereInput!]
}

input NetworkTypeWhereUniqueInput {
  id: Int
}

input NetworkUpdateInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolUpdateOneWithoutNetworksInput
  networkProvider: NetworkProviderUpdateOneWithoutNetworksInput
  networkType: NetworkTypeUpdateOneWithoutNetworksInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkInput
  securityData: String
}

input NetworkUpdateManyDataInput {
  baseUrl: String
  name: String
  securityData: String
}

input NetworkUpdateManyMutationInput {
  baseUrl: String
  name: String
  securityData: String
}

input NetworkUpdateManyWithoutNetworkProtocolInput {
  create: [NetworkCreateWithoutNetworkProtocolInput!]
  delete: [NetworkWhereUniqueInput!]
  connect: [NetworkWhereUniqueInput!]
  set: [NetworkWhereUniqueInput!]
  disconnect: [NetworkWhereUniqueInput!]
  update: [NetworkUpdateWithWhereUniqueWithoutNetworkProtocolInput!]
  upsert: [NetworkUpsertWithWhereUniqueWithoutNetworkProtocolInput!]
  deleteMany: [NetworkScalarWhereInput!]
  updateMany: [NetworkUpdateManyWithWhereNestedInput!]
}

input NetworkUpdateManyWithoutNetworkProviderInput {
  create: [NetworkCreateWithoutNetworkProviderInput!]
  delete: [NetworkWhereUniqueInput!]
  connect: [NetworkWhereUniqueInput!]
  set: [NetworkWhereUniqueInput!]
  disconnect: [NetworkWhereUniqueInput!]
  update: [NetworkUpdateWithWhereUniqueWithoutNetworkProviderInput!]
  upsert: [NetworkUpsertWithWhereUniqueWithoutNetworkProviderInput!]
  deleteMany: [NetworkScalarWhereInput!]
  updateMany: [NetworkUpdateManyWithWhereNestedInput!]
}

input NetworkUpdateManyWithoutNetworkTypeInput {
  create: [NetworkCreateWithoutNetworkTypeInput!]
  delete: [NetworkWhereUniqueInput!]
  connect: [NetworkWhereUniqueInput!]
  set: [NetworkWhereUniqueInput!]
  disconnect: [NetworkWhereUniqueInput!]
  update: [NetworkUpdateWithWhereUniqueWithoutNetworkTypeInput!]
  upsert: [NetworkUpsertWithWhereUniqueWithoutNetworkTypeInput!]
  deleteMany: [NetworkScalarWhereInput!]
  updateMany: [NetworkUpdateManyWithWhereNestedInput!]
}

input NetworkUpdateManyWithWhereNestedInput {
  where: NetworkScalarWhereInput!
  data: NetworkUpdateManyDataInput!
}

input NetworkUpdateOneWithoutProtocolDatasInput {
  create: NetworkCreateWithoutProtocolDatasInput
  update: NetworkUpdateWithoutProtocolDatasDataInput
  upsert: NetworkUpsertWithoutProtocolDatasInput
  delete: Boolean
  disconnect: Boolean
  connect: NetworkWhereUniqueInput
}

input NetworkUpdateWithoutNetworkProtocolDataInput {
  baseUrl: String
  name: String
  networkProvider: NetworkProviderUpdateOneWithoutNetworksInput
  networkType: NetworkTypeUpdateOneWithoutNetworksInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkInput
  securityData: String
}

input NetworkUpdateWithoutNetworkProviderDataInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolUpdateOneWithoutNetworksInput
  networkType: NetworkTypeUpdateOneWithoutNetworksInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkInput
  securityData: String
}

input NetworkUpdateWithoutNetworkTypeDataInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolUpdateOneWithoutNetworksInput
  networkProvider: NetworkProviderUpdateOneWithoutNetworksInput
  protocolDatas: ProtocolDataUpdateManyWithoutNetworkInput
  securityData: String
}

input NetworkUpdateWithoutProtocolDatasDataInput {
  baseUrl: String
  name: String
  networkProtocol: NetworkProtocolUpdateOneWithoutNetworksInput
  networkProvider: NetworkProviderUpdateOneWithoutNetworksInput
  networkType: NetworkTypeUpdateOneWithoutNetworksInput
  securityData: String
}

input NetworkUpdateWithWhereUniqueWithoutNetworkProtocolInput {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateWithoutNetworkProtocolDataInput!
}

input NetworkUpdateWithWhereUniqueWithoutNetworkProviderInput {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateWithoutNetworkProviderDataInput!
}

input NetworkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateWithoutNetworkTypeDataInput!
}

input NetworkUpsertWithoutProtocolDatasInput {
  update: NetworkUpdateWithoutProtocolDatasDataInput!
  create: NetworkCreateWithoutProtocolDatasInput!
}

input NetworkUpsertWithWhereUniqueWithoutNetworkProtocolInput {
  where: NetworkWhereUniqueInput!
  update: NetworkUpdateWithoutNetworkProtocolDataInput!
  create: NetworkCreateWithoutNetworkProtocolInput!
}

input NetworkUpsertWithWhereUniqueWithoutNetworkProviderInput {
  where: NetworkWhereUniqueInput!
  update: NetworkUpdateWithoutNetworkProviderDataInput!
  create: NetworkCreateWithoutNetworkProviderInput!
}

input NetworkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkWhereUniqueInput!
  update: NetworkUpdateWithoutNetworkTypeDataInput!
  create: NetworkCreateWithoutNetworkTypeInput!
}

input NetworkWhereInput {
  baseUrl: String
  baseUrl_not: String
  baseUrl_in: [String!]
  baseUrl_not_in: [String!]
  baseUrl_lt: String
  baseUrl_lte: String
  baseUrl_gt: String
  baseUrl_gte: String
  baseUrl_contains: String
  baseUrl_not_contains: String
  baseUrl_starts_with: String
  baseUrl_not_starts_with: String
  baseUrl_ends_with: String
  baseUrl_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  networkProtocol: NetworkProtocolWhereInput
  networkProvider: NetworkProviderWhereInput
  networkType: NetworkTypeWhereInput
  protocolDatas_every: ProtocolDataWhereInput
  protocolDatas_some: ProtocolDataWhereInput
  protocolDatas_none: ProtocolDataWhereInput
  securityData: String
  securityData_not: String
  securityData_in: [String!]
  securityData_not_in: [String!]
  securityData_lt: String
  securityData_lte: String
  securityData_gt: String
  securityData_gte: String
  securityData_contains: String
  securityData_not_contains: String
  securityData_starts_with: String
  securityData_not_starts_with: String
  securityData_ends_with: String
  securityData_not_ends_with: String
  AND: [NetworkWhereInput!]
  OR: [NetworkWhereInput!]
  NOT: [NetworkWhereInput!]
}

input NetworkWhereUniqueInput {
  id: Int
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordPolicy {
  company: Company
  id: Int!
  ruleRegExp: String
  ruleText: String
}

type PasswordPolicyConnection {
  pageInfo: PageInfo!
  edges: [PasswordPolicyEdge]!
  aggregate: AggregatePasswordPolicy!
}

input PasswordPolicyCreateInput {
  company: CompanyCreateOneWithoutPasswordPoliciesInput
  ruleRegExp: String
  ruleText: String
}

input PasswordPolicyCreateManyWithoutCompanyInput {
  create: [PasswordPolicyCreateWithoutCompanyInput!]
  connect: [PasswordPolicyWhereUniqueInput!]
}

input PasswordPolicyCreateWithoutCompanyInput {
  ruleRegExp: String
  ruleText: String
}

type PasswordPolicyEdge {
  node: PasswordPolicy!
  cursor: String!
}

enum PasswordPolicyOrderByInput {
  id_ASC
  id_DESC
  ruleRegExp_ASC
  ruleRegExp_DESC
  ruleText_ASC
  ruleText_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PasswordPolicyPreviousValues {
  id: Int!
  ruleRegExp: String
  ruleText: String
}

input PasswordPolicyScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  ruleRegExp: String
  ruleRegExp_not: String
  ruleRegExp_in: [String!]
  ruleRegExp_not_in: [String!]
  ruleRegExp_lt: String
  ruleRegExp_lte: String
  ruleRegExp_gt: String
  ruleRegExp_gte: String
  ruleRegExp_contains: String
  ruleRegExp_not_contains: String
  ruleRegExp_starts_with: String
  ruleRegExp_not_starts_with: String
  ruleRegExp_ends_with: String
  ruleRegExp_not_ends_with: String
  ruleText: String
  ruleText_not: String
  ruleText_in: [String!]
  ruleText_not_in: [String!]
  ruleText_lt: String
  ruleText_lte: String
  ruleText_gt: String
  ruleText_gte: String
  ruleText_contains: String
  ruleText_not_contains: String
  ruleText_starts_with: String
  ruleText_not_starts_with: String
  ruleText_ends_with: String
  ruleText_not_ends_with: String
  AND: [PasswordPolicyScalarWhereInput!]
  OR: [PasswordPolicyScalarWhereInput!]
  NOT: [PasswordPolicyScalarWhereInput!]
}

type PasswordPolicySubscriptionPayload {
  mutation: MutationType!
  node: PasswordPolicy
  updatedFields: [String!]
  previousValues: PasswordPolicyPreviousValues
}

input PasswordPolicySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PasswordPolicyWhereInput
  AND: [PasswordPolicySubscriptionWhereInput!]
  OR: [PasswordPolicySubscriptionWhereInput!]
  NOT: [PasswordPolicySubscriptionWhereInput!]
}

input PasswordPolicyUpdateInput {
  company: CompanyUpdateOneWithoutPasswordPoliciesInput
  ruleRegExp: String
  ruleText: String
}

input PasswordPolicyUpdateManyDataInput {
  ruleRegExp: String
  ruleText: String
}

input PasswordPolicyUpdateManyMutationInput {
  ruleRegExp: String
  ruleText: String
}

input PasswordPolicyUpdateManyWithoutCompanyInput {
  create: [PasswordPolicyCreateWithoutCompanyInput!]
  delete: [PasswordPolicyWhereUniqueInput!]
  connect: [PasswordPolicyWhereUniqueInput!]
  set: [PasswordPolicyWhereUniqueInput!]
  disconnect: [PasswordPolicyWhereUniqueInput!]
  update: [PasswordPolicyUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [PasswordPolicyUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [PasswordPolicyScalarWhereInput!]
  updateMany: [PasswordPolicyUpdateManyWithWhereNestedInput!]
}

input PasswordPolicyUpdateManyWithWhereNestedInput {
  where: PasswordPolicyScalarWhereInput!
  data: PasswordPolicyUpdateManyDataInput!
}

input PasswordPolicyUpdateWithoutCompanyDataInput {
  ruleRegExp: String
  ruleText: String
}

input PasswordPolicyUpdateWithWhereUniqueWithoutCompanyInput {
  where: PasswordPolicyWhereUniqueInput!
  data: PasswordPolicyUpdateWithoutCompanyDataInput!
}

input PasswordPolicyUpsertWithWhereUniqueWithoutCompanyInput {
  where: PasswordPolicyWhereUniqueInput!
  update: PasswordPolicyUpdateWithoutCompanyDataInput!
  create: PasswordPolicyCreateWithoutCompanyInput!
}

input PasswordPolicyWhereInput {
  company: CompanyWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  ruleRegExp: String
  ruleRegExp_not: String
  ruleRegExp_in: [String!]
  ruleRegExp_not_in: [String!]
  ruleRegExp_lt: String
  ruleRegExp_lte: String
  ruleRegExp_gt: String
  ruleRegExp_gte: String
  ruleRegExp_contains: String
  ruleRegExp_not_contains: String
  ruleRegExp_starts_with: String
  ruleRegExp_not_starts_with: String
  ruleRegExp_ends_with: String
  ruleRegExp_not_ends_with: String
  ruleText: String
  ruleText_not: String
  ruleText_in: [String!]
  ruleText_not_in: [String!]
  ruleText_lt: String
  ruleText_lte: String
  ruleText_gt: String
  ruleText_gte: String
  ruleText_contains: String
  ruleText_not_contains: String
  ruleText_starts_with: String
  ruleText_not_starts_with: String
  ruleText_ends_with: String
  ruleText_not_ends_with: String
  AND: [PasswordPolicyWhereInput!]
  OR: [PasswordPolicyWhereInput!]
  NOT: [PasswordPolicyWhereInput!]
}

input PasswordPolicyWhereUniqueInput {
  id: Int
}

type ProtocolData {
  dataIdentifier: String
  dataValue: String
  id: Int!
  network: Network
  networkProtocol: NetworkProtocol
}

type ProtocolDataConnection {
  pageInfo: PageInfo!
  edges: [ProtocolDataEdge]!
  aggregate: AggregateProtocolData!
}

input ProtocolDataCreateInput {
  dataIdentifier: String
  dataValue: String
  network: NetworkCreateOneWithoutProtocolDatasInput
  networkProtocol: NetworkProtocolCreateOneWithoutProtocolDatasInput
}

input ProtocolDataCreateManyWithoutNetworkInput {
  create: [ProtocolDataCreateWithoutNetworkInput!]
  connect: [ProtocolDataWhereUniqueInput!]
}

input ProtocolDataCreateManyWithoutNetworkProtocolInput {
  create: [ProtocolDataCreateWithoutNetworkProtocolInput!]
  connect: [ProtocolDataWhereUniqueInput!]
}

input ProtocolDataCreateWithoutNetworkInput {
  dataIdentifier: String
  dataValue: String
  networkProtocol: NetworkProtocolCreateOneWithoutProtocolDatasInput
}

input ProtocolDataCreateWithoutNetworkProtocolInput {
  dataIdentifier: String
  dataValue: String
  network: NetworkCreateOneWithoutProtocolDatasInput
}

type ProtocolDataEdge {
  node: ProtocolData!
  cursor: String!
}

enum ProtocolDataOrderByInput {
  dataIdentifier_ASC
  dataIdentifier_DESC
  dataValue_ASC
  dataValue_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProtocolDataPreviousValues {
  dataIdentifier: String
  dataValue: String
  id: Int!
}

input ProtocolDataScalarWhereInput {
  dataIdentifier: String
  dataIdentifier_not: String
  dataIdentifier_in: [String!]
  dataIdentifier_not_in: [String!]
  dataIdentifier_lt: String
  dataIdentifier_lte: String
  dataIdentifier_gt: String
  dataIdentifier_gte: String
  dataIdentifier_contains: String
  dataIdentifier_not_contains: String
  dataIdentifier_starts_with: String
  dataIdentifier_not_starts_with: String
  dataIdentifier_ends_with: String
  dataIdentifier_not_ends_with: String
  dataValue: String
  dataValue_not: String
  dataValue_in: [String!]
  dataValue_not_in: [String!]
  dataValue_lt: String
  dataValue_lte: String
  dataValue_gt: String
  dataValue_gte: String
  dataValue_contains: String
  dataValue_not_contains: String
  dataValue_starts_with: String
  dataValue_not_starts_with: String
  dataValue_ends_with: String
  dataValue_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  AND: [ProtocolDataScalarWhereInput!]
  OR: [ProtocolDataScalarWhereInput!]
  NOT: [ProtocolDataScalarWhereInput!]
}

type ProtocolDataSubscriptionPayload {
  mutation: MutationType!
  node: ProtocolData
  updatedFields: [String!]
  previousValues: ProtocolDataPreviousValues
}

input ProtocolDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProtocolDataWhereInput
  AND: [ProtocolDataSubscriptionWhereInput!]
  OR: [ProtocolDataSubscriptionWhereInput!]
  NOT: [ProtocolDataSubscriptionWhereInput!]
}

input ProtocolDataUpdateInput {
  dataIdentifier: String
  dataValue: String
  network: NetworkUpdateOneWithoutProtocolDatasInput
  networkProtocol: NetworkProtocolUpdateOneWithoutProtocolDatasInput
}

input ProtocolDataUpdateManyDataInput {
  dataIdentifier: String
  dataValue: String
}

input ProtocolDataUpdateManyMutationInput {
  dataIdentifier: String
  dataValue: String
}

input ProtocolDataUpdateManyWithoutNetworkInput {
  create: [ProtocolDataCreateWithoutNetworkInput!]
  delete: [ProtocolDataWhereUniqueInput!]
  connect: [ProtocolDataWhereUniqueInput!]
  set: [ProtocolDataWhereUniqueInput!]
  disconnect: [ProtocolDataWhereUniqueInput!]
  update: [ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput!]
  upsert: [ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput!]
  deleteMany: [ProtocolDataScalarWhereInput!]
  updateMany: [ProtocolDataUpdateManyWithWhereNestedInput!]
}

input ProtocolDataUpdateManyWithoutNetworkProtocolInput {
  create: [ProtocolDataCreateWithoutNetworkProtocolInput!]
  delete: [ProtocolDataWhereUniqueInput!]
  connect: [ProtocolDataWhereUniqueInput!]
  set: [ProtocolDataWhereUniqueInput!]
  disconnect: [ProtocolDataWhereUniqueInput!]
  update: [ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput!]
  upsert: [ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput!]
  deleteMany: [ProtocolDataScalarWhereInput!]
  updateMany: [ProtocolDataUpdateManyWithWhereNestedInput!]
}

input ProtocolDataUpdateManyWithWhereNestedInput {
  where: ProtocolDataScalarWhereInput!
  data: ProtocolDataUpdateManyDataInput!
}

input ProtocolDataUpdateWithoutNetworkDataInput {
  dataIdentifier: String
  dataValue: String
  networkProtocol: NetworkProtocolUpdateOneWithoutProtocolDatasInput
}

input ProtocolDataUpdateWithoutNetworkProtocolDataInput {
  dataIdentifier: String
  dataValue: String
  network: NetworkUpdateOneWithoutProtocolDatasInput
}

input ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput {
  where: ProtocolDataWhereUniqueInput!
  data: ProtocolDataUpdateWithoutNetworkDataInput!
}

input ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput {
  where: ProtocolDataWhereUniqueInput!
  data: ProtocolDataUpdateWithoutNetworkProtocolDataInput!
}

input ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput {
  where: ProtocolDataWhereUniqueInput!
  update: ProtocolDataUpdateWithoutNetworkDataInput!
  create: ProtocolDataCreateWithoutNetworkInput!
}

input ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput {
  where: ProtocolDataWhereUniqueInput!
  update: ProtocolDataUpdateWithoutNetworkProtocolDataInput!
  create: ProtocolDataCreateWithoutNetworkProtocolInput!
}

input ProtocolDataWhereInput {
  dataIdentifier: String
  dataIdentifier_not: String
  dataIdentifier_in: [String!]
  dataIdentifier_not_in: [String!]
  dataIdentifier_lt: String
  dataIdentifier_lte: String
  dataIdentifier_gt: String
  dataIdentifier_gte: String
  dataIdentifier_contains: String
  dataIdentifier_not_contains: String
  dataIdentifier_starts_with: String
  dataIdentifier_not_starts_with: String
  dataIdentifier_ends_with: String
  dataIdentifier_not_ends_with: String
  dataValue: String
  dataValue_not: String
  dataValue_in: [String!]
  dataValue_not_in: [String!]
  dataValue_lt: String
  dataValue_lte: String
  dataValue_gt: String
  dataValue_gte: String
  dataValue_contains: String
  dataValue_not_contains: String
  dataValue_starts_with: String
  dataValue_not_starts_with: String
  dataValue_ends_with: String
  dataValue_not_ends_with: String
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  network: NetworkWhereInput
  networkProtocol: NetworkProtocolWhereInput
  AND: [ProtocolDataWhereInput!]
  OR: [ProtocolDataWhereInput!]
  NOT: [ProtocolDataWhereInput!]
}

input ProtocolDataWhereUniqueInput {
  id: Int
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  applicationNetworkTypeLink(where: ApplicationNetworkTypeLinkWhereUniqueInput!): ApplicationNetworkTypeLink
  applicationNetworkTypeLinks(where: ApplicationNetworkTypeLinkWhereInput, orderBy: ApplicationNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApplicationNetworkTypeLink]!
  applicationNetworkTypeLinksConnection(where: ApplicationNetworkTypeLinkWhereInput, orderBy: ApplicationNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationNetworkTypeLinkConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  companyNetworkTypeLink(where: CompanyNetworkTypeLinkWhereUniqueInput!): CompanyNetworkTypeLink
  companyNetworkTypeLinks(where: CompanyNetworkTypeLinkWhereInput, orderBy: CompanyNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyNetworkTypeLink]!
  companyNetworkTypeLinksConnection(where: CompanyNetworkTypeLinkWhereInput, orderBy: CompanyNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyNetworkTypeLinkConnection!
  companyType(where: CompanyTypeWhereUniqueInput!): CompanyType
  companyTypes(where: CompanyTypeWhereInput, orderBy: CompanyTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyType]!
  companyTypesConnection(where: CompanyTypeWhereInput, orderBy: CompanyTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyTypeConnection!
  device(where: DeviceWhereUniqueInput!): Device
  devices(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Device]!
  devicesConnection(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceConnection!
  deviceNetworkTypeLink(where: DeviceNetworkTypeLinkWhereUniqueInput!): DeviceNetworkTypeLink
  deviceNetworkTypeLinks(where: DeviceNetworkTypeLinkWhereInput, orderBy: DeviceNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceNetworkTypeLink]!
  deviceNetworkTypeLinksConnection(where: DeviceNetworkTypeLinkWhereInput, orderBy: DeviceNetworkTypeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceNetworkTypeLinkConnection!
  deviceProfile(where: DeviceProfileWhereUniqueInput!): DeviceProfile
  deviceProfiles(where: DeviceProfileWhereInput, orderBy: DeviceProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceProfile]!
  deviceProfilesConnection(where: DeviceProfileWhereInput, orderBy: DeviceProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceProfileConnection!
  emailVerification(where: EmailVerificationWhereUniqueInput!): EmailVerification
  emailVerifications(where: EmailVerificationWhereInput, orderBy: EmailVerificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmailVerification]!
  emailVerificationsConnection(where: EmailVerificationWhereInput, orderBy: EmailVerificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailVerificationConnection!
  network(where: NetworkWhereUniqueInput!): Network
  networks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network]!
  networksConnection(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkConnection!
  networkProtocol(where: NetworkProtocolWhereUniqueInput!): NetworkProtocol
  networkProtocols(where: NetworkProtocolWhereInput, orderBy: NetworkProtocolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkProtocol]!
  networkProtocolsConnection(where: NetworkProtocolWhereInput, orderBy: NetworkProtocolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkProtocolConnection!
  networkProvider(where: NetworkProviderWhereUniqueInput!): NetworkProvider
  networkProviders(where: NetworkProviderWhereInput, orderBy: NetworkProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkProvider]!
  networkProvidersConnection(where: NetworkProviderWhereInput, orderBy: NetworkProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkProviderConnection!
  networkType(where: NetworkTypeWhereUniqueInput!): NetworkType
  networkTypes(where: NetworkTypeWhereInput, orderBy: NetworkTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkType]!
  networkTypesConnection(where: NetworkTypeWhereInput, orderBy: NetworkTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkTypeConnection!
  passwordPolicy(where: PasswordPolicyWhereUniqueInput!): PasswordPolicy
  passwordPolicies(where: PasswordPolicyWhereInput, orderBy: PasswordPolicyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordPolicy]!
  passwordPoliciesConnection(where: PasswordPolicyWhereInput, orderBy: PasswordPolicyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PasswordPolicyConnection!
  protocolData(where: ProtocolDataWhereUniqueInput!): ProtocolData
  protocolDatas(where: ProtocolDataWhereInput, orderBy: ProtocolDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProtocolData]!
  protocolDatasConnection(where: ProtocolDataWhereInput, orderBy: ProtocolDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProtocolDataConnection!
  reportingProtocol(where: ReportingProtocolWhereUniqueInput!): ReportingProtocol
  reportingProtocols(where: ReportingProtocolWhereInput, orderBy: ReportingProtocolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReportingProtocol]!
  reportingProtocolsConnection(where: ReportingProtocolWhereInput, orderBy: ReportingProtocolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportingProtocolConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole]!
  userRolesConnection(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRoleConnection!
  node(id: ID!): Node
}

type ReportingProtocol {
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  id: Int!
  name: String
  protocolHandler: String
}

type ReportingProtocolConnection {
  pageInfo: PageInfo!
  edges: [ReportingProtocolEdge]!
  aggregate: AggregateReportingProtocol!
}

input ReportingProtocolCreateInput {
  applications: ApplicationCreateManyWithoutReportingProtocolInput
  name: String
  protocolHandler: String
}

input ReportingProtocolCreateOneWithoutApplicationsInput {
  create: ReportingProtocolCreateWithoutApplicationsInput
  connect: ReportingProtocolWhereUniqueInput
}

input ReportingProtocolCreateWithoutApplicationsInput {
  name: String
  protocolHandler: String
}

type ReportingProtocolEdge {
  node: ReportingProtocol!
  cursor: String!
}

enum ReportingProtocolOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  protocolHandler_ASC
  protocolHandler_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReportingProtocolPreviousValues {
  id: Int!
  name: String
  protocolHandler: String
}

type ReportingProtocolSubscriptionPayload {
  mutation: MutationType!
  node: ReportingProtocol
  updatedFields: [String!]
  previousValues: ReportingProtocolPreviousValues
}

input ReportingProtocolSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReportingProtocolWhereInput
  AND: [ReportingProtocolSubscriptionWhereInput!]
  OR: [ReportingProtocolSubscriptionWhereInput!]
  NOT: [ReportingProtocolSubscriptionWhereInput!]
}

input ReportingProtocolUpdateInput {
  applications: ApplicationUpdateManyWithoutReportingProtocolInput
  name: String
  protocolHandler: String
}

input ReportingProtocolUpdateManyMutationInput {
  name: String
  protocolHandler: String
}

input ReportingProtocolUpdateOneWithoutApplicationsInput {
  create: ReportingProtocolCreateWithoutApplicationsInput
  update: ReportingProtocolUpdateWithoutApplicationsDataInput
  upsert: ReportingProtocolUpsertWithoutApplicationsInput
  delete: Boolean
  disconnect: Boolean
  connect: ReportingProtocolWhereUniqueInput
}

input ReportingProtocolUpdateWithoutApplicationsDataInput {
  name: String
  protocolHandler: String
}

input ReportingProtocolUpsertWithoutApplicationsInput {
  update: ReportingProtocolUpdateWithoutApplicationsDataInput!
  create: ReportingProtocolCreateWithoutApplicationsInput!
}

input ReportingProtocolWhereInput {
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  protocolHandler: String
  protocolHandler_not: String
  protocolHandler_in: [String!]
  protocolHandler_not_in: [String!]
  protocolHandler_lt: String
  protocolHandler_lte: String
  protocolHandler_gt: String
  protocolHandler_gte: String
  protocolHandler_contains: String
  protocolHandler_not_contains: String
  protocolHandler_starts_with: String
  protocolHandler_not_starts_with: String
  protocolHandler_ends_with: String
  protocolHandler_not_ends_with: String
  AND: [ReportingProtocolWhereInput!]
  OR: [ReportingProtocolWhereInput!]
  NOT: [ReportingProtocolWhereInput!]
}

input ReportingProtocolWhereUniqueInput {
  id: Int
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  applicationNetworkTypeLink(where: ApplicationNetworkTypeLinkSubscriptionWhereInput): ApplicationNetworkTypeLinkSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  companyNetworkTypeLink(where: CompanyNetworkTypeLinkSubscriptionWhereInput): CompanyNetworkTypeLinkSubscriptionPayload
  companyType(where: CompanyTypeSubscriptionWhereInput): CompanyTypeSubscriptionPayload
  device(where: DeviceSubscriptionWhereInput): DeviceSubscriptionPayload
  deviceNetworkTypeLink(where: DeviceNetworkTypeLinkSubscriptionWhereInput): DeviceNetworkTypeLinkSubscriptionPayload
  deviceProfile(where: DeviceProfileSubscriptionWhereInput): DeviceProfileSubscriptionPayload
  emailVerification(where: EmailVerificationSubscriptionWhereInput): EmailVerificationSubscriptionPayload
  network(where: NetworkSubscriptionWhereInput): NetworkSubscriptionPayload
  networkProtocol(where: NetworkProtocolSubscriptionWhereInput): NetworkProtocolSubscriptionPayload
  networkProvider(where: NetworkProviderSubscriptionWhereInput): NetworkProviderSubscriptionPayload
  networkType(where: NetworkTypeSubscriptionWhereInput): NetworkTypeSubscriptionPayload
  passwordPolicy(where: PasswordPolicySubscriptionWhereInput): PasswordPolicySubscriptionPayload
  protocolData(where: ProtocolDataSubscriptionWhereInput): ProtocolDataSubscriptionPayload
  reportingProtocol(where: ReportingProtocolSubscriptionWhereInput): ReportingProtocolSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userRole(where: UserRoleSubscriptionWhereInput): UserRoleSubscriptionPayload
}

type User {
  company: Company
  email: String
  emailVerifications(where: EmailVerificationWhereInput, orderBy: EmailVerificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmailVerification!]
  emailVerified: Boolean
  id: Int!
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRole
  username: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  company: CompanyCreateOneWithoutUsersInput
  email: String
  emailVerifications: EmailVerificationCreateManyWithoutUserInput
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRoleCreateOneWithoutUsersInput
  username: String
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEmailVerificationsInput {
  create: UserCreateWithoutEmailVerificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompanyInput {
  email: String
  emailVerifications: EmailVerificationCreateManyWithoutUserInput
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRoleCreateOneWithoutUsersInput
  username: String
}

input UserCreateWithoutEmailVerificationsInput {
  company: CompanyCreateOneWithoutUsersInput
  email: String
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRoleCreateOneWithoutUsersInput
  username: String
}

input UserCreateWithoutRoleInput {
  company: CompanyCreateOneWithoutUsersInput
  email: String
  emailVerifications: EmailVerificationCreateManyWithoutUserInput
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  username: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  email_ASC
  email_DESC
  emailVerified_ASC
  emailVerified_DESC
  id_ASC
  id_DESC
  lastVerifiedEmail_ASC
  lastVerifiedEmail_DESC
  passwordHash_ASC
  passwordHash_DESC
  username_ASC
  username_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  email: String
  emailVerified: Boolean
  id: Int!
  lastVerifiedEmail: String
  passwordHash: String
  username: String
}

type UserRole {
  id: Int!
  name: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type UserRoleConnection {
  pageInfo: PageInfo!
  edges: [UserRoleEdge]!
  aggregate: AggregateUserRole!
}

input UserRoleCreateInput {
  name: String
  users: UserCreateManyWithoutRoleInput
}

input UserRoleCreateOneWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput
  connect: UserRoleWhereUniqueInput
}

input UserRoleCreateWithoutUsersInput {
  name: String
}

type UserRoleEdge {
  node: UserRole!
  cursor: String!
}

enum UserRoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserRolePreviousValues {
  id: Int!
  name: String
}

type UserRoleSubscriptionPayload {
  mutation: MutationType!
  node: UserRole
  updatedFields: [String!]
  previousValues: UserRolePreviousValues
}

input UserRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserRoleWhereInput
  AND: [UserRoleSubscriptionWhereInput!]
  OR: [UserRoleSubscriptionWhereInput!]
  NOT: [UserRoleSubscriptionWhereInput!]
}

input UserRoleUpdateInput {
  name: String
  users: UserUpdateManyWithoutRoleInput
}

input UserRoleUpdateManyMutationInput {
  name: String
}

input UserRoleUpdateOneWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput
  update: UserRoleUpdateWithoutUsersDataInput
  upsert: UserRoleUpsertWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  connect: UserRoleWhereUniqueInput
}

input UserRoleUpdateWithoutUsersDataInput {
  name: String
}

input UserRoleUpsertWithoutUsersInput {
  update: UserRoleUpdateWithoutUsersDataInput!
  create: UserRoleCreateWithoutUsersInput!
}

input UserRoleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  NOT: [UserRoleWhereInput!]
}

input UserRoleWhereUniqueInput {
  id: Int
}

input UserScalarWhereInput {
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  emailVerified: Boolean
  emailVerified_not: Boolean
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  lastVerifiedEmail: String
  lastVerifiedEmail_not: String
  lastVerifiedEmail_in: [String!]
  lastVerifiedEmail_not_in: [String!]
  lastVerifiedEmail_lt: String
  lastVerifiedEmail_lte: String
  lastVerifiedEmail_gt: String
  lastVerifiedEmail_gte: String
  lastVerifiedEmail_contains: String
  lastVerifiedEmail_not_contains: String
  lastVerifiedEmail_starts_with: String
  lastVerifiedEmail_not_starts_with: String
  lastVerifiedEmail_ends_with: String
  lastVerifiedEmail_not_ends_with: String
  passwordHash: String
  passwordHash_not: String
  passwordHash_in: [String!]
  passwordHash_not_in: [String!]
  passwordHash_lt: String
  passwordHash_lte: String
  passwordHash_gt: String
  passwordHash_gte: String
  passwordHash_contains: String
  passwordHash_not_contains: String
  passwordHash_starts_with: String
  passwordHash_not_starts_with: String
  passwordHash_ends_with: String
  passwordHash_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  company: CompanyUpdateOneWithoutUsersInput
  email: String
  emailVerifications: EmailVerificationUpdateManyWithoutUserInput
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRoleUpdateOneWithoutUsersInput
  username: String
}

input UserUpdateManyDataInput {
  email: String
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  username: String
}

input UserUpdateManyMutationInput {
  email: String
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  username: String
}

input UserUpdateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoleInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoleInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutEmailVerificationsInput {
  create: UserCreateWithoutEmailVerificationsInput
  update: UserUpdateWithoutEmailVerificationsDataInput
  upsert: UserUpsertWithoutEmailVerificationsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCompanyDataInput {
  email: String
  emailVerifications: EmailVerificationUpdateManyWithoutUserInput
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRoleUpdateOneWithoutUsersInput
  username: String
}

input UserUpdateWithoutEmailVerificationsDataInput {
  company: CompanyUpdateOneWithoutUsersInput
  email: String
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  role: UserRoleUpdateOneWithoutUsersInput
  username: String
}

input UserUpdateWithoutRoleDataInput {
  company: CompanyUpdateOneWithoutUsersInput
  email: String
  emailVerifications: EmailVerificationUpdateManyWithoutUserInput
  emailVerified: Boolean
  lastVerifiedEmail: String
  passwordHash: String
  username: String
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoleDataInput!
}

input UserUpsertWithoutEmailVerificationsInput {
  update: UserUpdateWithoutEmailVerificationsDataInput!
  create: UserCreateWithoutEmailVerificationsInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpsertWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoleDataInput!
  create: UserCreateWithoutRoleInput!
}

input UserWhereInput {
  company: CompanyWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  emailVerifications_every: EmailVerificationWhereInput
  emailVerifications_some: EmailVerificationWhereInput
  emailVerifications_none: EmailVerificationWhereInput
  emailVerified: Boolean
  emailVerified_not: Boolean
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  lastVerifiedEmail: String
  lastVerifiedEmail_not: String
  lastVerifiedEmail_in: [String!]
  lastVerifiedEmail_not_in: [String!]
  lastVerifiedEmail_lt: String
  lastVerifiedEmail_lte: String
  lastVerifiedEmail_gt: String
  lastVerifiedEmail_gte: String
  lastVerifiedEmail_contains: String
  lastVerifiedEmail_not_contains: String
  lastVerifiedEmail_starts_with: String
  lastVerifiedEmail_not_starts_with: String
  lastVerifiedEmail_ends_with: String
  lastVerifiedEmail_not_ends_with: String
  passwordHash: String
  passwordHash_not: String
  passwordHash_in: [String!]
  passwordHash_not_in: [String!]
  passwordHash_lt: String
  passwordHash_lte: String
  passwordHash_gt: String
  passwordHash_gte: String
  passwordHash_contains: String
  passwordHash_not_contains: String
  passwordHash_starts_with: String
  passwordHash_not_starts_with: String
  passwordHash_ends_with: String
  passwordHash_not_ends_with: String
  role: UserRoleWhereInput
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
`
      }
    