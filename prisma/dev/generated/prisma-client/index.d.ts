// Code generated by Prisma (prisma@1.25.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  applicationNetworkTypeLinks: (
    where?: ApplicationNetworkTypeLinksWhereInput
  ) => Promise<boolean>;
  applications: (where?: ApplicationsWhereInput) => Promise<boolean>;
  companies: (where?: CompaniesWhereInput) => Promise<boolean>;
  companyNetworkTypeLinks: (
    where?: CompanyNetworkTypeLinksWhereInput
  ) => Promise<boolean>;
  companyTypes: (where?: CompanyTypesWhereInput) => Promise<boolean>;
  deviceNetworkTypeLinks: (
    where?: DeviceNetworkTypeLinksWhereInput
  ) => Promise<boolean>;
  deviceProfiles: (where?: DeviceProfilesWhereInput) => Promise<boolean>;
  devices: (where?: DevicesWhereInput) => Promise<boolean>;
  emailVerifications: (
    where?: EmailVerificationsWhereInput
  ) => Promise<boolean>;
  networkProtocols: (where?: NetworkProtocolsWhereInput) => Promise<boolean>;
  networkProviders: (where?: NetworkProvidersWhereInput) => Promise<boolean>;
  networkTypes: (where?: NetworkTypesWhereInput) => Promise<boolean>;
  networks: (where?: NetworksWhereInput) => Promise<boolean>;
  passwordPolicies: (where?: PasswordPoliciesWhereInput) => Promise<boolean>;
  protocolData: (where?: ProtocolDataWhereInput) => Promise<boolean>;
  reportingProtocols: (
    where?: ReportingProtocolsWhereInput
  ) => Promise<boolean>;
  userRoles: (where?: UserRolesWhereInput) => Promise<boolean>;
  users: (where?: UsersWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  applicationNetworkTypeLinks: (
    where: ApplicationNetworkTypeLinksWhereUniqueInput
  ) => ApplicationNetworkTypeLinksPromise;
  applicationNetworkTypeLinkses: (args?: {
    where?: ApplicationNetworkTypeLinksWhereInput;
    orderBy?: ApplicationNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ApplicationNetworkTypeLinks>;
  applicationNetworkTypeLinksesConnection: (args?: {
    where?: ApplicationNetworkTypeLinksWhereInput;
    orderBy?: ApplicationNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicationNetworkTypeLinksConnectionPromise;
  applications: (where: ApplicationsWhereUniqueInput) => ApplicationsPromise;
  applicationses: (args?: {
    where?: ApplicationsWhereInput;
    orderBy?: ApplicationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Applications>;
  applicationsesConnection: (args?: {
    where?: ApplicationsWhereInput;
    orderBy?: ApplicationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicationsConnectionPromise;
  companies: (where: CompaniesWhereUniqueInput) => CompaniesPromise;
  companieses: (args?: {
    where?: CompaniesWhereInput;
    orderBy?: CompaniesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Companies>;
  companiesesConnection: (args?: {
    where?: CompaniesWhereInput;
    orderBy?: CompaniesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompaniesConnectionPromise;
  companyNetworkTypeLinks: (
    where: CompanyNetworkTypeLinksWhereUniqueInput
  ) => CompanyNetworkTypeLinksPromise;
  companyNetworkTypeLinkses: (args?: {
    where?: CompanyNetworkTypeLinksWhereInput;
    orderBy?: CompanyNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CompanyNetworkTypeLinks>;
  companyNetworkTypeLinksesConnection: (args?: {
    where?: CompanyNetworkTypeLinksWhereInput;
    orderBy?: CompanyNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyNetworkTypeLinksConnectionPromise;
  companyTypes: (where: CompanyTypesWhereUniqueInput) => CompanyTypesPromise;
  companyTypeses: (args?: {
    where?: CompanyTypesWhereInput;
    orderBy?: CompanyTypesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CompanyTypes>;
  companyTypesesConnection: (args?: {
    where?: CompanyTypesWhereInput;
    orderBy?: CompanyTypesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyTypesConnectionPromise;
  deviceNetworkTypeLinks: (
    where: DeviceNetworkTypeLinksWhereUniqueInput
  ) => DeviceNetworkTypeLinksPromise;
  deviceNetworkTypeLinkses: (args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DeviceNetworkTypeLinks>;
  deviceNetworkTypeLinksesConnection: (args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeviceNetworkTypeLinksConnectionPromise;
  deviceProfiles: (
    where: DeviceProfilesWhereUniqueInput
  ) => DeviceProfilesPromise;
  deviceProfileses: (args?: {
    where?: DeviceProfilesWhereInput;
    orderBy?: DeviceProfilesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DeviceProfiles>;
  deviceProfilesesConnection: (args?: {
    where?: DeviceProfilesWhereInput;
    orderBy?: DeviceProfilesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeviceProfilesConnectionPromise;
  devices: (where: DevicesWhereUniqueInput) => DevicesPromise;
  deviceses: (args?: {
    where?: DevicesWhereInput;
    orderBy?: DevicesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Devices>;
  devicesesConnection: (args?: {
    where?: DevicesWhereInput;
    orderBy?: DevicesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DevicesConnectionPromise;
  emailVerifications: (
    where: EmailVerificationsWhereUniqueInput
  ) => EmailVerificationsPromise;
  emailVerificationses: (args?: {
    where?: EmailVerificationsWhereInput;
    orderBy?: EmailVerificationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EmailVerifications>;
  emailVerificationsesConnection: (args?: {
    where?: EmailVerificationsWhereInput;
    orderBy?: EmailVerificationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailVerificationsConnectionPromise;
  networkProtocols: (
    where: NetworkProtocolsWhereUniqueInput
  ) => NetworkProtocolsPromise;
  networkProtocolses: (args?: {
    where?: NetworkProtocolsWhereInput;
    orderBy?: NetworkProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NetworkProtocols>;
  networkProtocolsesConnection: (args?: {
    where?: NetworkProtocolsWhereInput;
    orderBy?: NetworkProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NetworkProtocolsConnectionPromise;
  networkProviders: (
    where: NetworkProvidersWhereUniqueInput
  ) => NetworkProvidersPromise;
  networkProviderses: (args?: {
    where?: NetworkProvidersWhereInput;
    orderBy?: NetworkProvidersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NetworkProviders>;
  networkProvidersesConnection: (args?: {
    where?: NetworkProvidersWhereInput;
    orderBy?: NetworkProvidersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NetworkProvidersConnectionPromise;
  networkTypes: (where: NetworkTypesWhereUniqueInput) => NetworkTypesPromise;
  networkTypeses: (args?: {
    where?: NetworkTypesWhereInput;
    orderBy?: NetworkTypesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NetworkTypes>;
  networkTypesesConnection: (args?: {
    where?: NetworkTypesWhereInput;
    orderBy?: NetworkTypesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NetworkTypesConnectionPromise;
  networks: (where: NetworksWhereUniqueInput) => NetworksPromise;
  networkses: (args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Networks>;
  networksesConnection: (args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NetworksConnectionPromise;
  passwordPolicies: (
    where: PasswordPoliciesWhereUniqueInput
  ) => PasswordPoliciesPromise;
  passwordPolicieses: (args?: {
    where?: PasswordPoliciesWhereInput;
    orderBy?: PasswordPoliciesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PasswordPolicies>;
  passwordPoliciesesConnection: (args?: {
    where?: PasswordPoliciesWhereInput;
    orderBy?: PasswordPoliciesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PasswordPoliciesConnectionPromise;
  protocolData: (where: ProtocolDataWhereUniqueInput) => ProtocolDataPromise;
  protocolDatas: (args?: {
    where?: ProtocolDataWhereInput;
    orderBy?: ProtocolDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProtocolData>;
  protocolDatasConnection: (args?: {
    where?: ProtocolDataWhereInput;
    orderBy?: ProtocolDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProtocolDataConnectionPromise;
  reportingProtocols: (
    where: ReportingProtocolsWhereUniqueInput
  ) => ReportingProtocolsPromise;
  reportingProtocolses: (args?: {
    where?: ReportingProtocolsWhereInput;
    orderBy?: ReportingProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ReportingProtocols>;
  reportingProtocolsesConnection: (args?: {
    where?: ReportingProtocolsWhereInput;
    orderBy?: ReportingProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportingProtocolsConnectionPromise;
  userRoles: (where: UserRolesWhereUniqueInput) => UserRolesPromise;
  userRoleses: (args?: {
    where?: UserRolesWhereInput;
    orderBy?: UserRolesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserRoles>;
  userRolesesConnection: (args?: {
    where?: UserRolesWhereInput;
    orderBy?: UserRolesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserRolesConnectionPromise;
  users: (where: UsersWhereUniqueInput) => UsersPromise;
  userses: (args?: {
    where?: UsersWhereInput;
    orderBy?: UsersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Users>;
  usersesConnection: (args?: {
    where?: UsersWhereInput;
    orderBy?: UsersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UsersConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApplicationNetworkTypeLinks: (
    data: ApplicationNetworkTypeLinksCreateInput
  ) => ApplicationNetworkTypeLinksPromise;
  updateApplicationNetworkTypeLinks: (args: {
    data: ApplicationNetworkTypeLinksUpdateInput;
    where: ApplicationNetworkTypeLinksWhereUniqueInput;
  }) => ApplicationNetworkTypeLinksPromise;
  updateManyApplicationNetworkTypeLinkses: (args: {
    data: ApplicationNetworkTypeLinksUpdateManyMutationInput;
    where?: ApplicationNetworkTypeLinksWhereInput;
  }) => BatchPayloadPromise;
  upsertApplicationNetworkTypeLinks: (args: {
    where: ApplicationNetworkTypeLinksWhereUniqueInput;
    create: ApplicationNetworkTypeLinksCreateInput;
    update: ApplicationNetworkTypeLinksUpdateInput;
  }) => ApplicationNetworkTypeLinksPromise;
  deleteApplicationNetworkTypeLinks: (
    where: ApplicationNetworkTypeLinksWhereUniqueInput
  ) => ApplicationNetworkTypeLinksPromise;
  deleteManyApplicationNetworkTypeLinkses: (
    where?: ApplicationNetworkTypeLinksWhereInput
  ) => BatchPayloadPromise;
  createApplications: (data: ApplicationsCreateInput) => ApplicationsPromise;
  updateApplications: (args: {
    data: ApplicationsUpdateInput;
    where: ApplicationsWhereUniqueInput;
  }) => ApplicationsPromise;
  updateManyApplicationses: (args: {
    data: ApplicationsUpdateManyMutationInput;
    where?: ApplicationsWhereInput;
  }) => BatchPayloadPromise;
  upsertApplications: (args: {
    where: ApplicationsWhereUniqueInput;
    create: ApplicationsCreateInput;
    update: ApplicationsUpdateInput;
  }) => ApplicationsPromise;
  deleteApplications: (
    where: ApplicationsWhereUniqueInput
  ) => ApplicationsPromise;
  deleteManyApplicationses: (
    where?: ApplicationsWhereInput
  ) => BatchPayloadPromise;
  createCompanies: (data: CompaniesCreateInput) => CompaniesPromise;
  updateCompanies: (args: {
    data: CompaniesUpdateInput;
    where: CompaniesWhereUniqueInput;
  }) => CompaniesPromise;
  updateManyCompanieses: (args: {
    data: CompaniesUpdateManyMutationInput;
    where?: CompaniesWhereInput;
  }) => BatchPayloadPromise;
  upsertCompanies: (args: {
    where: CompaniesWhereUniqueInput;
    create: CompaniesCreateInput;
    update: CompaniesUpdateInput;
  }) => CompaniesPromise;
  deleteCompanies: (where: CompaniesWhereUniqueInput) => CompaniesPromise;
  deleteManyCompanieses: (where?: CompaniesWhereInput) => BatchPayloadPromise;
  createCompanyNetworkTypeLinks: (
    data: CompanyNetworkTypeLinksCreateInput
  ) => CompanyNetworkTypeLinksPromise;
  updateCompanyNetworkTypeLinks: (args: {
    data: CompanyNetworkTypeLinksUpdateInput;
    where: CompanyNetworkTypeLinksWhereUniqueInput;
  }) => CompanyNetworkTypeLinksPromise;
  updateManyCompanyNetworkTypeLinkses: (args: {
    data: CompanyNetworkTypeLinksUpdateManyMutationInput;
    where?: CompanyNetworkTypeLinksWhereInput;
  }) => BatchPayloadPromise;
  upsertCompanyNetworkTypeLinks: (args: {
    where: CompanyNetworkTypeLinksWhereUniqueInput;
    create: CompanyNetworkTypeLinksCreateInput;
    update: CompanyNetworkTypeLinksUpdateInput;
  }) => CompanyNetworkTypeLinksPromise;
  deleteCompanyNetworkTypeLinks: (
    where: CompanyNetworkTypeLinksWhereUniqueInput
  ) => CompanyNetworkTypeLinksPromise;
  deleteManyCompanyNetworkTypeLinkses: (
    where?: CompanyNetworkTypeLinksWhereInput
  ) => BatchPayloadPromise;
  createCompanyTypes: (data: CompanyTypesCreateInput) => CompanyTypesPromise;
  updateCompanyTypes: (args: {
    data: CompanyTypesUpdateInput;
    where: CompanyTypesWhereUniqueInput;
  }) => CompanyTypesPromise;
  updateManyCompanyTypeses: (args: {
    data: CompanyTypesUpdateManyMutationInput;
    where?: CompanyTypesWhereInput;
  }) => BatchPayloadPromise;
  upsertCompanyTypes: (args: {
    where: CompanyTypesWhereUniqueInput;
    create: CompanyTypesCreateInput;
    update: CompanyTypesUpdateInput;
  }) => CompanyTypesPromise;
  deleteCompanyTypes: (
    where: CompanyTypesWhereUniqueInput
  ) => CompanyTypesPromise;
  deleteManyCompanyTypeses: (
    where?: CompanyTypesWhereInput
  ) => BatchPayloadPromise;
  createDeviceNetworkTypeLinks: (
    data: DeviceNetworkTypeLinksCreateInput
  ) => DeviceNetworkTypeLinksPromise;
  updateDeviceNetworkTypeLinks: (args: {
    data: DeviceNetworkTypeLinksUpdateInput;
    where: DeviceNetworkTypeLinksWhereUniqueInput;
  }) => DeviceNetworkTypeLinksPromise;
  updateManyDeviceNetworkTypeLinkses: (args: {
    data: DeviceNetworkTypeLinksUpdateManyMutationInput;
    where?: DeviceNetworkTypeLinksWhereInput;
  }) => BatchPayloadPromise;
  upsertDeviceNetworkTypeLinks: (args: {
    where: DeviceNetworkTypeLinksWhereUniqueInput;
    create: DeviceNetworkTypeLinksCreateInput;
    update: DeviceNetworkTypeLinksUpdateInput;
  }) => DeviceNetworkTypeLinksPromise;
  deleteDeviceNetworkTypeLinks: (
    where: DeviceNetworkTypeLinksWhereUniqueInput
  ) => DeviceNetworkTypeLinksPromise;
  deleteManyDeviceNetworkTypeLinkses: (
    where?: DeviceNetworkTypeLinksWhereInput
  ) => BatchPayloadPromise;
  createDeviceProfiles: (
    data: DeviceProfilesCreateInput
  ) => DeviceProfilesPromise;
  updateDeviceProfiles: (args: {
    data: DeviceProfilesUpdateInput;
    where: DeviceProfilesWhereUniqueInput;
  }) => DeviceProfilesPromise;
  updateManyDeviceProfileses: (args: {
    data: DeviceProfilesUpdateManyMutationInput;
    where?: DeviceProfilesWhereInput;
  }) => BatchPayloadPromise;
  upsertDeviceProfiles: (args: {
    where: DeviceProfilesWhereUniqueInput;
    create: DeviceProfilesCreateInput;
    update: DeviceProfilesUpdateInput;
  }) => DeviceProfilesPromise;
  deleteDeviceProfiles: (
    where: DeviceProfilesWhereUniqueInput
  ) => DeviceProfilesPromise;
  deleteManyDeviceProfileses: (
    where?: DeviceProfilesWhereInput
  ) => BatchPayloadPromise;
  createDevices: (data: DevicesCreateInput) => DevicesPromise;
  updateDevices: (args: {
    data: DevicesUpdateInput;
    where: DevicesWhereUniqueInput;
  }) => DevicesPromise;
  updateManyDeviceses: (args: {
    data: DevicesUpdateManyMutationInput;
    where?: DevicesWhereInput;
  }) => BatchPayloadPromise;
  upsertDevices: (args: {
    where: DevicesWhereUniqueInput;
    create: DevicesCreateInput;
    update: DevicesUpdateInput;
  }) => DevicesPromise;
  deleteDevices: (where: DevicesWhereUniqueInput) => DevicesPromise;
  deleteManyDeviceses: (where?: DevicesWhereInput) => BatchPayloadPromise;
  createEmailVerifications: (
    data: EmailVerificationsCreateInput
  ) => EmailVerificationsPromise;
  updateEmailVerifications: (args: {
    data: EmailVerificationsUpdateInput;
    where: EmailVerificationsWhereUniqueInput;
  }) => EmailVerificationsPromise;
  updateManyEmailVerificationses: (args: {
    data: EmailVerificationsUpdateManyMutationInput;
    where?: EmailVerificationsWhereInput;
  }) => BatchPayloadPromise;
  upsertEmailVerifications: (args: {
    where: EmailVerificationsWhereUniqueInput;
    create: EmailVerificationsCreateInput;
    update: EmailVerificationsUpdateInput;
  }) => EmailVerificationsPromise;
  deleteEmailVerifications: (
    where: EmailVerificationsWhereUniqueInput
  ) => EmailVerificationsPromise;
  deleteManyEmailVerificationses: (
    where?: EmailVerificationsWhereInput
  ) => BatchPayloadPromise;
  createNetworkProtocols: (
    data: NetworkProtocolsCreateInput
  ) => NetworkProtocolsPromise;
  updateNetworkProtocols: (args: {
    data: NetworkProtocolsUpdateInput;
    where: NetworkProtocolsWhereUniqueInput;
  }) => NetworkProtocolsPromise;
  updateManyNetworkProtocolses: (args: {
    data: NetworkProtocolsUpdateManyMutationInput;
    where?: NetworkProtocolsWhereInput;
  }) => BatchPayloadPromise;
  upsertNetworkProtocols: (args: {
    where: NetworkProtocolsWhereUniqueInput;
    create: NetworkProtocolsCreateInput;
    update: NetworkProtocolsUpdateInput;
  }) => NetworkProtocolsPromise;
  deleteNetworkProtocols: (
    where: NetworkProtocolsWhereUniqueInput
  ) => NetworkProtocolsPromise;
  deleteManyNetworkProtocolses: (
    where?: NetworkProtocolsWhereInput
  ) => BatchPayloadPromise;
  createNetworkProviders: (
    data: NetworkProvidersCreateInput
  ) => NetworkProvidersPromise;
  updateNetworkProviders: (args: {
    data: NetworkProvidersUpdateInput;
    where: NetworkProvidersWhereUniqueInput;
  }) => NetworkProvidersPromise;
  updateManyNetworkProviderses: (args: {
    data: NetworkProvidersUpdateManyMutationInput;
    where?: NetworkProvidersWhereInput;
  }) => BatchPayloadPromise;
  upsertNetworkProviders: (args: {
    where: NetworkProvidersWhereUniqueInput;
    create: NetworkProvidersCreateInput;
    update: NetworkProvidersUpdateInput;
  }) => NetworkProvidersPromise;
  deleteNetworkProviders: (
    where: NetworkProvidersWhereUniqueInput
  ) => NetworkProvidersPromise;
  deleteManyNetworkProviderses: (
    where?: NetworkProvidersWhereInput
  ) => BatchPayloadPromise;
  createNetworkTypes: (data: NetworkTypesCreateInput) => NetworkTypesPromise;
  updateNetworkTypes: (args: {
    data: NetworkTypesUpdateInput;
    where: NetworkTypesWhereUniqueInput;
  }) => NetworkTypesPromise;
  updateManyNetworkTypeses: (args: {
    data: NetworkTypesUpdateManyMutationInput;
    where?: NetworkTypesWhereInput;
  }) => BatchPayloadPromise;
  upsertNetworkTypes: (args: {
    where: NetworkTypesWhereUniqueInput;
    create: NetworkTypesCreateInput;
    update: NetworkTypesUpdateInput;
  }) => NetworkTypesPromise;
  deleteNetworkTypes: (
    where: NetworkTypesWhereUniqueInput
  ) => NetworkTypesPromise;
  deleteManyNetworkTypeses: (
    where?: NetworkTypesWhereInput
  ) => BatchPayloadPromise;
  createNetworks: (data: NetworksCreateInput) => NetworksPromise;
  updateNetworks: (args: {
    data: NetworksUpdateInput;
    where: NetworksWhereUniqueInput;
  }) => NetworksPromise;
  updateManyNetworkses: (args: {
    data: NetworksUpdateManyMutationInput;
    where?: NetworksWhereInput;
  }) => BatchPayloadPromise;
  upsertNetworks: (args: {
    where: NetworksWhereUniqueInput;
    create: NetworksCreateInput;
    update: NetworksUpdateInput;
  }) => NetworksPromise;
  deleteNetworks: (where: NetworksWhereUniqueInput) => NetworksPromise;
  deleteManyNetworkses: (where?: NetworksWhereInput) => BatchPayloadPromise;
  createPasswordPolicies: (
    data: PasswordPoliciesCreateInput
  ) => PasswordPoliciesPromise;
  updatePasswordPolicies: (args: {
    data: PasswordPoliciesUpdateInput;
    where: PasswordPoliciesWhereUniqueInput;
  }) => PasswordPoliciesPromise;
  updateManyPasswordPolicieses: (args: {
    data: PasswordPoliciesUpdateManyMutationInput;
    where?: PasswordPoliciesWhereInput;
  }) => BatchPayloadPromise;
  upsertPasswordPolicies: (args: {
    where: PasswordPoliciesWhereUniqueInput;
    create: PasswordPoliciesCreateInput;
    update: PasswordPoliciesUpdateInput;
  }) => PasswordPoliciesPromise;
  deletePasswordPolicies: (
    where: PasswordPoliciesWhereUniqueInput
  ) => PasswordPoliciesPromise;
  deleteManyPasswordPolicieses: (
    where?: PasswordPoliciesWhereInput
  ) => BatchPayloadPromise;
  createProtocolData: (data: ProtocolDataCreateInput) => ProtocolDataPromise;
  updateProtocolData: (args: {
    data: ProtocolDataUpdateInput;
    where: ProtocolDataWhereUniqueInput;
  }) => ProtocolDataPromise;
  updateManyProtocolDatas: (args: {
    data: ProtocolDataUpdateManyMutationInput;
    where?: ProtocolDataWhereInput;
  }) => BatchPayloadPromise;
  upsertProtocolData: (args: {
    where: ProtocolDataWhereUniqueInput;
    create: ProtocolDataCreateInput;
    update: ProtocolDataUpdateInput;
  }) => ProtocolDataPromise;
  deleteProtocolData: (
    where: ProtocolDataWhereUniqueInput
  ) => ProtocolDataPromise;
  deleteManyProtocolDatas: (
    where?: ProtocolDataWhereInput
  ) => BatchPayloadPromise;
  createReportingProtocols: (
    data: ReportingProtocolsCreateInput
  ) => ReportingProtocolsPromise;
  updateReportingProtocols: (args: {
    data: ReportingProtocolsUpdateInput;
    where: ReportingProtocolsWhereUniqueInput;
  }) => ReportingProtocolsPromise;
  updateManyReportingProtocolses: (args: {
    data: ReportingProtocolsUpdateManyMutationInput;
    where?: ReportingProtocolsWhereInput;
  }) => BatchPayloadPromise;
  upsertReportingProtocols: (args: {
    where: ReportingProtocolsWhereUniqueInput;
    create: ReportingProtocolsCreateInput;
    update: ReportingProtocolsUpdateInput;
  }) => ReportingProtocolsPromise;
  deleteReportingProtocols: (
    where: ReportingProtocolsWhereUniqueInput
  ) => ReportingProtocolsPromise;
  deleteManyReportingProtocolses: (
    where?: ReportingProtocolsWhereInput
  ) => BatchPayloadPromise;
  createUserRoles: (data: UserRolesCreateInput) => UserRolesPromise;
  updateUserRoles: (args: {
    data: UserRolesUpdateInput;
    where: UserRolesWhereUniqueInput;
  }) => UserRolesPromise;
  updateManyUserRoleses: (args: {
    data: UserRolesUpdateManyMutationInput;
    where?: UserRolesWhereInput;
  }) => BatchPayloadPromise;
  upsertUserRoles: (args: {
    where: UserRolesWhereUniqueInput;
    create: UserRolesCreateInput;
    update: UserRolesUpdateInput;
  }) => UserRolesPromise;
  deleteUserRoles: (where: UserRolesWhereUniqueInput) => UserRolesPromise;
  deleteManyUserRoleses: (where?: UserRolesWhereInput) => BatchPayloadPromise;
  createUsers: (data: UsersCreateInput) => UsersPromise;
  updateUsers: (args: {
    data: UsersUpdateInput;
    where: UsersWhereUniqueInput;
  }) => UsersPromise;
  updateManyUserses: (args: {
    data: UsersUpdateManyMutationInput;
    where?: UsersWhereInput;
  }) => BatchPayloadPromise;
  upsertUsers: (args: {
    where: UsersWhereUniqueInput;
    create: UsersCreateInput;
    update: UsersUpdateInput;
  }) => UsersPromise;
  deleteUsers: (where: UsersWhereUniqueInput) => UsersPromise;
  deleteManyUserses: (where?: UsersWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  applicationNetworkTypeLinks: (
    where?: ApplicationNetworkTypeLinksSubscriptionWhereInput
  ) => ApplicationNetworkTypeLinksSubscriptionPayloadSubscription;
  applications: (
    where?: ApplicationsSubscriptionWhereInput
  ) => ApplicationsSubscriptionPayloadSubscription;
  companies: (
    where?: CompaniesSubscriptionWhereInput
  ) => CompaniesSubscriptionPayloadSubscription;
  companyNetworkTypeLinks: (
    where?: CompanyNetworkTypeLinksSubscriptionWhereInput
  ) => CompanyNetworkTypeLinksSubscriptionPayloadSubscription;
  companyTypes: (
    where?: CompanyTypesSubscriptionWhereInput
  ) => CompanyTypesSubscriptionPayloadSubscription;
  deviceNetworkTypeLinks: (
    where?: DeviceNetworkTypeLinksSubscriptionWhereInput
  ) => DeviceNetworkTypeLinksSubscriptionPayloadSubscription;
  deviceProfiles: (
    where?: DeviceProfilesSubscriptionWhereInput
  ) => DeviceProfilesSubscriptionPayloadSubscription;
  devices: (
    where?: DevicesSubscriptionWhereInput
  ) => DevicesSubscriptionPayloadSubscription;
  emailVerifications: (
    where?: EmailVerificationsSubscriptionWhereInput
  ) => EmailVerificationsSubscriptionPayloadSubscription;
  networkProtocols: (
    where?: NetworkProtocolsSubscriptionWhereInput
  ) => NetworkProtocolsSubscriptionPayloadSubscription;
  networkProviders: (
    where?: NetworkProvidersSubscriptionWhereInput
  ) => NetworkProvidersSubscriptionPayloadSubscription;
  networkTypes: (
    where?: NetworkTypesSubscriptionWhereInput
  ) => NetworkTypesSubscriptionPayloadSubscription;
  networks: (
    where?: NetworksSubscriptionWhereInput
  ) => NetworksSubscriptionPayloadSubscription;
  passwordPolicies: (
    where?: PasswordPoliciesSubscriptionWhereInput
  ) => PasswordPoliciesSubscriptionPayloadSubscription;
  protocolData: (
    where?: ProtocolDataSubscriptionWhereInput
  ) => ProtocolDataSubscriptionPayloadSubscription;
  reportingProtocols: (
    where?: ReportingProtocolsSubscriptionWhereInput
  ) => ReportingProtocolsSubscriptionPayloadSubscription;
  userRoles: (
    where?: UserRolesSubscriptionWhereInput
  ) => UserRolesSubscriptionPayloadSubscription;
  users: (
    where?: UsersSubscriptionWhereInput
  ) => UsersSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CompaniesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ApplicationNetworkTypeLinksOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PasswordPoliciesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ruleRegExp_ASC"
  | "ruleRegExp_DESC"
  | "ruleText_ASC"
  | "ruleText_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRolesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProtocolDataOrderByInput =
  | "dataIdentifier_ASC"
  | "dataIdentifier_DESC"
  | "dataValue_ASC"
  | "dataValue_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkTypesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworksOrderByInput =
  | "baseUrl_ASC"
  | "baseUrl_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "securityData_ASC"
  | "securityData_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyTypesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkProtocolsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "networkProtocolVersion_ASC"
  | "networkProtocolVersion_DESC"
  | "protocolHandler_ASC"
  | "protocolHandler_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmailVerificationsOrderByInput =
  | "changeRequested_ASC"
  | "changeRequested_DESC"
  | "email_ASC"
  | "email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "uuid_ASC"
  | "uuid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ApplicationsOrderByInput =
  | "baseUrl_ASC"
  | "baseUrl_DESC"
  | "description_ASC"
  | "description_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyNetworkTypeLinksOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeviceNetworkTypeLinksOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeviceProfilesOrderByInput =
  | "description_ASC"
  | "description_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UsersOrderByInput =
  | "email_ASC"
  | "email_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC"
  | "id_ASC"
  | "id_DESC"
  | "lastVerifiedEmail_ASC"
  | "lastVerifiedEmail_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "username_ASC"
  | "username_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DevicesOrderByInput =
  | "description_ASC"
  | "description_DESC"
  | "deviceModel_ASC"
  | "deviceModel_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkProvidersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReportingProtocolsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "protocolHandler_ASC"
  | "protocolHandler_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UsersUpdateWithWhereUniqueWithoutCompanyInput {
  where: UsersWhereUniqueInput;
  data: UsersUpdateWithoutCompanyDataInput;
}

export type ApplicationNetworkTypeLinksWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface ApplicationNetworkTypeLinksUpdateWithoutNetworkTypeDataInput {
  application?: ApplicationsUpdateOneWithoutApplicationNetworkTypeLinksesInput;
  networkSettings?: String;
}

export interface CompaniesCreateOneWithoutUsersesInput {
  create?: CompaniesCreateWithoutUsersesInput;
  connect?: CompaniesWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: ApplicationNetworkTypeLinksWhereUniqueInput;
  update: ApplicationNetworkTypeLinksUpdateWithoutNetworkTypeDataInput;
  create: ApplicationNetworkTypeLinksCreateWithoutNetworkTypeInput;
}

export interface UserRolesUpdateWithoutUsersesDataInput {
  name?: String;
}

export interface ApplicationNetworkTypeLinksScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | ApplicationNetworkTypeLinksScalarWhereInput[]
    | ApplicationNetworkTypeLinksScalarWhereInput;
  OR?:
    | ApplicationNetworkTypeLinksScalarWhereInput[]
    | ApplicationNetworkTypeLinksScalarWhereInput;
  NOT?:
    | ApplicationNetworkTypeLinksScalarWhereInput[]
    | ApplicationNetworkTypeLinksScalarWhereInput;
}

export interface EmailVerificationsWhereInput {
  changeRequested?: String;
  changeRequested_not?: String;
  changeRequested_in?: String[] | String;
  changeRequested_not_in?: String[] | String;
  changeRequested_lt?: String;
  changeRequested_lte?: String;
  changeRequested_gt?: String;
  changeRequested_gte?: String;
  changeRequested_contains?: String;
  changeRequested_not_contains?: String;
  changeRequested_starts_with?: String;
  changeRequested_not_starts_with?: String;
  changeRequested_ends_with?: String;
  changeRequested_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  user?: UsersWhereInput;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  AND?: EmailVerificationsWhereInput[] | EmailVerificationsWhereInput;
  OR?: EmailVerificationsWhereInput[] | EmailVerificationsWhereInput;
  NOT?: EmailVerificationsWhereInput[] | EmailVerificationsWhereInput;
}

export interface ApplicationNetworkTypeLinksUpdateManyWithWhereNestedInput {
  where: ApplicationNetworkTypeLinksScalarWhereInput;
  data: ApplicationNetworkTypeLinksUpdateManyDataInput;
}

export interface UsersWhereInput {
  company?: CompaniesWhereInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailVerificationses_every?: EmailVerificationsWhereInput;
  emailVerificationses_some?: EmailVerificationsWhereInput;
  emailVerificationses_none?: EmailVerificationsWhereInput;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  lastVerifiedEmail?: String;
  lastVerifiedEmail_not?: String;
  lastVerifiedEmail_in?: String[] | String;
  lastVerifiedEmail_not_in?: String[] | String;
  lastVerifiedEmail_lt?: String;
  lastVerifiedEmail_lte?: String;
  lastVerifiedEmail_gt?: String;
  lastVerifiedEmail_gte?: String;
  lastVerifiedEmail_contains?: String;
  lastVerifiedEmail_not_contains?: String;
  lastVerifiedEmail_starts_with?: String;
  lastVerifiedEmail_not_starts_with?: String;
  lastVerifiedEmail_ends_with?: String;
  lastVerifiedEmail_not_ends_with?: String;
  passwordHash?: String;
  passwordHash_not?: String;
  passwordHash_in?: String[] | String;
  passwordHash_not_in?: String[] | String;
  passwordHash_lt?: String;
  passwordHash_lte?: String;
  passwordHash_gt?: String;
  passwordHash_gte?: String;
  passwordHash_contains?: String;
  passwordHash_not_contains?: String;
  passwordHash_starts_with?: String;
  passwordHash_not_starts_with?: String;
  passwordHash_ends_with?: String;
  passwordHash_not_ends_with?: String;
  role?: UserRolesWhereInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  AND?: UsersWhereInput[] | UsersWhereInput;
  OR?: UsersWhereInput[] | UsersWhereInput;
  NOT?: UsersWhereInput[] | UsersWhereInput;
}

export interface ApplicationNetworkTypeLinksUpdateManyDataInput {
  networkSettings?: String;
}

export interface UserRolesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRolesWhereInput;
  AND?: UserRolesSubscriptionWhereInput[] | UserRolesSubscriptionWhereInput;
  OR?: UserRolesSubscriptionWhereInput[] | UserRolesSubscriptionWhereInput;
  NOT?: UserRolesSubscriptionWhereInput[] | UserRolesSubscriptionWhereInput;
}

export interface DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput {
  create?:
    | DeviceNetworkTypeLinksCreateWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinksCreateWithoutNetworkTypeInput;
  delete?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  connect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  update?:
    | DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | DeviceNetworkTypeLinksScalarWhereInput[]
    | DeviceNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface PasswordPoliciesWhereInput {
  company?: CompaniesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  ruleRegExp?: String;
  ruleRegExp_not?: String;
  ruleRegExp_in?: String[] | String;
  ruleRegExp_not_in?: String[] | String;
  ruleRegExp_lt?: String;
  ruleRegExp_lte?: String;
  ruleRegExp_gt?: String;
  ruleRegExp_gte?: String;
  ruleRegExp_contains?: String;
  ruleRegExp_not_contains?: String;
  ruleRegExp_starts_with?: String;
  ruleRegExp_not_starts_with?: String;
  ruleRegExp_ends_with?: String;
  ruleRegExp_not_ends_with?: String;
  ruleText?: String;
  ruleText_not?: String;
  ruleText_in?: String[] | String;
  ruleText_not_in?: String[] | String;
  ruleText_lt?: String;
  ruleText_lte?: String;
  ruleText_gt?: String;
  ruleText_gte?: String;
  ruleText_contains?: String;
  ruleText_not_contains?: String;
  ruleText_starts_with?: String;
  ruleText_not_starts_with?: String;
  ruleText_ends_with?: String;
  ruleText_not_ends_with?: String;
  AND?: PasswordPoliciesWhereInput[] | PasswordPoliciesWhereInput;
  OR?: PasswordPoliciesWhereInput[] | PasswordPoliciesWhereInput;
  NOT?: PasswordPoliciesWhereInput[] | PasswordPoliciesWhereInput;
}

export interface DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceNetworkTypeLinksWhereUniqueInput;
  data: DeviceNetworkTypeLinksUpdateWithoutNetworkTypeDataInput;
}

export interface PasswordPoliciesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PasswordPoliciesWhereInput;
  AND?:
    | PasswordPoliciesSubscriptionWhereInput[]
    | PasswordPoliciesSubscriptionWhereInput;
  OR?:
    | PasswordPoliciesSubscriptionWhereInput[]
    | PasswordPoliciesSubscriptionWhereInput;
  NOT?:
    | PasswordPoliciesSubscriptionWhereInput[]
    | PasswordPoliciesSubscriptionWhereInput;
}

export interface DeviceNetworkTypeLinksUpdateWithoutNetworkTypeDataInput {
  device?: DevicesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
  deviceProfile?: DeviceProfilesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
}

export interface ProtocolDataWhereInput {
  dataIdentifier?: String;
  dataIdentifier_not?: String;
  dataIdentifier_in?: String[] | String;
  dataIdentifier_not_in?: String[] | String;
  dataIdentifier_lt?: String;
  dataIdentifier_lte?: String;
  dataIdentifier_gt?: String;
  dataIdentifier_gte?: String;
  dataIdentifier_contains?: String;
  dataIdentifier_not_contains?: String;
  dataIdentifier_starts_with?: String;
  dataIdentifier_not_starts_with?: String;
  dataIdentifier_ends_with?: String;
  dataIdentifier_not_ends_with?: String;
  dataValue?: String;
  dataValue_not?: String;
  dataValue_in?: String[] | String;
  dataValue_not_in?: String[] | String;
  dataValue_lt?: String;
  dataValue_lte?: String;
  dataValue_gt?: String;
  dataValue_gte?: String;
  dataValue_contains?: String;
  dataValue_not_contains?: String;
  dataValue_starts_with?: String;
  dataValue_not_starts_with?: String;
  dataValue_ends_with?: String;
  dataValue_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  network?: NetworksWhereInput;
  networkProtocol?: NetworkProtocolsWhereInput;
  AND?: ProtocolDataWhereInput[] | ProtocolDataWhereInput;
  OR?: ProtocolDataWhereInput[] | ProtocolDataWhereInput;
  NOT?: ProtocolDataWhereInput[] | ProtocolDataWhereInput;
}

export interface DevicesUpdateOneWithoutDeviceNetworkTypeLinksesInput {
  create?: DevicesCreateWithoutDeviceNetworkTypeLinksesInput;
  update?: DevicesUpdateWithoutDeviceNetworkTypeLinksesDataInput;
  upsert?: DevicesUpsertWithoutDeviceNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DevicesWhereUniqueInput;
}

export interface NetworkTypesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkTypesWhereInput;
  AND?:
    | NetworkTypesSubscriptionWhereInput[]
    | NetworkTypesSubscriptionWhereInput;
  OR?:
    | NetworkTypesSubscriptionWhereInput[]
    | NetworkTypesSubscriptionWhereInput;
  NOT?:
    | NetworkTypesSubscriptionWhereInput[]
    | NetworkTypesSubscriptionWhereInput;
}

export interface DevicesUpdateWithoutDeviceNetworkTypeLinksesDataInput {
  application?: ApplicationsUpdateOneWithoutDevicesesInput;
  description?: String;
  deviceModel?: String;
  name?: String;
}

export interface NetworkProvidersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkProvidersWhereInput;
  AND?:
    | NetworkProvidersSubscriptionWhereInput[]
    | NetworkProvidersSubscriptionWhereInput;
  OR?:
    | NetworkProvidersSubscriptionWhereInput[]
    | NetworkProvidersSubscriptionWhereInput;
  NOT?:
    | NetworkProvidersSubscriptionWhereInput[]
    | NetworkProvidersSubscriptionWhereInput;
}

export interface ApplicationsUpdateOneWithoutDevicesesInput {
  create?: ApplicationsCreateWithoutDevicesesInput;
  update?: ApplicationsUpdateWithoutDevicesesDataInput;
  upsert?: ApplicationsUpsertWithoutDevicesesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ApplicationsWhereUniqueInput;
}

export interface NetworkProtocolsWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  masterProtocol?: NetworkProtocolsWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkProtocolses_every?: NetworkProtocolsWhereInput;
  networkProtocolses_some?: NetworkProtocolsWhereInput;
  networkProtocolses_none?: NetworkProtocolsWhereInput;
  networkProtocolVersion?: String;
  networkProtocolVersion_not?: String;
  networkProtocolVersion_in?: String[] | String;
  networkProtocolVersion_not_in?: String[] | String;
  networkProtocolVersion_lt?: String;
  networkProtocolVersion_lte?: String;
  networkProtocolVersion_gt?: String;
  networkProtocolVersion_gte?: String;
  networkProtocolVersion_contains?: String;
  networkProtocolVersion_not_contains?: String;
  networkProtocolVersion_starts_with?: String;
  networkProtocolVersion_not_starts_with?: String;
  networkProtocolVersion_ends_with?: String;
  networkProtocolVersion_not_ends_with?: String;
  networkses_every?: NetworksWhereInput;
  networkses_some?: NetworksWhereInput;
  networkses_none?: NetworksWhereInput;
  networkType?: NetworkTypesWhereInput;
  protocolDatas_every?: ProtocolDataWhereInput;
  protocolDatas_some?: ProtocolDataWhereInput;
  protocolDatas_none?: ProtocolDataWhereInput;
  protocolHandler?: String;
  protocolHandler_not?: String;
  protocolHandler_in?: String[] | String;
  protocolHandler_not_in?: String[] | String;
  protocolHandler_lt?: String;
  protocolHandler_lte?: String;
  protocolHandler_gt?: String;
  protocolHandler_gte?: String;
  protocolHandler_contains?: String;
  protocolHandler_not_contains?: String;
  protocolHandler_starts_with?: String;
  protocolHandler_not_starts_with?: String;
  protocolHandler_ends_with?: String;
  protocolHandler_not_ends_with?: String;
  AND?: NetworkProtocolsWhereInput[] | NetworkProtocolsWhereInput;
  OR?: NetworkProtocolsWhereInput[] | NetworkProtocolsWhereInput;
  NOT?: NetworkProtocolsWhereInput[] | NetworkProtocolsWhereInput;
}

export interface ApplicationsUpdateWithoutDevicesesDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutApplicationInput;
  baseUrl?: String;
  company?: CompaniesUpdateOneWithoutApplicationsesInput;
  description?: String;
  name?: String;
  reportingProtocol?: ReportingProtocolsUpdateOneWithoutApplicationsesInput;
}

export interface DeviceProfilesWhereInput {
  company?: CompaniesWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deviceNetworkTypeLinkses_every?: DeviceNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_some?: DeviceNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_none?: DeviceNetworkTypeLinksWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  networkType?: NetworkTypesWhereInput;
  AND?: DeviceProfilesWhereInput[] | DeviceProfilesWhereInput;
  OR?: DeviceProfilesWhereInput[] | DeviceProfilesWhereInput;
  NOT?: DeviceProfilesWhereInput[] | DeviceProfilesWhereInput;
}

export interface ApplicationNetworkTypeLinksUpdateManyWithoutApplicationInput {
  create?:
    | ApplicationNetworkTypeLinksCreateWithoutApplicationInput[]
    | ApplicationNetworkTypeLinksCreateWithoutApplicationInput;
  delete?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
  connect?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
  update?:
    | ApplicationNetworkTypeLinksUpdateWithWhereUniqueWithoutApplicationInput[]
    | ApplicationNetworkTypeLinksUpdateWithWhereUniqueWithoutApplicationInput;
  upsert?:
    | ApplicationNetworkTypeLinksUpsertWithWhereUniqueWithoutApplicationInput[]
    | ApplicationNetworkTypeLinksUpsertWithWhereUniqueWithoutApplicationInput;
  deleteMany?:
    | ApplicationNetworkTypeLinksScalarWhereInput[]
    | ApplicationNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | ApplicationNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | ApplicationNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface DeviceProfilesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeviceProfilesWhereInput;
  AND?:
    | DeviceProfilesSubscriptionWhereInput[]
    | DeviceProfilesSubscriptionWhereInput;
  OR?:
    | DeviceProfilesSubscriptionWhereInput[]
    | DeviceProfilesSubscriptionWhereInput;
  NOT?:
    | DeviceProfilesSubscriptionWhereInput[]
    | DeviceProfilesSubscriptionWhereInput;
}

export interface ApplicationNetworkTypeLinksUpdateWithWhereUniqueWithoutApplicationInput {
  where: ApplicationNetworkTypeLinksWhereUniqueInput;
  data: ApplicationNetworkTypeLinksUpdateWithoutApplicationDataInput;
}

export interface DeviceNetworkTypeLinksWhereInput {
  device?: DevicesWhereInput;
  deviceProfile?: DeviceProfilesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  networkType?: NetworkTypesWhereInput;
  AND?: DeviceNetworkTypeLinksWhereInput[] | DeviceNetworkTypeLinksWhereInput;
  OR?: DeviceNetworkTypeLinksWhereInput[] | DeviceNetworkTypeLinksWhereInput;
  NOT?: DeviceNetworkTypeLinksWhereInput[] | DeviceNetworkTypeLinksWhereInput;
}

export interface ApplicationNetworkTypeLinksUpdateWithoutApplicationDataInput {
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutApplicationNetworkTypeLinksesInput;
}

export interface NetworkTypesWhereInput {
  applicationNetworkTypeLinkses_every?: ApplicationNetworkTypeLinksWhereInput;
  applicationNetworkTypeLinkses_some?: ApplicationNetworkTypeLinksWhereInput;
  applicationNetworkTypeLinkses_none?: ApplicationNetworkTypeLinksWhereInput;
  companyNetworkTypeLinkses_every?: CompanyNetworkTypeLinksWhereInput;
  companyNetworkTypeLinkses_some?: CompanyNetworkTypeLinksWhereInput;
  companyNetworkTypeLinkses_none?: CompanyNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_every?: DeviceNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_some?: DeviceNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_none?: DeviceNetworkTypeLinksWhereInput;
  deviceProfileses_every?: DeviceProfilesWhereInput;
  deviceProfileses_some?: DeviceProfilesWhereInput;
  deviceProfileses_none?: DeviceProfilesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkProtocolses_every?: NetworkProtocolsWhereInput;
  networkProtocolses_some?: NetworkProtocolsWhereInput;
  networkProtocolses_none?: NetworkProtocolsWhereInput;
  networkses_every?: NetworksWhereInput;
  networkses_some?: NetworksWhereInput;
  networkses_none?: NetworksWhereInput;
  AND?: NetworkTypesWhereInput[] | NetworkTypesWhereInput;
  OR?: NetworkTypesWhereInput[] | NetworkTypesWhereInput;
  NOT?: NetworkTypesWhereInput[] | NetworkTypesWhereInput;
}

export interface NetworkTypesUpdateOneWithoutApplicationNetworkTypeLinksesInput {
  create?: NetworkTypesCreateWithoutApplicationNetworkTypeLinksesInput;
  update?: NetworkTypesUpdateWithoutApplicationNetworkTypeLinksesDataInput;
  upsert?: NetworkTypesUpsertWithoutApplicationNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface CompanyNetworkTypeLinksSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyNetworkTypeLinksWhereInput;
  AND?:
    | CompanyNetworkTypeLinksSubscriptionWhereInput[]
    | CompanyNetworkTypeLinksSubscriptionWhereInput;
  OR?:
    | CompanyNetworkTypeLinksSubscriptionWhereInput[]
    | CompanyNetworkTypeLinksSubscriptionWhereInput;
  NOT?:
    | CompanyNetworkTypeLinksSubscriptionWhereInput[]
    | CompanyNetworkTypeLinksSubscriptionWhereInput;
}

export interface NetworkTypesUpdateWithoutApplicationNetworkTypeLinksesDataInput {
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkTypeInput;
  networkses?: NetworksUpdateManyWithoutNetworkTypeInput;
}

export interface CompaniesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompaniesWhereInput;
  AND?: CompaniesSubscriptionWhereInput[] | CompaniesSubscriptionWhereInput;
  OR?: CompaniesSubscriptionWhereInput[] | CompaniesSubscriptionWhereInput;
  NOT?: CompaniesSubscriptionWhereInput[] | CompaniesSubscriptionWhereInput;
}

export interface CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput {
  create?:
    | CompanyNetworkTypeLinksCreateWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinksCreateWithoutNetworkTypeInput;
  delete?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
  connect?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
  update?:
    | CompanyNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | CompanyNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | CompanyNetworkTypeLinksScalarWhereInput[]
    | CompanyNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | CompanyNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | CompanyNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface ApplicationNetworkTypeLinksSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ApplicationNetworkTypeLinksWhereInput;
  AND?:
    | ApplicationNetworkTypeLinksSubscriptionWhereInput[]
    | ApplicationNetworkTypeLinksSubscriptionWhereInput;
  OR?:
    | ApplicationNetworkTypeLinksSubscriptionWhereInput[]
    | ApplicationNetworkTypeLinksSubscriptionWhereInput;
  NOT?:
    | ApplicationNetworkTypeLinksSubscriptionWhereInput[]
    | ApplicationNetworkTypeLinksSubscriptionWhereInput;
}

export interface CompanyNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: CompanyNetworkTypeLinksWhereUniqueInput;
  data: CompanyNetworkTypeLinksUpdateWithoutNetworkTypeDataInput;
}

export interface UsersUpdateInput {
  company?: CompaniesUpdateOneWithoutUsersesInput;
  email?: String;
  emailVerificationses?: EmailVerificationsUpdateManyWithoutUserInput;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  role?: UserRolesUpdateOneWithoutUsersesInput;
  username?: String;
}

export interface CompanyNetworkTypeLinksUpdateWithoutNetworkTypeDataInput {
  company?: CompaniesUpdateOneWithoutCompanyNetworkTypeLinksesInput;
  networkSettings?: String;
}

export interface UsersCreateInput {
  company?: CompaniesCreateOneWithoutUsersesInput;
  email?: String;
  emailVerificationses?: EmailVerificationsCreateManyWithoutUserInput;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  role?: UserRolesCreateOneWithoutUsersesInput;
  username?: String;
}

export interface CompaniesUpdateOneWithoutCompanyNetworkTypeLinksesInput {
  create?: CompaniesCreateWithoutCompanyNetworkTypeLinksesInput;
  update?: CompaniesUpdateWithoutCompanyNetworkTypeLinksesDataInput;
  upsert?: CompaniesUpsertWithoutCompanyNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompaniesWhereUniqueInput;
}

export interface UsersUpsertWithWhereUniqueWithoutRoleInput {
  where: UsersWhereUniqueInput;
  update: UsersUpdateWithoutRoleDataInput;
  create: UsersCreateWithoutRoleInput;
}

export interface CompaniesUpdateWithoutCompanyNetworkTypeLinksesDataInput {
  applicationses?: ApplicationsUpdateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesUpdateManyWithoutCompanyInput;
  type?: CompanyTypesUpdateOneWithoutCompaniesesInput;
  userses?: UsersUpdateManyWithoutCompanyInput;
}

export interface UsersUpdateWithoutRoleDataInput {
  company?: CompaniesUpdateOneWithoutUsersesInput;
  email?: String;
  emailVerificationses?: EmailVerificationsUpdateManyWithoutUserInput;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  username?: String;
}

export interface ApplicationsUpdateManyWithoutCompanyInput {
  create?:
    | ApplicationsCreateWithoutCompanyInput[]
    | ApplicationsCreateWithoutCompanyInput;
  delete?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
  connect?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
  disconnect?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
  update?:
    | ApplicationsUpdateWithWhereUniqueWithoutCompanyInput[]
    | ApplicationsUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | ApplicationsUpsertWithWhereUniqueWithoutCompanyInput[]
    | ApplicationsUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: ApplicationsScalarWhereInput[] | ApplicationsScalarWhereInput;
  updateMany?:
    | ApplicationsUpdateManyWithWhereNestedInput[]
    | ApplicationsUpdateManyWithWhereNestedInput;
}

export interface UsersUpdateManyWithoutRoleInput {
  create?: UsersCreateWithoutRoleInput[] | UsersCreateWithoutRoleInput;
  delete?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
  connect?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
  disconnect?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
  update?:
    | UsersUpdateWithWhereUniqueWithoutRoleInput[]
    | UsersUpdateWithWhereUniqueWithoutRoleInput;
  upsert?:
    | UsersUpsertWithWhereUniqueWithoutRoleInput[]
    | UsersUpsertWithWhereUniqueWithoutRoleInput;
  deleteMany?: UsersScalarWhereInput[] | UsersScalarWhereInput;
  updateMany?:
    | UsersUpdateManyWithWhereNestedInput[]
    | UsersUpdateManyWithWhereNestedInput;
}

export interface ApplicationsUpdateWithWhereUniqueWithoutCompanyInput {
  where: ApplicationsWhereUniqueInput;
  data: ApplicationsUpdateWithoutCompanyDataInput;
}

export interface UserRolesUpdateInput {
  name?: String;
  userses?: UsersUpdateManyWithoutRoleInput;
}

export interface ApplicationsUpdateWithoutCompanyDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutApplicationInput;
  baseUrl?: String;
  description?: String;
  deviceses?: DevicesUpdateManyWithoutApplicationInput;
  name?: String;
  reportingProtocol?: ReportingProtocolsUpdateOneWithoutApplicationsesInput;
}

export interface UsersCreateManyWithoutRoleInput {
  create?: UsersCreateWithoutRoleInput[] | UsersCreateWithoutRoleInput;
  connect?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
}

export interface DevicesUpdateManyWithoutApplicationInput {
  create?:
    | DevicesCreateWithoutApplicationInput[]
    | DevicesCreateWithoutApplicationInput;
  delete?: DevicesWhereUniqueInput[] | DevicesWhereUniqueInput;
  connect?: DevicesWhereUniqueInput[] | DevicesWhereUniqueInput;
  disconnect?: DevicesWhereUniqueInput[] | DevicesWhereUniqueInput;
  update?:
    | DevicesUpdateWithWhereUniqueWithoutApplicationInput[]
    | DevicesUpdateWithWhereUniqueWithoutApplicationInput;
  upsert?:
    | DevicesUpsertWithWhereUniqueWithoutApplicationInput[]
    | DevicesUpsertWithWhereUniqueWithoutApplicationInput;
  deleteMany?: DevicesScalarWhereInput[] | DevicesScalarWhereInput;
  updateMany?:
    | DevicesUpdateManyWithWhereNestedInput[]
    | DevicesUpdateManyWithWhereNestedInput;
}

export interface CompaniesWhereInput {
  applicationses_every?: ApplicationsWhereInput;
  applicationses_some?: ApplicationsWhereInput;
  applicationses_none?: ApplicationsWhereInput;
  companyNetworkTypeLinkses_every?: CompanyNetworkTypeLinksWhereInput;
  companyNetworkTypeLinkses_some?: CompanyNetworkTypeLinksWhereInput;
  companyNetworkTypeLinkses_none?: CompanyNetworkTypeLinksWhereInput;
  deviceProfileses_every?: DeviceProfilesWhereInput;
  deviceProfileses_some?: DeviceProfilesWhereInput;
  deviceProfileses_none?: DeviceProfilesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  passwordPolicieses_every?: PasswordPoliciesWhereInput;
  passwordPolicieses_some?: PasswordPoliciesWhereInput;
  passwordPolicieses_none?: PasswordPoliciesWhereInput;
  type?: CompanyTypesWhereInput;
  userses_every?: UsersWhereInput;
  userses_some?: UsersWhereInput;
  userses_none?: UsersWhereInput;
  AND?: CompaniesWhereInput[] | CompaniesWhereInput;
  OR?: CompaniesWhereInput[] | CompaniesWhereInput;
  NOT?: CompaniesWhereInput[] | CompaniesWhereInput;
}

export interface DevicesUpdateWithWhereUniqueWithoutApplicationInput {
  where: DevicesWhereUniqueInput;
  data: DevicesUpdateWithoutApplicationDataInput;
}

export interface ReportingProtocolsUpdateManyMutationInput {
  name?: String;
  protocolHandler?: String;
}

export interface DevicesUpdateWithoutApplicationDataInput {
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutDeviceInput;
  name?: String;
}

export type DeviceNetworkTypeLinksWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface DeviceNetworkTypeLinksUpdateManyWithoutDeviceInput {
  create?:
    | DeviceNetworkTypeLinksCreateWithoutDeviceInput[]
    | DeviceNetworkTypeLinksCreateWithoutDeviceInput;
  delete?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  connect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  update?:
    | DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutDeviceInput[]
    | DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutDeviceInput;
  upsert?:
    | DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutDeviceInput[]
    | DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutDeviceInput;
  deleteMany?:
    | DeviceNetworkTypeLinksScalarWhereInput[]
    | DeviceNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface ApplicationsUpdateWithWhereUniqueWithoutReportingProtocolInput {
  where: ApplicationsWhereUniqueInput;
  data: ApplicationsUpdateWithoutReportingProtocolDataInput;
}

export interface DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutDeviceInput {
  where: DeviceNetworkTypeLinksWhereUniqueInput;
  data: DeviceNetworkTypeLinksUpdateWithoutDeviceDataInput;
}

export type DeviceProfilesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface DeviceNetworkTypeLinksUpdateWithoutDeviceDataInput {
  deviceProfile?: DeviceProfilesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
}

export interface ApplicationsCreateWithoutReportingProtocolInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutApplicationInput;
  baseUrl?: String;
  company?: CompaniesCreateOneWithoutApplicationsesInput;
  description?: String;
  deviceses?: DevicesCreateManyWithoutApplicationInput;
  name?: String;
}

export interface DeviceProfilesUpdateOneWithoutDeviceNetworkTypeLinksesInput {
  create?: DeviceProfilesCreateWithoutDeviceNetworkTypeLinksesInput;
  update?: DeviceProfilesUpdateWithoutDeviceNetworkTypeLinksesDataInput;
  upsert?: DeviceProfilesUpsertWithoutDeviceNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DeviceProfilesWhereUniqueInput;
}

export type DevicesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface DeviceProfilesUpdateWithoutDeviceNetworkTypeLinksesDataInput {
  company?: CompaniesUpdateOneWithoutDeviceProfilesesInput;
  description?: String;
  name?: String;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutDeviceProfilesesInput;
}

export interface ProtocolDataUpdateManyMutationInput {
  dataIdentifier?: String;
  dataValue?: String;
}

export interface CompaniesUpdateOneWithoutDeviceProfilesesInput {
  create?: CompaniesCreateWithoutDeviceProfilesesInput;
  update?: CompaniesUpdateWithoutDeviceProfilesesDataInput;
  upsert?: CompaniesUpsertWithoutDeviceProfilesesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompaniesWhereUniqueInput;
}

export type EmailVerificationsWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CompaniesUpdateWithoutDeviceProfilesesDataInput {
  applicationses?: ApplicationsUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesUpdateManyWithoutCompanyInput;
  type?: CompanyTypesUpdateOneWithoutCompaniesesInput;
  userses?: UsersUpdateManyWithoutCompanyInput;
}

export interface PasswordPoliciesUpdateManyMutationInput {
  ruleRegExp?: String;
  ruleText?: String;
}

export interface PasswordPoliciesUpdateManyWithoutCompanyInput {
  create?:
    | PasswordPoliciesCreateWithoutCompanyInput[]
    | PasswordPoliciesCreateWithoutCompanyInput;
  delete?:
    | PasswordPoliciesWhereUniqueInput[]
    | PasswordPoliciesWhereUniqueInput;
  connect?:
    | PasswordPoliciesWhereUniqueInput[]
    | PasswordPoliciesWhereUniqueInput;
  disconnect?:
    | PasswordPoliciesWhereUniqueInput[]
    | PasswordPoliciesWhereUniqueInput;
  update?:
    | PasswordPoliciesUpdateWithWhereUniqueWithoutCompanyInput[]
    | PasswordPoliciesUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | PasswordPoliciesUpsertWithWhereUniqueWithoutCompanyInput[]
    | PasswordPoliciesUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?:
    | PasswordPoliciesScalarWhereInput[]
    | PasswordPoliciesScalarWhereInput;
  updateMany?:
    | PasswordPoliciesUpdateManyWithWhereNestedInput[]
    | PasswordPoliciesUpdateManyWithWhereNestedInput;
}

export type NetworkProtocolsWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface PasswordPoliciesUpdateWithWhereUniqueWithoutCompanyInput {
  where: PasswordPoliciesWhereUniqueInput;
  data: PasswordPoliciesUpdateWithoutCompanyDataInput;
}

export interface CompaniesUpdateOneWithoutPasswordPoliciesesInput {
  create?: CompaniesCreateWithoutPasswordPoliciesesInput;
  update?: CompaniesUpdateWithoutPasswordPoliciesesDataInput;
  upsert?: CompaniesUpsertWithoutPasswordPoliciesesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompaniesWhereUniqueInput;
}

export interface PasswordPoliciesUpdateWithoutCompanyDataInput {
  ruleRegExp?: String;
  ruleText?: String;
}

export type NetworkProvidersWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface PasswordPoliciesUpsertWithWhereUniqueWithoutCompanyInput {
  where: PasswordPoliciesWhereUniqueInput;
  update: PasswordPoliciesUpdateWithoutCompanyDataInput;
  create: PasswordPoliciesCreateWithoutCompanyInput;
}

export interface CompaniesCreateOneWithoutPasswordPoliciesesInput {
  create?: CompaniesCreateWithoutPasswordPoliciesesInput;
  connect?: CompaniesWhereUniqueInput;
}

export interface PasswordPoliciesScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  ruleRegExp?: String;
  ruleRegExp_not?: String;
  ruleRegExp_in?: String[] | String;
  ruleRegExp_not_in?: String[] | String;
  ruleRegExp_lt?: String;
  ruleRegExp_lte?: String;
  ruleRegExp_gt?: String;
  ruleRegExp_gte?: String;
  ruleRegExp_contains?: String;
  ruleRegExp_not_contains?: String;
  ruleRegExp_starts_with?: String;
  ruleRegExp_not_starts_with?: String;
  ruleRegExp_ends_with?: String;
  ruleRegExp_not_ends_with?: String;
  ruleText?: String;
  ruleText_not?: String;
  ruleText_in?: String[] | String;
  ruleText_not_in?: String[] | String;
  ruleText_lt?: String;
  ruleText_lte?: String;
  ruleText_gt?: String;
  ruleText_gte?: String;
  ruleText_contains?: String;
  ruleText_not_contains?: String;
  ruleText_starts_with?: String;
  ruleText_not_starts_with?: String;
  ruleText_ends_with?: String;
  ruleText_not_ends_with?: String;
  AND?: PasswordPoliciesScalarWhereInput[] | PasswordPoliciesScalarWhereInput;
  OR?: PasswordPoliciesScalarWhereInput[] | PasswordPoliciesScalarWhereInput;
  NOT?: PasswordPoliciesScalarWhereInput[] | PasswordPoliciesScalarWhereInput;
}

export interface NetworksUpdateManyMutationInput {
  baseUrl?: String;
  name?: String;
  securityData?: String;
}

export interface PasswordPoliciesUpdateManyWithWhereNestedInput {
  where: PasswordPoliciesScalarWhereInput;
  data: PasswordPoliciesUpdateManyDataInput;
}

export interface ApplicationsWhereInput {
  applicationNetworkTypeLinkses_every?: ApplicationNetworkTypeLinksWhereInput;
  applicationNetworkTypeLinkses_some?: ApplicationNetworkTypeLinksWhereInput;
  applicationNetworkTypeLinkses_none?: ApplicationNetworkTypeLinksWhereInput;
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  company?: CompaniesWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deviceses_every?: DevicesWhereInput;
  deviceses_some?: DevicesWhereInput;
  deviceses_none?: DevicesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  reportingProtocol?: ReportingProtocolsWhereInput;
  AND?: ApplicationsWhereInput[] | ApplicationsWhereInput;
  OR?: ApplicationsWhereInput[] | ApplicationsWhereInput;
  NOT?: ApplicationsWhereInput[] | ApplicationsWhereInput;
}

export interface PasswordPoliciesUpdateManyDataInput {
  ruleRegExp?: String;
  ruleText?: String;
}

export interface NetworksCreateInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsCreateOneWithoutNetworksesInput;
  networkProvider?: NetworkProvidersCreateOneWithoutNetworksesInput;
  networkType?: NetworkTypesCreateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkInput;
  securityData?: String;
}

export interface CompanyTypesUpdateOneWithoutCompaniesesInput {
  create?: CompanyTypesCreateWithoutCompaniesesInput;
  update?: CompanyTypesUpdateWithoutCompaniesesDataInput;
  upsert?: CompanyTypesUpsertWithoutCompaniesesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyTypesWhereUniqueInput;
}

export type NetworksWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CompanyTypesUpdateWithoutCompaniesesDataInput {
  name?: String;
}

export interface NetworkTypesCreateInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkTypeInput;
  networkses?: NetworksCreateManyWithoutNetworkTypeInput;
}

export interface CompanyTypesUpsertWithoutCompaniesesInput {
  update: CompanyTypesUpdateWithoutCompaniesesDataInput;
  create: CompanyTypesCreateWithoutCompaniesesInput;
}

export type PasswordPoliciesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UsersUpdateManyWithoutCompanyInput {
  create?: UsersCreateWithoutCompanyInput[] | UsersCreateWithoutCompanyInput;
  delete?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
  connect?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
  disconnect?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
  update?:
    | UsersUpdateWithWhereUniqueWithoutCompanyInput[]
    | UsersUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | UsersUpsertWithWhereUniqueWithoutCompanyInput[]
    | UsersUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: UsersScalarWhereInput[] | UsersScalarWhereInput;
  updateMany?:
    | UsersUpdateManyWithWhereNestedInput[]
    | UsersUpdateManyWithWhereNestedInput;
}

export interface NetworksUpdateWithoutNetworkProviderDataInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsUpdateOneWithoutNetworksesInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkInput;
  securityData?: String;
}

export interface UsersUpdateOneWithoutEmailVerificationsesInput {
  create?: UsersCreateWithoutEmailVerificationsesInput;
  update?: UsersUpdateWithoutEmailVerificationsesDataInput;
  upsert?: UsersUpsertWithoutEmailVerificationsesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export type ProtocolDataWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UsersUpdateWithoutCompanyDataInput {
  email?: String;
  emailVerificationses?: EmailVerificationsUpdateManyWithoutUserInput;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  role?: UserRolesUpdateOneWithoutUsersesInput;
  username?: String;
}

export interface NetworkProvidersUpdateInput {
  name?: String;
  networkses?: NetworksUpdateManyWithoutNetworkProviderInput;
}

export interface EmailVerificationsUpdateManyWithoutUserInput {
  create?:
    | EmailVerificationsCreateWithoutUserInput[]
    | EmailVerificationsCreateWithoutUserInput;
  delete?:
    | EmailVerificationsWhereUniqueInput[]
    | EmailVerificationsWhereUniqueInput;
  connect?:
    | EmailVerificationsWhereUniqueInput[]
    | EmailVerificationsWhereUniqueInput;
  disconnect?:
    | EmailVerificationsWhereUniqueInput[]
    | EmailVerificationsWhereUniqueInput;
  update?:
    | EmailVerificationsUpdateWithWhereUniqueWithoutUserInput[]
    | EmailVerificationsUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | EmailVerificationsUpsertWithWhereUniqueWithoutUserInput[]
    | EmailVerificationsUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?:
    | EmailVerificationsScalarWhereInput[]
    | EmailVerificationsScalarWhereInput;
  updateMany?:
    | EmailVerificationsUpdateManyWithWhereNestedInput[]
    | EmailVerificationsUpdateManyWithWhereNestedInput;
}

export type ReportingProtocolsWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface EmailVerificationsUpdateWithWhereUniqueWithoutUserInput {
  where: EmailVerificationsWhereUniqueInput;
  data: EmailVerificationsUpdateWithoutUserDataInput;
}

export interface NetworksCreateManyWithoutNetworkProviderInput {
  create?:
    | NetworksCreateWithoutNetworkProviderInput[]
    | NetworksCreateWithoutNetworkProviderInput;
  connect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
}

export interface EmailVerificationsUpdateWithoutUserDataInput {
  changeRequested?: String;
  email?: String;
  uuid?: String;
}

export interface NetworkProtocolsUpdateManyMutationInput {
  name?: String;
  networkProtocolVersion?: String;
  protocolHandler?: String;
}

export interface EmailVerificationsUpsertWithWhereUniqueWithoutUserInput {
  where: EmailVerificationsWhereUniqueInput;
  update: EmailVerificationsUpdateWithoutUserDataInput;
  create: EmailVerificationsCreateWithoutUserInput;
}

export interface NetworkProtocolsUpdateInput {
  masterProtocol?: NetworkProtocolsUpdateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksUpdateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface EmailVerificationsScalarWhereInput {
  changeRequested?: String;
  changeRequested_not?: String;
  changeRequested_in?: String[] | String;
  changeRequested_not_in?: String[] | String;
  changeRequested_lt?: String;
  changeRequested_lte?: String;
  changeRequested_gt?: String;
  changeRequested_gte?: String;
  changeRequested_contains?: String;
  changeRequested_not_contains?: String;
  changeRequested_starts_with?: String;
  changeRequested_not_starts_with?: String;
  changeRequested_ends_with?: String;
  changeRequested_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  AND?:
    | EmailVerificationsScalarWhereInput[]
    | EmailVerificationsScalarWhereInput;
  OR?:
    | EmailVerificationsScalarWhereInput[]
    | EmailVerificationsScalarWhereInput;
  NOT?:
    | EmailVerificationsScalarWhereInput[]
    | EmailVerificationsScalarWhereInput;
}

export interface EmailVerificationsUpdateManyMutationInput {
  changeRequested?: String;
  email?: String;
  uuid?: String;
}

export interface EmailVerificationsUpdateManyWithWhereNestedInput {
  where: EmailVerificationsScalarWhereInput;
  data: EmailVerificationsUpdateManyDataInput;
}

export type UsersWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface EmailVerificationsUpdateManyDataInput {
  changeRequested?: String;
  email?: String;
  uuid?: String;
}

export interface CompaniesUpdateWithoutUsersesDataInput {
  applicationses?: ApplicationsUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesUpdateManyWithoutCompanyInput;
  type?: CompanyTypesUpdateOneWithoutCompaniesesInput;
}

export interface UserRolesUpdateOneWithoutUsersesInput {
  create?: UserRolesCreateWithoutUsersesInput;
  update?: UserRolesUpdateWithoutUsersesDataInput;
  upsert?: UserRolesUpsertWithoutUsersesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserRolesWhereUniqueInput;
}

export interface UsersUpdateWithoutEmailVerificationsesDataInput {
  company?: CompaniesUpdateOneWithoutUsersesInput;
  email?: String;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  role?: UserRolesUpdateOneWithoutUsersesInput;
  username?: String;
}

export interface UserRolesWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  userses_every?: UsersWhereInput;
  userses_some?: UsersWhereInput;
  userses_none?: UsersWhereInput;
  AND?: UserRolesWhereInput[] | UserRolesWhereInput;
  OR?: UserRolesWhereInput[] | UserRolesWhereInput;
  NOT?: UserRolesWhereInput[] | UserRolesWhereInput;
}

export interface ApplicationNetworkTypeLinksCreateInput {
  application?: ApplicationsCreateOneWithoutApplicationNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutApplicationNetworkTypeLinksesInput;
}

export interface UserRolesUpsertWithoutUsersesInput {
  update: UserRolesUpdateWithoutUsersesDataInput;
  create: UserRolesCreateWithoutUsersesInput;
}

export interface ApplicationsCreateWithoutApplicationNetworkTypeLinksesInput {
  baseUrl?: String;
  company?: CompaniesCreateOneWithoutApplicationsesInput;
  description?: String;
  deviceses?: DevicesCreateManyWithoutApplicationInput;
  name?: String;
  reportingProtocol?: ReportingProtocolsCreateOneWithoutApplicationsesInput;
}

export interface UsersUpsertWithWhereUniqueWithoutCompanyInput {
  where: UsersWhereUniqueInput;
  update: UsersUpdateWithoutCompanyDataInput;
  create: UsersCreateWithoutCompanyInput;
}

export interface CompaniesCreateWithoutApplicationsesInput {
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesCreateManyWithoutCompanyInput;
  type?: CompanyTypesCreateOneWithoutCompaniesesInput;
  userses?: UsersCreateManyWithoutCompanyInput;
}

export interface UsersScalarWhereInput {
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  lastVerifiedEmail?: String;
  lastVerifiedEmail_not?: String;
  lastVerifiedEmail_in?: String[] | String;
  lastVerifiedEmail_not_in?: String[] | String;
  lastVerifiedEmail_lt?: String;
  lastVerifiedEmail_lte?: String;
  lastVerifiedEmail_gt?: String;
  lastVerifiedEmail_gte?: String;
  lastVerifiedEmail_contains?: String;
  lastVerifiedEmail_not_contains?: String;
  lastVerifiedEmail_starts_with?: String;
  lastVerifiedEmail_not_starts_with?: String;
  lastVerifiedEmail_ends_with?: String;
  lastVerifiedEmail_not_ends_with?: String;
  passwordHash?: String;
  passwordHash_not?: String;
  passwordHash_in?: String[] | String;
  passwordHash_not_in?: String[] | String;
  passwordHash_lt?: String;
  passwordHash_lte?: String;
  passwordHash_gt?: String;
  passwordHash_gte?: String;
  passwordHash_contains?: String;
  passwordHash_not_contains?: String;
  passwordHash_starts_with?: String;
  passwordHash_not_starts_with?: String;
  passwordHash_ends_with?: String;
  passwordHash_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  AND?: UsersScalarWhereInput[] | UsersScalarWhereInput;
  OR?: UsersScalarWhereInput[] | UsersScalarWhereInput;
  NOT?: UsersScalarWhereInput[] | UsersScalarWhereInput;
}

export interface CompanyNetworkTypeLinksCreateWithoutCompanyInput {
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutCompanyNetworkTypeLinksesInput;
}

export interface UsersUpdateManyWithWhereNestedInput {
  where: UsersScalarWhereInput;
  data: UsersUpdateManyDataInput;
}

export interface NetworkTypesCreateWithoutCompanyNetworkTypeLinksesInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkTypeInput;
  networkses?: NetworksCreateManyWithoutNetworkTypeInput;
}

export interface UsersUpdateManyDataInput {
  email?: String;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  username?: String;
}

export interface ApplicationNetworkTypeLinksCreateWithoutNetworkTypeInput {
  application?: ApplicationsCreateOneWithoutApplicationNetworkTypeLinksesInput;
  networkSettings?: String;
}

export interface CompaniesUpsertWithoutDeviceProfilesesInput {
  update: CompaniesUpdateWithoutDeviceProfilesesDataInput;
  create: CompaniesCreateWithoutDeviceProfilesesInput;
}

export interface DeviceNetworkTypeLinksCreateWithoutNetworkTypeInput {
  device?: DevicesCreateOneWithoutDeviceNetworkTypeLinksesInput;
  deviceProfile?: DeviceProfilesCreateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
}

export interface NetworkTypesUpdateOneWithoutDeviceProfilesesInput {
  create?: NetworkTypesCreateWithoutDeviceProfilesesInput;
  update?: NetworkTypesUpdateWithoutDeviceProfilesesDataInput;
  upsert?: NetworkTypesUpsertWithoutDeviceProfilesesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface DevicesCreateWithoutDeviceNetworkTypeLinksesInput {
  application?: ApplicationsCreateOneWithoutDevicesesInput;
  description?: String;
  deviceModel?: String;
  name?: String;
}

export interface NetworkTypesUpdateWithoutDeviceProfilesesDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkTypeInput;
  networkses?: NetworksUpdateManyWithoutNetworkTypeInput;
}

export interface ApplicationsCreateWithoutDevicesesInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutApplicationInput;
  baseUrl?: String;
  company?: CompaniesCreateOneWithoutApplicationsesInput;
  description?: String;
  name?: String;
  reportingProtocol?: ReportingProtocolsCreateOneWithoutApplicationsesInput;
}

export interface NetworkProtocolsUpdateManyWithoutNetworkTypeInput {
  create?:
    | NetworkProtocolsCreateWithoutNetworkTypeInput[]
    | NetworkProtocolsCreateWithoutNetworkTypeInput;
  delete?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
  connect?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
  disconnect?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
  update?:
    | NetworkProtocolsUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworkProtocolsUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | NetworkProtocolsUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworkProtocolsUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | NetworkProtocolsScalarWhereInput[]
    | NetworkProtocolsScalarWhereInput;
  updateMany?:
    | NetworkProtocolsUpdateManyWithWhereNestedInput[]
    | NetworkProtocolsUpdateManyWithWhereNestedInput;
}

export interface ApplicationNetworkTypeLinksCreateWithoutApplicationInput {
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutApplicationNetworkTypeLinksesInput;
}

export interface NetworkProtocolsUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkProtocolsWhereUniqueInput;
  data: NetworkProtocolsUpdateWithoutNetworkTypeDataInput;
}

export interface NetworkTypesCreateWithoutApplicationNetworkTypeLinksesInput {
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkTypeInput;
  networkses?: NetworksCreateManyWithoutNetworkTypeInput;
}

export interface NetworkProtocolsUpdateWithoutNetworkTypeDataInput {
  masterProtocol?: NetworkProtocolsUpdateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksUpdateManyWithoutNetworkProtocolInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface CompanyNetworkTypeLinksCreateWithoutNetworkTypeInput {
  company?: CompaniesCreateOneWithoutCompanyNetworkTypeLinksesInput;
  networkSettings?: String;
}

export interface NetworkProtocolsUpdateOneWithoutMasterProtocolInput {
  create?: NetworkProtocolsCreateWithoutMasterProtocolInput;
  update?: NetworkProtocolsUpdateWithoutMasterProtocolDataInput;
  upsert?: NetworkProtocolsUpsertWithoutMasterProtocolInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkProtocolsWhereUniqueInput;
}

export interface CompaniesCreateWithoutCompanyNetworkTypeLinksesInput {
  applicationses?: ApplicationsCreateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesCreateManyWithoutCompanyInput;
  type?: CompanyTypesCreateOneWithoutCompaniesesInput;
  userses?: UsersCreateManyWithoutCompanyInput;
}

export interface NetworkProtocolsUpdateWithoutMasterProtocolDataInput {
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksUpdateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface ApplicationsCreateWithoutCompanyInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutApplicationInput;
  baseUrl?: String;
  description?: String;
  deviceses?: DevicesCreateManyWithoutApplicationInput;
  name?: String;
  reportingProtocol?: ReportingProtocolsCreateOneWithoutApplicationsesInput;
}

export interface NetworkProtocolsUpdateManyWithoutNetworkProtocolsesInput {
  create?:
    | NetworkProtocolsCreateWithoutNetworkProtocolsesInput[]
    | NetworkProtocolsCreateWithoutNetworkProtocolsesInput;
  delete?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
  connect?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
  disconnect?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
  update?:
    | NetworkProtocolsUpdateWithWhereUniqueWithoutNetworkProtocolsesInput[]
    | NetworkProtocolsUpdateWithWhereUniqueWithoutNetworkProtocolsesInput;
  upsert?:
    | NetworkProtocolsUpsertWithWhereUniqueWithoutNetworkProtocolsesInput[]
    | NetworkProtocolsUpsertWithWhereUniqueWithoutNetworkProtocolsesInput;
  deleteMany?:
    | NetworkProtocolsScalarWhereInput[]
    | NetworkProtocolsScalarWhereInput;
  updateMany?:
    | NetworkProtocolsUpdateManyWithWhereNestedInput[]
    | NetworkProtocolsUpdateManyWithWhereNestedInput;
}

export interface DevicesCreateWithoutApplicationInput {
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutDeviceInput;
  name?: String;
}

export interface NetworkProtocolsUpdateWithWhereUniqueWithoutNetworkProtocolsesInput {
  where: NetworkProtocolsWhereUniqueInput;
  data: NetworkProtocolsUpdateWithoutNetworkProtocolsesDataInput;
}

export interface DeviceNetworkTypeLinksCreateWithoutDeviceInput {
  deviceProfile?: DeviceProfilesCreateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutDeviceNetworkTypeLinksesInput;
}

export interface NetworkProtocolsUpdateWithoutNetworkProtocolsesDataInput {
  masterProtocol?: NetworkProtocolsUpdateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolVersion?: String;
  networkses?: NetworksUpdateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface DeviceProfilesCreateWithoutDeviceNetworkTypeLinksesInput {
  company?: CompaniesCreateOneWithoutDeviceProfilesesInput;
  description?: String;
  name?: String;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutDeviceProfilesesInput;
}

export interface NetworksUpdateManyWithoutNetworkProtocolInput {
  create?:
    | NetworksCreateWithoutNetworkProtocolInput[]
    | NetworksCreateWithoutNetworkProtocolInput;
  delete?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  connect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  disconnect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  update?:
    | NetworksUpdateWithWhereUniqueWithoutNetworkProtocolInput[]
    | NetworksUpdateWithWhereUniqueWithoutNetworkProtocolInput;
  upsert?:
    | NetworksUpsertWithWhereUniqueWithoutNetworkProtocolInput[]
    | NetworksUpsertWithWhereUniqueWithoutNetworkProtocolInput;
  deleteMany?: NetworksScalarWhereInput[] | NetworksScalarWhereInput;
  updateMany?:
    | NetworksUpdateManyWithWhereNestedInput[]
    | NetworksUpdateManyWithWhereNestedInput;
}

export interface CompaniesCreateWithoutDeviceProfilesesInput {
  applicationses?: ApplicationsCreateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesCreateManyWithoutCompanyInput;
  type?: CompanyTypesCreateOneWithoutCompaniesesInput;
  userses?: UsersCreateManyWithoutCompanyInput;
}

export interface NetworksUpdateWithWhereUniqueWithoutNetworkProtocolInput {
  where: NetworksWhereUniqueInput;
  data: NetworksUpdateWithoutNetworkProtocolDataInput;
}

export interface PasswordPoliciesCreateWithoutCompanyInput {
  ruleRegExp?: String;
  ruleText?: String;
}

export interface NetworksUpdateWithoutNetworkProtocolDataInput {
  baseUrl?: String;
  name?: String;
  networkProvider?: NetworkProvidersUpdateOneWithoutNetworksesInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkInput;
  securityData?: String;
}

export interface CompanyTypesCreateWithoutCompaniesesInput {
  name?: String;
}

export interface NetworkProvidersUpdateOneWithoutNetworksesInput {
  create?: NetworkProvidersCreateWithoutNetworksesInput;
  update?: NetworkProvidersUpdateWithoutNetworksesDataInput;
  upsert?: NetworkProvidersUpsertWithoutNetworksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkProvidersWhereUniqueInput;
}

export interface UsersCreateWithoutCompanyInput {
  email?: String;
  emailVerificationses?: EmailVerificationsCreateManyWithoutUserInput;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  role?: UserRolesCreateOneWithoutUsersesInput;
  username?: String;
}

export interface NetworkProvidersUpdateWithoutNetworksesDataInput {
  name?: String;
}

export interface EmailVerificationsCreateWithoutUserInput {
  changeRequested?: String;
  email?: String;
  uuid?: String;
}

export interface NetworkProvidersUpsertWithoutNetworksesInput {
  update: NetworkProvidersUpdateWithoutNetworksesDataInput;
  create: NetworkProvidersCreateWithoutNetworksesInput;
}

export interface UserRolesCreateWithoutUsersesInput {
  name?: String;
}

export interface NetworkTypesUpdateOneWithoutNetworksesInput {
  create?: NetworkTypesCreateWithoutNetworksesInput;
  update?: NetworkTypesUpdateWithoutNetworksesDataInput;
  upsert?: NetworkTypesUpsertWithoutNetworksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface NetworkTypesCreateWithoutDeviceProfilesesInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkTypeInput;
  networkses?: NetworksCreateManyWithoutNetworkTypeInput;
}

export interface NetworkTypesUpdateWithoutNetworksesDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkTypeInput;
}

export interface NetworkProtocolsCreateWithoutNetworkTypeInput {
  masterProtocol?: NetworkProtocolsCreateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksCreateManyWithoutNetworkProtocolInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface DeviceProfilesUpdateManyWithoutNetworkTypeInput {
  create?:
    | DeviceProfilesCreateWithoutNetworkTypeInput[]
    | DeviceProfilesCreateWithoutNetworkTypeInput;
  delete?: DeviceProfilesWhereUniqueInput[] | DeviceProfilesWhereUniqueInput;
  connect?: DeviceProfilesWhereUniqueInput[] | DeviceProfilesWhereUniqueInput;
  disconnect?:
    | DeviceProfilesWhereUniqueInput[]
    | DeviceProfilesWhereUniqueInput;
  update?:
    | DeviceProfilesUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceProfilesUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | DeviceProfilesUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceProfilesUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | DeviceProfilesScalarWhereInput[]
    | DeviceProfilesScalarWhereInput;
  updateMany?:
    | DeviceProfilesUpdateManyWithWhereNestedInput[]
    | DeviceProfilesUpdateManyWithWhereNestedInput;
}

export interface NetworkProtocolsCreateWithoutMasterProtocolInput {
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksCreateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesCreateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface DeviceProfilesUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceProfilesWhereUniqueInput;
  data: DeviceProfilesUpdateWithoutNetworkTypeDataInput;
}

export interface NetworkProtocolsCreateWithoutNetworkProtocolsesInput {
  masterProtocol?: NetworkProtocolsCreateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolVersion?: String;
  networkses?: NetworksCreateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesCreateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface DeviceProfilesUpdateWithoutNetworkTypeDataInput {
  company?: CompaniesUpdateOneWithoutDeviceProfilesesInput;
  description?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutDeviceProfileInput;
  name?: String;
  networkSettings?: String;
}

export interface NetworksCreateWithoutNetworkProtocolInput {
  baseUrl?: String;
  name?: String;
  networkProvider?: NetworkProvidersCreateOneWithoutNetworksesInput;
  networkType?: NetworkTypesCreateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkInput;
  securityData?: String;
}

export interface DeviceNetworkTypeLinksUpdateManyWithoutDeviceProfileInput {
  create?:
    | DeviceNetworkTypeLinksCreateWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinksCreateWithoutDeviceProfileInput;
  delete?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  connect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
  update?:
    | DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutDeviceProfileInput;
  upsert?:
    | DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutDeviceProfileInput;
  deleteMany?:
    | DeviceNetworkTypeLinksScalarWhereInput[]
    | DeviceNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface NetworkProvidersCreateWithoutNetworksesInput {
  name?: String;
}

export interface DeviceNetworkTypeLinksUpdateWithWhereUniqueWithoutDeviceProfileInput {
  where: DeviceNetworkTypeLinksWhereUniqueInput;
  data: DeviceNetworkTypeLinksUpdateWithoutDeviceProfileDataInput;
}

export interface NetworkTypesCreateWithoutNetworksesInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkTypeInput;
}

export interface DeviceNetworkTypeLinksUpdateWithoutDeviceProfileDataInput {
  device?: DevicesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
}

export interface DeviceProfilesCreateWithoutNetworkTypeInput {
  company?: CompaniesCreateOneWithoutDeviceProfilesesInput;
  description?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutDeviceProfileInput;
  name?: String;
  networkSettings?: String;
}

export interface NetworkTypesUpdateOneWithoutDeviceNetworkTypeLinksesInput {
  create?: NetworkTypesCreateWithoutDeviceNetworkTypeLinksesInput;
  update?: NetworkTypesUpdateWithoutDeviceNetworkTypeLinksesDataInput;
  upsert?: NetworkTypesUpsertWithoutDeviceNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface DeviceNetworkTypeLinksCreateWithoutDeviceProfileInput {
  device?: DevicesCreateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutDeviceNetworkTypeLinksesInput;
}

export interface NetworkTypesUpdateWithoutDeviceNetworkTypeLinksesDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkTypeInput;
  networkses?: NetworksUpdateManyWithoutNetworkTypeInput;
}

export interface NetworkTypesCreateWithoutDeviceNetworkTypeLinksesInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkTypeInput;
  networkses?: NetworksCreateManyWithoutNetworkTypeInput;
}

export interface NetworksUpdateManyWithoutNetworkTypeInput {
  create?:
    | NetworksCreateWithoutNetworkTypeInput[]
    | NetworksCreateWithoutNetworkTypeInput;
  delete?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  connect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  disconnect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  update?:
    | NetworksUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworksUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | NetworksUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworksUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?: NetworksScalarWhereInput[] | NetworksScalarWhereInput;
  updateMany?:
    | NetworksUpdateManyWithWhereNestedInput[]
    | NetworksUpdateManyWithWhereNestedInput;
}

export interface NetworksCreateWithoutNetworkTypeInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsCreateOneWithoutNetworksesInput;
  networkProvider?: NetworkProvidersCreateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkInput;
  securityData?: String;
}

export interface NetworksUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworksWhereUniqueInput;
  data: NetworksUpdateWithoutNetworkTypeDataInput;
}

export interface NetworkProtocolsCreateWithoutNetworksesInput {
  masterProtocol?: NetworkProtocolsCreateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkType?: NetworkTypesCreateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface NetworksUpdateWithoutNetworkTypeDataInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsUpdateOneWithoutNetworksesInput;
  networkProvider?: NetworkProvidersUpdateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkInput;
  securityData?: String;
}

export interface NetworkTypesCreateWithoutNetworkProtocolsesInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutNetworkTypeInput;
  name?: String;
  networkses?: NetworksCreateManyWithoutNetworkTypeInput;
}

export interface NetworkProtocolsUpdateOneWithoutNetworksesInput {
  create?: NetworkProtocolsCreateWithoutNetworksesInput;
  update?: NetworkProtocolsUpdateWithoutNetworksesDataInput;
  upsert?: NetworkProtocolsUpsertWithoutNetworksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkProtocolsWhereUniqueInput;
}

export interface ProtocolDataCreateWithoutNetworkProtocolInput {
  dataIdentifier?: String;
  dataValue?: String;
  network?: NetworksCreateOneWithoutProtocolDatasInput;
}

export interface NetworkProtocolsUpdateWithoutNetworksesDataInput {
  masterProtocol?: NetworkProtocolsUpdateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkType?: NetworkTypesUpdateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface NetworksCreateWithoutProtocolDatasInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsCreateOneWithoutNetworksesInput;
  networkProvider?: NetworkProvidersCreateOneWithoutNetworksesInput;
  networkType?: NetworkTypesCreateOneWithoutNetworksesInput;
  securityData?: String;
}

export interface NetworkTypesUpdateOneWithoutNetworkProtocolsesInput {
  create?: NetworkTypesCreateWithoutNetworkProtocolsesInput;
  update?: NetworkTypesUpdateWithoutNetworkProtocolsesDataInput;
  upsert?: NetworkTypesUpsertWithoutNetworkProtocolsesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface ProtocolDataCreateWithoutNetworkInput {
  dataIdentifier?: String;
  dataValue?: String;
  networkProtocol?: NetworkProtocolsCreateOneWithoutProtocolDatasInput;
}

export interface NetworkTypesUpdateWithoutNetworkProtocolsesDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkses?: NetworksUpdateManyWithoutNetworkTypeInput;
}

export interface NetworkProtocolsCreateWithoutProtocolDatasInput {
  masterProtocol?: NetworkProtocolsCreateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksCreateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesCreateOneWithoutNetworkProtocolsesInput;
  protocolHandler?: String;
}

export interface NetworkTypesUpsertWithoutNetworkProtocolsesInput {
  update: NetworkTypesUpdateWithoutNetworkProtocolsesDataInput;
  create: NetworkTypesCreateWithoutNetworkProtocolsesInput;
}

export interface ReportingProtocolsCreateWithoutApplicationsesInput {
  name?: String;
  protocolHandler?: String;
}

export interface ProtocolDataUpdateManyWithoutNetworkProtocolInput {
  create?:
    | ProtocolDataCreateWithoutNetworkProtocolInput[]
    | ProtocolDataCreateWithoutNetworkProtocolInput;
  delete?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  disconnect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  update?:
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput[]
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput;
  upsert?:
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput[]
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput;
  deleteMany?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  updateMany?:
    | ProtocolDataUpdateManyWithWhereNestedInput[]
    | ProtocolDataUpdateManyWithWhereNestedInput;
}

export interface DeviceProfilesCreateWithoutCompanyInput {
  description?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutDeviceProfileInput;
  name?: String;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutDeviceProfilesesInput;
}

export interface ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput {
  where: ProtocolDataWhereUniqueInput;
  data: ProtocolDataUpdateWithoutNetworkProtocolDataInput;
}

export interface ApplicationsUpdateOneWithoutApplicationNetworkTypeLinksesInput {
  create?: ApplicationsCreateWithoutApplicationNetworkTypeLinksesInput;
  update?: ApplicationsUpdateWithoutApplicationNetworkTypeLinksesDataInput;
  upsert?: ApplicationsUpsertWithoutApplicationNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ApplicationsWhereUniqueInput;
}

export interface ProtocolDataUpdateWithoutNetworkProtocolDataInput {
  dataIdentifier?: String;
  dataValue?: String;
  network?: NetworksUpdateOneWithoutProtocolDatasInput;
}

export interface CompaniesUpdateOneWithoutApplicationsesInput {
  create?: CompaniesCreateWithoutApplicationsesInput;
  update?: CompaniesUpdateWithoutApplicationsesDataInput;
  upsert?: CompaniesUpsertWithoutApplicationsesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompaniesWhereUniqueInput;
}

export interface NetworksUpdateOneWithoutProtocolDatasInput {
  create?: NetworksCreateWithoutProtocolDatasInput;
  update?: NetworksUpdateWithoutProtocolDatasDataInput;
  upsert?: NetworksUpsertWithoutProtocolDatasInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworksWhereUniqueInput;
}

export interface CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput {
  create?:
    | CompanyNetworkTypeLinksCreateWithoutCompanyInput[]
    | CompanyNetworkTypeLinksCreateWithoutCompanyInput;
  delete?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
  connect?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
  update?:
    | CompanyNetworkTypeLinksUpdateWithWhereUniqueWithoutCompanyInput[]
    | CompanyNetworkTypeLinksUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | CompanyNetworkTypeLinksUpsertWithWhereUniqueWithoutCompanyInput[]
    | CompanyNetworkTypeLinksUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?:
    | CompanyNetworkTypeLinksScalarWhereInput[]
    | CompanyNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | CompanyNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | CompanyNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface NetworksUpdateWithoutProtocolDatasDataInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsUpdateOneWithoutNetworksesInput;
  networkProvider?: NetworkProvidersUpdateOneWithoutNetworksesInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworksesInput;
  securityData?: String;
}

export interface CompanyNetworkTypeLinksUpdateWithoutCompanyDataInput {
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutCompanyNetworkTypeLinksesInput;
}

export interface NetworksUpsertWithoutProtocolDatasInput {
  update: NetworksUpdateWithoutProtocolDatasDataInput;
  create: NetworksCreateWithoutProtocolDatasInput;
}

export interface NetworkTypesUpdateWithoutCompanyNetworkTypeLinksesDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkTypeInput;
  networkses?: NetworksUpdateManyWithoutNetworkTypeInput;
}

export interface ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput {
  where: ProtocolDataWhereUniqueInput;
  update: ProtocolDataUpdateWithoutNetworkProtocolDataInput;
  create: ProtocolDataCreateWithoutNetworkProtocolInput;
}

export interface ApplicationNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: ApplicationNetworkTypeLinksWhereUniqueInput;
  data: ApplicationNetworkTypeLinksUpdateWithoutNetworkTypeDataInput;
}

export interface ProtocolDataScalarWhereInput {
  dataIdentifier?: String;
  dataIdentifier_not?: String;
  dataIdentifier_in?: String[] | String;
  dataIdentifier_not_in?: String[] | String;
  dataIdentifier_lt?: String;
  dataIdentifier_lte?: String;
  dataIdentifier_gt?: String;
  dataIdentifier_gte?: String;
  dataIdentifier_contains?: String;
  dataIdentifier_not_contains?: String;
  dataIdentifier_starts_with?: String;
  dataIdentifier_not_starts_with?: String;
  dataIdentifier_ends_with?: String;
  dataIdentifier_not_ends_with?: String;
  dataValue?: String;
  dataValue_not?: String;
  dataValue_in?: String[] | String;
  dataValue_not_in?: String[] | String;
  dataValue_lt?: String;
  dataValue_lte?: String;
  dataValue_gt?: String;
  dataValue_gte?: String;
  dataValue_contains?: String;
  dataValue_not_contains?: String;
  dataValue_starts_with?: String;
  dataValue_not_starts_with?: String;
  dataValue_ends_with?: String;
  dataValue_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  OR?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  NOT?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
}

export interface UsersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UsersWhereInput;
  AND?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
  OR?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
  NOT?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
}

export interface ProtocolDataUpdateManyWithWhereNestedInput {
  where: ProtocolDataScalarWhereInput;
  data: ProtocolDataUpdateManyDataInput;
}

export interface ReportingProtocolsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReportingProtocolsWhereInput;
  AND?:
    | ReportingProtocolsSubscriptionWhereInput[]
    | ReportingProtocolsSubscriptionWhereInput;
  OR?:
    | ReportingProtocolsSubscriptionWhereInput[]
    | ReportingProtocolsSubscriptionWhereInput;
  NOT?:
    | ReportingProtocolsSubscriptionWhereInput[]
    | ReportingProtocolsSubscriptionWhereInput;
}

export interface ProtocolDataUpdateManyDataInput {
  dataIdentifier?: String;
  dataValue?: String;
}

export interface NetworksSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworksWhereInput;
  AND?: NetworksSubscriptionWhereInput[] | NetworksSubscriptionWhereInput;
  OR?: NetworksSubscriptionWhereInput[] | NetworksSubscriptionWhereInput;
  NOT?: NetworksSubscriptionWhereInput[] | NetworksSubscriptionWhereInput;
}

export interface NetworkProtocolsUpsertWithoutNetworksesInput {
  update: NetworkProtocolsUpdateWithoutNetworksesDataInput;
  create: NetworkProtocolsCreateWithoutNetworksesInput;
}

export interface NetworksWhereInput {
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkProtocol?: NetworkProtocolsWhereInput;
  networkProvider?: NetworkProvidersWhereInput;
  networkType?: NetworkTypesWhereInput;
  protocolDatas_every?: ProtocolDataWhereInput;
  protocolDatas_some?: ProtocolDataWhereInput;
  protocolDatas_none?: ProtocolDataWhereInput;
  securityData?: String;
  securityData_not?: String;
  securityData_in?: String[] | String;
  securityData_not_in?: String[] | String;
  securityData_lt?: String;
  securityData_lte?: String;
  securityData_gt?: String;
  securityData_gte?: String;
  securityData_contains?: String;
  securityData_not_contains?: String;
  securityData_starts_with?: String;
  securityData_not_starts_with?: String;
  securityData_ends_with?: String;
  securityData_not_ends_with?: String;
  AND?: NetworksWhereInput[] | NetworksWhereInput;
  OR?: NetworksWhereInput[] | NetworksWhereInput;
  NOT?: NetworksWhereInput[] | NetworksWhereInput;
}

export interface ProtocolDataUpdateManyWithoutNetworkInput {
  create?:
    | ProtocolDataCreateWithoutNetworkInput[]
    | ProtocolDataCreateWithoutNetworkInput;
  delete?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  disconnect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  update?:
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput[]
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput;
  upsert?:
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput[]
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput;
  deleteMany?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  updateMany?:
    | ProtocolDataUpdateManyWithWhereNestedInput[]
    | ProtocolDataUpdateManyWithWhereNestedInput;
}

export interface EmailVerificationsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmailVerificationsWhereInput;
  AND?:
    | EmailVerificationsSubscriptionWhereInput[]
    | EmailVerificationsSubscriptionWhereInput;
  OR?:
    | EmailVerificationsSubscriptionWhereInput[]
    | EmailVerificationsSubscriptionWhereInput;
  NOT?:
    | EmailVerificationsSubscriptionWhereInput[]
    | EmailVerificationsSubscriptionWhereInput;
}

export interface ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput {
  where: ProtocolDataWhereUniqueInput;
  data: ProtocolDataUpdateWithoutNetworkDataInput;
}

export interface DevicesWhereInput {
  application?: ApplicationsWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deviceModel?: String;
  deviceModel_not?: String;
  deviceModel_in?: String[] | String;
  deviceModel_not_in?: String[] | String;
  deviceModel_lt?: String;
  deviceModel_lte?: String;
  deviceModel_gt?: String;
  deviceModel_gte?: String;
  deviceModel_contains?: String;
  deviceModel_not_contains?: String;
  deviceModel_starts_with?: String;
  deviceModel_not_starts_with?: String;
  deviceModel_ends_with?: String;
  deviceModel_not_ends_with?: String;
  deviceNetworkTypeLinkses_every?: DeviceNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_some?: DeviceNetworkTypeLinksWhereInput;
  deviceNetworkTypeLinkses_none?: DeviceNetworkTypeLinksWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: DevicesWhereInput[] | DevicesWhereInput;
  OR?: DevicesWhereInput[] | DevicesWhereInput;
  NOT?: DevicesWhereInput[] | DevicesWhereInput;
}

export interface ProtocolDataUpdateWithoutNetworkDataInput {
  dataIdentifier?: String;
  dataValue?: String;
  networkProtocol?: NetworkProtocolsUpdateOneWithoutProtocolDatasInput;
}

export interface CompanyTypesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyTypesWhereInput;
  AND?:
    | CompanyTypesSubscriptionWhereInput[]
    | CompanyTypesSubscriptionWhereInput;
  OR?:
    | CompanyTypesSubscriptionWhereInput[]
    | CompanyTypesSubscriptionWhereInput;
  NOT?:
    | CompanyTypesSubscriptionWhereInput[]
    | CompanyTypesSubscriptionWhereInput;
}

export interface NetworkProtocolsUpdateOneWithoutProtocolDatasInput {
  create?: NetworkProtocolsCreateWithoutProtocolDatasInput;
  update?: NetworkProtocolsUpdateWithoutProtocolDatasDataInput;
  upsert?: NetworkProtocolsUpsertWithoutProtocolDatasInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkProtocolsWhereUniqueInput;
}

export interface ApplicationsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ApplicationsWhereInput;
  AND?:
    | ApplicationsSubscriptionWhereInput[]
    | ApplicationsSubscriptionWhereInput;
  OR?:
    | ApplicationsSubscriptionWhereInput[]
    | ApplicationsSubscriptionWhereInput;
  NOT?:
    | ApplicationsSubscriptionWhereInput[]
    | ApplicationsSubscriptionWhereInput;
}

export interface NetworkProtocolsUpdateWithoutProtocolDatasDataInput {
  masterProtocol?: NetworkProtocolsUpdateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksUpdateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworkProtocolsesInput;
  protocolHandler?: String;
}

export type ApplicationsWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworkProtocolsUpsertWithoutProtocolDatasInput {
  update: NetworkProtocolsUpdateWithoutProtocolDatasDataInput;
  create: NetworkProtocolsCreateWithoutProtocolDatasInput;
}

export type CompaniesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput {
  where: ProtocolDataWhereUniqueInput;
  update: ProtocolDataUpdateWithoutNetworkDataInput;
  create: ProtocolDataCreateWithoutNetworkInput;
}

export type CompanyNetworkTypeLinksWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworksUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworksWhereUniqueInput;
  update: NetworksUpdateWithoutNetworkTypeDataInput;
  create: NetworksCreateWithoutNetworkTypeInput;
}

export type CompanyTypesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworksScalarWhereInput {
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  securityData?: String;
  securityData_not?: String;
  securityData_in?: String[] | String;
  securityData_not_in?: String[] | String;
  securityData_lt?: String;
  securityData_lte?: String;
  securityData_gt?: String;
  securityData_gte?: String;
  securityData_contains?: String;
  securityData_not_contains?: String;
  securityData_starts_with?: String;
  securityData_not_starts_with?: String;
  securityData_ends_with?: String;
  securityData_not_ends_with?: String;
  AND?: NetworksScalarWhereInput[] | NetworksScalarWhereInput;
  OR?: NetworksScalarWhereInput[] | NetworksScalarWhereInput;
  NOT?: NetworksScalarWhereInput[] | NetworksScalarWhereInput;
}

export interface ApplicationsUpsertWithWhereUniqueWithoutReportingProtocolInput {
  where: ApplicationsWhereUniqueInput;
  update: ApplicationsUpdateWithoutReportingProtocolDataInput;
  create: ApplicationsCreateWithoutReportingProtocolInput;
}

export interface NetworksUpdateManyWithWhereNestedInput {
  where: NetworksScalarWhereInput;
  data: NetworksUpdateManyDataInput;
}

export interface ApplicationsUpdateManyWithoutReportingProtocolInput {
  create?:
    | ApplicationsCreateWithoutReportingProtocolInput[]
    | ApplicationsCreateWithoutReportingProtocolInput;
  delete?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
  connect?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
  disconnect?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
  update?:
    | ApplicationsUpdateWithWhereUniqueWithoutReportingProtocolInput[]
    | ApplicationsUpdateWithWhereUniqueWithoutReportingProtocolInput;
  upsert?:
    | ApplicationsUpsertWithWhereUniqueWithoutReportingProtocolInput[]
    | ApplicationsUpsertWithWhereUniqueWithoutReportingProtocolInput;
  deleteMany?: ApplicationsScalarWhereInput[] | ApplicationsScalarWhereInput;
  updateMany?:
    | ApplicationsUpdateManyWithWhereNestedInput[]
    | ApplicationsUpdateManyWithWhereNestedInput;
}

export interface NetworksUpdateManyDataInput {
  baseUrl?: String;
  name?: String;
  securityData?: String;
}

export interface ApplicationsCreateManyWithoutReportingProtocolInput {
  create?:
    | ApplicationsCreateWithoutReportingProtocolInput[]
    | ApplicationsCreateWithoutReportingProtocolInput;
  connect?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
}

export interface NetworkTypesUpsertWithoutDeviceNetworkTypeLinksesInput {
  update: NetworkTypesUpdateWithoutDeviceNetworkTypeLinksesDataInput;
  create: NetworkTypesCreateWithoutDeviceNetworkTypeLinksesInput;
}

export interface ProtocolDataUpdateInput {
  dataIdentifier?: String;
  dataValue?: String;
  network?: NetworksUpdateOneWithoutProtocolDatasInput;
  networkProtocol?: NetworkProtocolsUpdateOneWithoutProtocolDatasInput;
}

export interface DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutDeviceProfileInput {
  where: DeviceNetworkTypeLinksWhereUniqueInput;
  update: DeviceNetworkTypeLinksUpdateWithoutDeviceProfileDataInput;
  create: DeviceNetworkTypeLinksCreateWithoutDeviceProfileInput;
}

export interface CompaniesUpsertWithoutPasswordPoliciesesInput {
  update: CompaniesUpdateWithoutPasswordPoliciesesDataInput;
  create: CompaniesCreateWithoutPasswordPoliciesesInput;
}

export interface DeviceNetworkTypeLinksScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | DeviceNetworkTypeLinksScalarWhereInput[]
    | DeviceNetworkTypeLinksScalarWhereInput;
  OR?:
    | DeviceNetworkTypeLinksScalarWhereInput[]
    | DeviceNetworkTypeLinksScalarWhereInput;
  NOT?:
    | DeviceNetworkTypeLinksScalarWhereInput[]
    | DeviceNetworkTypeLinksScalarWhereInput;
}

export interface PasswordPoliciesUpdateInput {
  company?: CompaniesUpdateOneWithoutPasswordPoliciesesInput;
  ruleRegExp?: String;
  ruleText?: String;
}

export interface DeviceNetworkTypeLinksUpdateManyWithWhereNestedInput {
  where: DeviceNetworkTypeLinksScalarWhereInput;
  data: DeviceNetworkTypeLinksUpdateManyDataInput;
}

export interface PasswordPoliciesCreateInput {
  company?: CompaniesCreateOneWithoutPasswordPoliciesesInput;
  ruleRegExp?: String;
  ruleText?: String;
}

export interface DeviceNetworkTypeLinksUpdateManyDataInput {
  networkSettings?: String;
}

export interface NetworksUpdateInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsUpdateOneWithoutNetworksesInput;
  networkProvider?: NetworkProvidersUpdateOneWithoutNetworksesInput;
  networkType?: NetworkTypesUpdateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataUpdateManyWithoutNetworkInput;
  securityData?: String;
}

export interface DeviceProfilesUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceProfilesWhereUniqueInput;
  update: DeviceProfilesUpdateWithoutNetworkTypeDataInput;
  create: DeviceProfilesCreateWithoutNetworkTypeInput;
}

export interface NetworkTypesUpdateInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutNetworkTypeInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutNetworkTypeInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsUpdateManyWithoutNetworkTypeInput;
  networkses?: NetworksUpdateManyWithoutNetworkTypeInput;
}

export interface DeviceProfilesScalarWhereInput {
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?: DeviceProfilesScalarWhereInput[] | DeviceProfilesScalarWhereInput;
  OR?: DeviceProfilesScalarWhereInput[] | DeviceProfilesScalarWhereInput;
  NOT?: DeviceProfilesScalarWhereInput[] | DeviceProfilesScalarWhereInput;
}

export interface NetworksUpsertWithWhereUniqueWithoutNetworkProviderInput {
  where: NetworksWhereUniqueInput;
  update: NetworksUpdateWithoutNetworkProviderDataInput;
  create: NetworksCreateWithoutNetworkProviderInput;
}

export interface DeviceProfilesUpdateManyWithWhereNestedInput {
  where: DeviceProfilesScalarWhereInput;
  data: DeviceProfilesUpdateManyDataInput;
}

export interface NetworksUpdateManyWithoutNetworkProviderInput {
  create?:
    | NetworksCreateWithoutNetworkProviderInput[]
    | NetworksCreateWithoutNetworkProviderInput;
  delete?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  connect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  disconnect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
  update?:
    | NetworksUpdateWithWhereUniqueWithoutNetworkProviderInput[]
    | NetworksUpdateWithWhereUniqueWithoutNetworkProviderInput;
  upsert?:
    | NetworksUpsertWithWhereUniqueWithoutNetworkProviderInput[]
    | NetworksUpsertWithWhereUniqueWithoutNetworkProviderInput;
  deleteMany?: NetworksScalarWhereInput[] | NetworksScalarWhereInput;
  updateMany?:
    | NetworksUpdateManyWithWhereNestedInput[]
    | NetworksUpdateManyWithWhereNestedInput;
}

export interface DeviceProfilesUpdateManyDataInput {
  description?: String;
  name?: String;
  networkSettings?: String;
}

export interface ApplicationNetworkTypeLinksWhereInput {
  application?: ApplicationsWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  networkType?: NetworkTypesWhereInput;
  AND?:
    | ApplicationNetworkTypeLinksWhereInput[]
    | ApplicationNetworkTypeLinksWhereInput;
  OR?:
    | ApplicationNetworkTypeLinksWhereInput[]
    | ApplicationNetworkTypeLinksWhereInput;
  NOT?:
    | ApplicationNetworkTypeLinksWhereInput[]
    | ApplicationNetworkTypeLinksWhereInput;
}

export interface NetworkTypesUpsertWithoutNetworksesInput {
  update: NetworkTypesUpdateWithoutNetworksesDataInput;
  create: NetworkTypesCreateWithoutNetworksesInput;
}

export type UserRolesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworksUpsertWithWhereUniqueWithoutNetworkProtocolInput {
  where: NetworksWhereUniqueInput;
  update: NetworksUpdateWithoutNetworkProtocolDataInput;
  create: NetworksCreateWithoutNetworkProtocolInput;
}

export interface UsersUpsertWithoutEmailVerificationsesInput {
  update: UsersUpdateWithoutEmailVerificationsesDataInput;
  create: UsersCreateWithoutEmailVerificationsesInput;
}

export interface NetworkProtocolsUpsertWithWhereUniqueWithoutNetworkProtocolsesInput {
  where: NetworkProtocolsWhereUniqueInput;
  update: NetworkProtocolsUpdateWithoutNetworkProtocolsesDataInput;
  create: NetworkProtocolsCreateWithoutNetworkProtocolsesInput;
}

export interface CompaniesUpdateOneWithoutUsersesInput {
  create?: CompaniesCreateWithoutUsersesInput;
  update?: CompaniesUpdateWithoutUsersesDataInput;
  upsert?: CompaniesUpsertWithoutUsersesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompaniesWhereUniqueInput;
}

export interface NetworkProtocolsScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkProtocolVersion?: String;
  networkProtocolVersion_not?: String;
  networkProtocolVersion_in?: String[] | String;
  networkProtocolVersion_not_in?: String[] | String;
  networkProtocolVersion_lt?: String;
  networkProtocolVersion_lte?: String;
  networkProtocolVersion_gt?: String;
  networkProtocolVersion_gte?: String;
  networkProtocolVersion_contains?: String;
  networkProtocolVersion_not_contains?: String;
  networkProtocolVersion_starts_with?: String;
  networkProtocolVersion_not_starts_with?: String;
  networkProtocolVersion_ends_with?: String;
  networkProtocolVersion_not_ends_with?: String;
  protocolHandler?: String;
  protocolHandler_not?: String;
  protocolHandler_in?: String[] | String;
  protocolHandler_not_in?: String[] | String;
  protocolHandler_lt?: String;
  protocolHandler_lte?: String;
  protocolHandler_gt?: String;
  protocolHandler_gte?: String;
  protocolHandler_contains?: String;
  protocolHandler_not_contains?: String;
  protocolHandler_starts_with?: String;
  protocolHandler_not_starts_with?: String;
  protocolHandler_ends_with?: String;
  protocolHandler_not_ends_with?: String;
  AND?: NetworkProtocolsScalarWhereInput[] | NetworkProtocolsScalarWhereInput;
  OR?: NetworkProtocolsScalarWhereInput[] | NetworkProtocolsScalarWhereInput;
  NOT?: NetworkProtocolsScalarWhereInput[] | NetworkProtocolsScalarWhereInput;
}

export interface ApplicationsCreateOneWithoutApplicationNetworkTypeLinksesInput {
  create?: ApplicationsCreateWithoutApplicationNetworkTypeLinksesInput;
  connect?: ApplicationsWhereUniqueInput;
}

export interface NetworkProtocolsUpdateManyWithWhereNestedInput {
  where: NetworkProtocolsScalarWhereInput;
  data: NetworkProtocolsUpdateManyDataInput;
}

export interface CompanyNetworkTypeLinksCreateManyWithoutCompanyInput {
  create?:
    | CompanyNetworkTypeLinksCreateWithoutCompanyInput[]
    | CompanyNetworkTypeLinksCreateWithoutCompanyInput;
  connect?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
}

export interface NetworkProtocolsUpdateManyDataInput {
  name?: String;
  networkProtocolVersion?: String;
  protocolHandler?: String;
}

export interface ApplicationNetworkTypeLinksCreateManyWithoutNetworkTypeInput {
  create?:
    | ApplicationNetworkTypeLinksCreateWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinksCreateWithoutNetworkTypeInput;
  connect?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
}

export interface NetworkProtocolsUpsertWithoutMasterProtocolInput {
  update: NetworkProtocolsUpdateWithoutMasterProtocolDataInput;
  create: NetworkProtocolsCreateWithoutMasterProtocolInput;
}

export interface DevicesCreateOneWithoutDeviceNetworkTypeLinksesInput {
  create?: DevicesCreateWithoutDeviceNetworkTypeLinksesInput;
  connect?: DevicesWhereUniqueInput;
}

export interface NetworkProtocolsUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkProtocolsWhereUniqueInput;
  update: NetworkProtocolsUpdateWithoutNetworkTypeDataInput;
  create: NetworkProtocolsCreateWithoutNetworkTypeInput;
}

export interface ApplicationNetworkTypeLinksCreateManyWithoutApplicationInput {
  create?:
    | ApplicationNetworkTypeLinksCreateWithoutApplicationInput[]
    | ApplicationNetworkTypeLinksCreateWithoutApplicationInput;
  connect?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
}

export interface NetworkTypesUpsertWithoutDeviceProfilesesInput {
  update: NetworkTypesUpdateWithoutDeviceProfilesesDataInput;
  create: NetworkTypesCreateWithoutDeviceProfilesesInput;
}

export interface CompanyNetworkTypeLinksCreateManyWithoutNetworkTypeInput {
  create?:
    | CompanyNetworkTypeLinksCreateWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinksCreateWithoutNetworkTypeInput;
  connect?:
    | CompanyNetworkTypeLinksWhereUniqueInput[]
    | CompanyNetworkTypeLinksWhereUniqueInput;
}

export interface DeviceProfilesUpsertWithoutDeviceNetworkTypeLinksesInput {
  update: DeviceProfilesUpdateWithoutDeviceNetworkTypeLinksesDataInput;
  create: DeviceProfilesCreateWithoutDeviceNetworkTypeLinksesInput;
}

export interface ApplicationsCreateManyWithoutCompanyInput {
  create?:
    | ApplicationsCreateWithoutCompanyInput[]
    | ApplicationsCreateWithoutCompanyInput;
  connect?: ApplicationsWhereUniqueInput[] | ApplicationsWhereUniqueInput;
}

export interface DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutDeviceInput {
  where: DeviceNetworkTypeLinksWhereUniqueInput;
  update: DeviceNetworkTypeLinksUpdateWithoutDeviceDataInput;
  create: DeviceNetworkTypeLinksCreateWithoutDeviceInput;
}

export interface DeviceNetworkTypeLinksCreateManyWithoutDeviceInput {
  create?:
    | DeviceNetworkTypeLinksCreateWithoutDeviceInput[]
    | DeviceNetworkTypeLinksCreateWithoutDeviceInput;
  connect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
}

export interface DevicesUpsertWithWhereUniqueWithoutApplicationInput {
  where: DevicesWhereUniqueInput;
  update: DevicesUpdateWithoutApplicationDataInput;
  create: DevicesCreateWithoutApplicationInput;
}

export interface CompaniesCreateOneWithoutDeviceProfilesesInput {
  create?: CompaniesCreateWithoutDeviceProfilesesInput;
  connect?: CompaniesWhereUniqueInput;
}

export interface DevicesScalarWhereInput {
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deviceModel?: String;
  deviceModel_not?: String;
  deviceModel_in?: String[] | String;
  deviceModel_not_in?: String[] | String;
  deviceModel_lt?: String;
  deviceModel_lte?: String;
  deviceModel_gt?: String;
  deviceModel_gte?: String;
  deviceModel_contains?: String;
  deviceModel_not_contains?: String;
  deviceModel_starts_with?: String;
  deviceModel_not_starts_with?: String;
  deviceModel_ends_with?: String;
  deviceModel_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: DevicesScalarWhereInput[] | DevicesScalarWhereInput;
  OR?: DevicesScalarWhereInput[] | DevicesScalarWhereInput;
  NOT?: DevicesScalarWhereInput[] | DevicesScalarWhereInput;
}

export interface CompanyTypesCreateOneWithoutCompaniesesInput {
  create?: CompanyTypesCreateWithoutCompaniesesInput;
  connect?: CompanyTypesWhereUniqueInput;
}

export interface DevicesUpdateManyWithWhereNestedInput {
  where: DevicesScalarWhereInput;
  data: DevicesUpdateManyDataInput;
}

export interface EmailVerificationsCreateManyWithoutUserInput {
  create?:
    | EmailVerificationsCreateWithoutUserInput[]
    | EmailVerificationsCreateWithoutUserInput;
  connect?:
    | EmailVerificationsWhereUniqueInput[]
    | EmailVerificationsWhereUniqueInput;
}

export interface DevicesUpdateManyDataInput {
  description?: String;
  deviceModel?: String;
  name?: String;
}

export interface NetworkTypesCreateOneWithoutDeviceProfilesesInput {
  create?: NetworkTypesCreateWithoutDeviceProfilesesInput;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface ReportingProtocolsUpdateOneWithoutApplicationsesInput {
  create?: ReportingProtocolsCreateWithoutApplicationsesInput;
  update?: ReportingProtocolsUpdateWithoutApplicationsesDataInput;
  upsert?: ReportingProtocolsUpsertWithoutApplicationsesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ReportingProtocolsWhereUniqueInput;
}

export interface NetworkProtocolsCreateOneWithoutMasterProtocolInput {
  create?: NetworkProtocolsCreateWithoutMasterProtocolInput;
  connect?: NetworkProtocolsWhereUniqueInput;
}

export interface ReportingProtocolsUpdateWithoutApplicationsesDataInput {
  name?: String;
  protocolHandler?: String;
}

export interface NetworksCreateManyWithoutNetworkProtocolInput {
  create?:
    | NetworksCreateWithoutNetworkProtocolInput[]
    | NetworksCreateWithoutNetworkProtocolInput;
  connect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
}

export interface ReportingProtocolsUpsertWithoutApplicationsesInput {
  update: ReportingProtocolsUpdateWithoutApplicationsesDataInput;
  create: ReportingProtocolsCreateWithoutApplicationsesInput;
}

export interface NetworkTypesCreateOneWithoutNetworksesInput {
  create?: NetworkTypesCreateWithoutNetworksesInput;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface ApplicationsUpsertWithWhereUniqueWithoutCompanyInput {
  where: ApplicationsWhereUniqueInput;
  update: ApplicationsUpdateWithoutCompanyDataInput;
  create: ApplicationsCreateWithoutCompanyInput;
}

export interface DeviceNetworkTypeLinksCreateManyWithoutDeviceProfileInput {
  create?:
    | DeviceNetworkTypeLinksCreateWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinksCreateWithoutDeviceProfileInput;
  connect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
}

export interface ApplicationsScalarWhereInput {
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ApplicationsScalarWhereInput[] | ApplicationsScalarWhereInput;
  OR?: ApplicationsScalarWhereInput[] | ApplicationsScalarWhereInput;
  NOT?: ApplicationsScalarWhereInput[] | ApplicationsScalarWhereInput;
}

export interface NetworksCreateManyWithoutNetworkTypeInput {
  create?:
    | NetworksCreateWithoutNetworkTypeInput[]
    | NetworksCreateWithoutNetworkTypeInput;
  connect?: NetworksWhereUniqueInput[] | NetworksWhereUniqueInput;
}

export interface ApplicationsUpdateManyWithWhereNestedInput {
  where: ApplicationsScalarWhereInput;
  data: ApplicationsUpdateManyDataInput;
}

export interface NetworkTypesCreateOneWithoutNetworkProtocolsesInput {
  create?: NetworkTypesCreateWithoutNetworkProtocolsesInput;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface ApplicationsUpdateManyDataInput {
  baseUrl?: String;
  description?: String;
  name?: String;
}

export interface NetworksCreateOneWithoutProtocolDatasInput {
  create?: NetworksCreateWithoutProtocolDatasInput;
  connect?: NetworksWhereUniqueInput;
}

export interface DeviceProfilesUpdateManyWithoutCompanyInput {
  create?:
    | DeviceProfilesCreateWithoutCompanyInput[]
    | DeviceProfilesCreateWithoutCompanyInput;
  delete?: DeviceProfilesWhereUniqueInput[] | DeviceProfilesWhereUniqueInput;
  connect?: DeviceProfilesWhereUniqueInput[] | DeviceProfilesWhereUniqueInput;
  disconnect?:
    | DeviceProfilesWhereUniqueInput[]
    | DeviceProfilesWhereUniqueInput;
  update?:
    | DeviceProfilesUpdateWithWhereUniqueWithoutCompanyInput[]
    | DeviceProfilesUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | DeviceProfilesUpsertWithWhereUniqueWithoutCompanyInput[]
    | DeviceProfilesUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?:
    | DeviceProfilesScalarWhereInput[]
    | DeviceProfilesScalarWhereInput;
  updateMany?:
    | DeviceProfilesUpdateManyWithWhereNestedInput[]
    | DeviceProfilesUpdateManyWithWhereNestedInput;
}

export interface NetworkProtocolsCreateOneWithoutProtocolDatasInput {
  create?: NetworkProtocolsCreateWithoutProtocolDatasInput;
  connect?: NetworkProtocolsWhereUniqueInput;
}

export interface DeviceProfilesUpdateWithWhereUniqueWithoutCompanyInput {
  where: DeviceProfilesWhereUniqueInput;
  data: DeviceProfilesUpdateWithoutCompanyDataInput;
}

export interface DeviceProfilesCreateManyWithoutCompanyInput {
  create?:
    | DeviceProfilesCreateWithoutCompanyInput[]
    | DeviceProfilesCreateWithoutCompanyInput;
  connect?: DeviceProfilesWhereUniqueInput[] | DeviceProfilesWhereUniqueInput;
}

export interface DeviceProfilesUpdateWithoutCompanyDataInput {
  description?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutDeviceProfileInput;
  name?: String;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutDeviceProfilesesInput;
}

export interface ApplicationsUpdateWithoutApplicationNetworkTypeLinksesDataInput {
  baseUrl?: String;
  company?: CompaniesUpdateOneWithoutApplicationsesInput;
  description?: String;
  deviceses?: DevicesUpdateManyWithoutApplicationInput;
  name?: String;
  reportingProtocol?: ReportingProtocolsUpdateOneWithoutApplicationsesInput;
}

export interface DeviceProfilesUpsertWithWhereUniqueWithoutCompanyInput {
  where: DeviceProfilesWhereUniqueInput;
  update: DeviceProfilesUpdateWithoutCompanyDataInput;
  create: DeviceProfilesCreateWithoutCompanyInput;
}

export interface CompanyNetworkTypeLinksUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyNetworkTypeLinksWhereUniqueInput;
  data: CompanyNetworkTypeLinksUpdateWithoutCompanyDataInput;
}

export interface CompaniesUpsertWithoutCompanyNetworkTypeLinksesInput {
  update: CompaniesUpdateWithoutCompanyNetworkTypeLinksesDataInput;
  create: CompaniesCreateWithoutCompanyNetworkTypeLinksesInput;
}

export interface ApplicationNetworkTypeLinksUpdateManyWithoutNetworkTypeInput {
  create?:
    | ApplicationNetworkTypeLinksCreateWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinksCreateWithoutNetworkTypeInput;
  delete?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
  connect?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
  disconnect?:
    | ApplicationNetworkTypeLinksWhereUniqueInput[]
    | ApplicationNetworkTypeLinksWhereUniqueInput;
  update?:
    | ApplicationNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinksUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | ApplicationNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | ApplicationNetworkTypeLinksScalarWhereInput[]
    | ApplicationNetworkTypeLinksScalarWhereInput;
  updateMany?:
    | ApplicationNetworkTypeLinksUpdateManyWithWhereNestedInput[]
    | ApplicationNetworkTypeLinksUpdateManyWithWhereNestedInput;
}

export interface CompanyNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: CompanyNetworkTypeLinksWhereUniqueInput;
  update: CompanyNetworkTypeLinksUpdateWithoutNetworkTypeDataInput;
  create: CompanyNetworkTypeLinksCreateWithoutNetworkTypeInput;
}

export interface CompanyTypesWhereInput {
  companieses_every?: CompaniesWhereInput;
  companieses_some?: CompaniesWhereInput;
  companieses_none?: CompaniesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CompanyTypesWhereInput[] | CompanyTypesWhereInput;
  OR?: CompanyTypesWhereInput[] | CompanyTypesWhereInput;
  NOT?: CompanyTypesWhereInput[] | CompanyTypesWhereInput;
}

export interface CompanyNetworkTypeLinksScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | CompanyNetworkTypeLinksScalarWhereInput[]
    | CompanyNetworkTypeLinksScalarWhereInput;
  OR?:
    | CompanyNetworkTypeLinksScalarWhereInput[]
    | CompanyNetworkTypeLinksScalarWhereInput;
  NOT?:
    | CompanyNetworkTypeLinksScalarWhereInput[]
    | CompanyNetworkTypeLinksScalarWhereInput;
}

export interface NetworkProvidersWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkses_every?: NetworksWhereInput;
  networkses_some?: NetworksWhereInput;
  networkses_none?: NetworksWhereInput;
  AND?: NetworkProvidersWhereInput[] | NetworkProvidersWhereInput;
  OR?: NetworkProvidersWhereInput[] | NetworkProvidersWhereInput;
  NOT?: NetworkProvidersWhereInput[] | NetworkProvidersWhereInput;
}

export interface CompanyNetworkTypeLinksUpdateManyWithWhereNestedInput {
  where: CompanyNetworkTypeLinksScalarWhereInput;
  data: CompanyNetworkTypeLinksUpdateManyDataInput;
}

export interface DevicesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DevicesWhereInput;
  AND?: DevicesSubscriptionWhereInput[] | DevicesSubscriptionWhereInput;
  OR?: DevicesSubscriptionWhereInput[] | DevicesSubscriptionWhereInput;
  NOT?: DevicesSubscriptionWhereInput[] | DevicesSubscriptionWhereInput;
}

export interface CompanyNetworkTypeLinksUpdateManyDataInput {
  networkSettings?: String;
}

export interface CompanyNetworkTypeLinksWhereInput {
  company?: CompaniesWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  networkType?: NetworkTypesWhereInput;
  AND?: CompanyNetworkTypeLinksWhereInput[] | CompanyNetworkTypeLinksWhereInput;
  OR?: CompanyNetworkTypeLinksWhereInput[] | CompanyNetworkTypeLinksWhereInput;
  NOT?: CompanyNetworkTypeLinksWhereInput[] | CompanyNetworkTypeLinksWhereInput;
}

export interface NetworkTypesUpsertWithoutApplicationNetworkTypeLinksesInput {
  update: NetworkTypesUpdateWithoutApplicationNetworkTypeLinksesDataInput;
  create: NetworkTypesCreateWithoutApplicationNetworkTypeLinksesInput;
}

export interface UserRolesUpdateManyMutationInput {
  name?: String;
}

export interface ApplicationNetworkTypeLinksUpsertWithWhereUniqueWithoutApplicationInput {
  where: ApplicationNetworkTypeLinksWhereUniqueInput;
  update: ApplicationNetworkTypeLinksUpdateWithoutApplicationDataInput;
  create: ApplicationNetworkTypeLinksCreateWithoutApplicationInput;
}

export interface UsersCreateWithoutRoleInput {
  company?: CompaniesCreateOneWithoutUsersesInput;
  email?: String;
  emailVerificationses?: EmailVerificationsCreateManyWithoutUserInput;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  username?: String;
}

export interface ApplicationsUpsertWithoutDevicesesInput {
  update: ApplicationsUpdateWithoutDevicesesDataInput;
  create: ApplicationsCreateWithoutDevicesesInput;
}

export interface ApplicationsUpdateWithoutReportingProtocolDataInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutApplicationInput;
  baseUrl?: String;
  company?: CompaniesUpdateOneWithoutApplicationsesInput;
  description?: String;
  deviceses?: DevicesUpdateManyWithoutApplicationInput;
  name?: String;
}

export interface DevicesUpsertWithoutDeviceNetworkTypeLinksesInput {
  update: DevicesUpdateWithoutDeviceNetworkTypeLinksesDataInput;
  create: DevicesCreateWithoutDeviceNetworkTypeLinksesInput;
}

export interface ReportingProtocolsCreateInput {
  applicationses?: ApplicationsCreateManyWithoutReportingProtocolInput;
  name?: String;
  protocolHandler?: String;
}

export interface DeviceNetworkTypeLinksUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceNetworkTypeLinksWhereUniqueInput;
  update: DeviceNetworkTypeLinksUpdateWithoutNetworkTypeDataInput;
  create: DeviceNetworkTypeLinksCreateWithoutNetworkTypeInput;
}

export interface CompaniesUpdateWithoutPasswordPoliciesesDataInput {
  applicationses?: ApplicationsUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutCompanyInput;
  name?: String;
  type?: CompanyTypesUpdateOneWithoutCompaniesesInput;
  userses?: UsersUpdateManyWithoutCompanyInput;
}

export interface NetworkTypesUpsertWithoutCompanyNetworkTypeLinksesInput {
  update: NetworkTypesUpdateWithoutCompanyNetworkTypeLinksesDataInput;
  create: NetworkTypesCreateWithoutCompanyNetworkTypeLinksesInput;
}

export type NetworkTypesWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CompanyNetworkTypeLinksUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyNetworkTypeLinksWhereUniqueInput;
  update: CompanyNetworkTypeLinksUpdateWithoutCompanyDataInput;
  create: CompanyNetworkTypeLinksCreateWithoutCompanyInput;
}

export interface NetworkProvidersUpdateManyMutationInput {
  name?: String;
}

export interface CompaniesUpsertWithoutApplicationsesInput {
  update: CompaniesUpdateWithoutApplicationsesDataInput;
  create: CompaniesCreateWithoutApplicationsesInput;
}

export interface NetworksCreateWithoutNetworkProviderInput {
  baseUrl?: String;
  name?: String;
  networkProtocol?: NetworkProtocolsCreateOneWithoutNetworksesInput;
  networkType?: NetworkTypesCreateOneWithoutNetworksesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkInput;
  securityData?: String;
}

export interface ApplicationsUpsertWithoutApplicationNetworkTypeLinksesInput {
  update: ApplicationsUpdateWithoutApplicationNetworkTypeLinksesDataInput;
  create: ApplicationsCreateWithoutApplicationNetworkTypeLinksesInput;
}

export interface NetworkProtocolsCreateInput {
  masterProtocol?: NetworkProtocolsCreateOneWithoutMasterProtocolInput;
  name?: String;
  networkProtocolses?: NetworkProtocolsCreateManyWithoutNetworkProtocolsesInput;
  networkProtocolVersion?: String;
  networkses?: NetworksCreateManyWithoutNetworkProtocolInput;
  networkType?: NetworkTypesCreateOneWithoutNetworkProtocolsesInput;
  protocolDatas?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
  protocolHandler?: String;
}

export interface ApplicationNetworkTypeLinksUpdateManyMutationInput {
  networkSettings?: String;
}

export interface NetworkTypesCreateOneWithoutCompanyNetworkTypeLinksesInput {
  create?: NetworkTypesCreateWithoutCompanyNetworkTypeLinksesInput;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface EmailVerificationsUpdateInput {
  changeRequested?: String;
  email?: String;
  user?: UsersUpdateOneWithoutEmailVerificationsesInput;
  uuid?: String;
}

export interface ApplicationsCreateOneWithoutDevicesesInput {
  create?: ApplicationsCreateWithoutDevicesesInput;
  connect?: ApplicationsWhereUniqueInput;
}

export interface CompaniesCreateWithoutUsersesInput {
  applicationses?: ApplicationsCreateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesCreateManyWithoutCompanyInput;
  type?: CompanyTypesCreateOneWithoutCompaniesesInput;
}

export interface CompaniesCreateOneWithoutCompanyNetworkTypeLinksesInput {
  create?: CompaniesCreateWithoutCompanyNetworkTypeLinksesInput;
  connect?: CompaniesWhereUniqueInput;
}

export interface ApplicationsCreateInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksCreateManyWithoutApplicationInput;
  baseUrl?: String;
  company?: CompaniesCreateOneWithoutApplicationsesInput;
  description?: String;
  deviceses?: DevicesCreateManyWithoutApplicationInput;
  name?: String;
  reportingProtocol?: ReportingProtocolsCreateOneWithoutApplicationsesInput;
}

export interface DeviceProfilesCreateOneWithoutDeviceNetworkTypeLinksesInput {
  create?: DeviceProfilesCreateWithoutDeviceNetworkTypeLinksesInput;
  connect?: DeviceProfilesWhereUniqueInput;
}

export interface ApplicationsUpdateInput {
  applicationNetworkTypeLinkses?: ApplicationNetworkTypeLinksUpdateManyWithoutApplicationInput;
  baseUrl?: String;
  company?: CompaniesUpdateOneWithoutApplicationsesInput;
  description?: String;
  deviceses?: DevicesUpdateManyWithoutApplicationInput;
  name?: String;
  reportingProtocol?: ReportingProtocolsUpdateOneWithoutApplicationsesInput;
}

export interface UsersCreateManyWithoutCompanyInput {
  create?: UsersCreateWithoutCompanyInput[] | UsersCreateWithoutCompanyInput;
  connect?: UsersWhereUniqueInput[] | UsersWhereUniqueInput;
}

export interface ApplicationsUpdateManyMutationInput {
  baseUrl?: String;
  description?: String;
  name?: String;
}

export interface NetworkProtocolsCreateManyWithoutNetworkTypeInput {
  create?:
    | NetworkProtocolsCreateWithoutNetworkTypeInput[]
    | NetworkProtocolsCreateWithoutNetworkTypeInput;
  connect?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
}

export interface CompaniesCreateInput {
  applicationses?: ApplicationsCreateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesCreateManyWithoutCompanyInput;
  type?: CompanyTypesCreateOneWithoutCompaniesesInput;
  userses?: UsersCreateManyWithoutCompanyInput;
}

export interface NetworkProvidersCreateOneWithoutNetworksesInput {
  create?: NetworkProvidersCreateWithoutNetworksesInput;
  connect?: NetworkProvidersWhereUniqueInput;
}

export interface CompaniesUpdateInput {
  applicationses?: ApplicationsUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesUpdateManyWithoutCompanyInput;
  type?: CompanyTypesUpdateOneWithoutCompaniesesInput;
  userses?: UsersUpdateManyWithoutCompanyInput;
}

export interface NetworkTypesCreateOneWithoutDeviceNetworkTypeLinksesInput {
  create?: NetworkTypesCreateWithoutDeviceNetworkTypeLinksesInput;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface CompaniesUpdateManyMutationInput {
  name?: String;
}

export interface ProtocolDataCreateManyWithoutNetworkProtocolInput {
  create?:
    | ProtocolDataCreateWithoutNetworkProtocolInput[]
    | ProtocolDataCreateWithoutNetworkProtocolInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
}

export interface CompanyNetworkTypeLinksCreateInput {
  company?: CompaniesCreateOneWithoutCompanyNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutCompanyNetworkTypeLinksesInput;
}

export interface ReportingProtocolsCreateOneWithoutApplicationsesInput {
  create?: ReportingProtocolsCreateWithoutApplicationsesInput;
  connect?: ReportingProtocolsWhereUniqueInput;
}

export interface CompanyNetworkTypeLinksUpdateInput {
  company?: CompaniesUpdateOneWithoutCompanyNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutCompanyNetworkTypeLinksesInput;
}

export interface CompaniesUpdateWithoutApplicationsesDataInput {
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesUpdateManyWithoutCompanyInput;
  type?: CompanyTypesUpdateOneWithoutCompaniesesInput;
  userses?: UsersUpdateManyWithoutCompanyInput;
}

export interface CompanyNetworkTypeLinksUpdateManyMutationInput {
  networkSettings?: String;
}

export interface ReportingProtocolsWhereInput {
  applicationses_every?: ApplicationsWhereInput;
  applicationses_some?: ApplicationsWhereInput;
  applicationses_none?: ApplicationsWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  protocolHandler?: String;
  protocolHandler_not?: String;
  protocolHandler_in?: String[] | String;
  protocolHandler_not_in?: String[] | String;
  protocolHandler_lt?: String;
  protocolHandler_lte?: String;
  protocolHandler_gt?: String;
  protocolHandler_gte?: String;
  protocolHandler_contains?: String;
  protocolHandler_not_contains?: String;
  protocolHandler_starts_with?: String;
  protocolHandler_not_starts_with?: String;
  protocolHandler_ends_with?: String;
  protocolHandler_not_ends_with?: String;
  AND?: ReportingProtocolsWhereInput[] | ReportingProtocolsWhereInput;
  OR?: ReportingProtocolsWhereInput[] | ReportingProtocolsWhereInput;
  NOT?: ReportingProtocolsWhereInput[] | ReportingProtocolsWhereInput;
}

export interface CompanyTypesCreateInput {
  companieses?: CompaniesCreateManyWithoutTypeInput;
  name?: String;
}

export interface NetworkProtocolsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkProtocolsWhereInput;
  AND?:
    | NetworkProtocolsSubscriptionWhereInput[]
    | NetworkProtocolsSubscriptionWhereInput;
  OR?:
    | NetworkProtocolsSubscriptionWhereInput[]
    | NetworkProtocolsSubscriptionWhereInput;
  NOT?:
    | NetworkProtocolsSubscriptionWhereInput[]
    | NetworkProtocolsSubscriptionWhereInput;
}

export interface CompaniesCreateManyWithoutTypeInput {
  create?: CompaniesCreateWithoutTypeInput[] | CompaniesCreateWithoutTypeInput;
  connect?: CompaniesWhereUniqueInput[] | CompaniesWhereUniqueInput;
}

export interface UsersUpdateManyMutationInput {
  email?: String;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  username?: String;
}

export interface CompaniesCreateWithoutTypeInput {
  applicationses?: ApplicationsCreateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesCreateManyWithoutCompanyInput;
  userses?: UsersCreateManyWithoutCompanyInput;
}

export interface UserRolesCreateInput {
  name?: String;
  userses?: UsersCreateManyWithoutRoleInput;
}

export interface CompanyTypesUpdateInput {
  companieses?: CompaniesUpdateManyWithoutTypeInput;
  name?: String;
}

export interface ProtocolDataCreateInput {
  dataIdentifier?: String;
  dataValue?: String;
  network?: NetworksCreateOneWithoutProtocolDatasInput;
  networkProtocol?: NetworkProtocolsCreateOneWithoutProtocolDatasInput;
}

export interface CompaniesUpdateManyWithoutTypeInput {
  create?: CompaniesCreateWithoutTypeInput[] | CompaniesCreateWithoutTypeInput;
  delete?: CompaniesWhereUniqueInput[] | CompaniesWhereUniqueInput;
  connect?: CompaniesWhereUniqueInput[] | CompaniesWhereUniqueInput;
  disconnect?: CompaniesWhereUniqueInput[] | CompaniesWhereUniqueInput;
  update?:
    | CompaniesUpdateWithWhereUniqueWithoutTypeInput[]
    | CompaniesUpdateWithWhereUniqueWithoutTypeInput;
  upsert?:
    | CompaniesUpsertWithWhereUniqueWithoutTypeInput[]
    | CompaniesUpsertWithWhereUniqueWithoutTypeInput;
  deleteMany?: CompaniesScalarWhereInput[] | CompaniesScalarWhereInput;
  updateMany?:
    | CompaniesUpdateManyWithWhereNestedInput[]
    | CompaniesUpdateManyWithWhereNestedInput;
}

export interface NetworkTypesUpdateManyMutationInput {
  name?: String;
}

export interface CompaniesUpdateWithWhereUniqueWithoutTypeInput {
  where: CompaniesWhereUniqueInput;
  data: CompaniesUpdateWithoutTypeDataInput;
}

export interface NetworkProvidersCreateInput {
  name?: String;
  networkses?: NetworksCreateManyWithoutNetworkProviderInput;
}

export interface CompaniesUpdateWithoutTypeDataInput {
  applicationses?: ApplicationsUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksUpdateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesUpdateManyWithoutCompanyInput;
  name?: String;
  passwordPolicieses?: PasswordPoliciesUpdateManyWithoutCompanyInput;
  userses?: UsersUpdateManyWithoutCompanyInput;
}

export interface CompaniesCreateOneWithoutApplicationsesInput {
  create?: CompaniesCreateWithoutApplicationsesInput;
  connect?: CompaniesWhereUniqueInput;
}

export interface CompaniesUpsertWithWhereUniqueWithoutTypeInput {
  where: CompaniesWhereUniqueInput;
  update: CompaniesUpdateWithoutTypeDataInput;
  create: CompaniesCreateWithoutTypeInput;
}

export interface NetworkTypesCreateOneWithoutApplicationNetworkTypeLinksesInput {
  create?: NetworkTypesCreateWithoutApplicationNetworkTypeLinksesInput;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface CompaniesScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CompaniesScalarWhereInput[] | CompaniesScalarWhereInput;
  OR?: CompaniesScalarWhereInput[] | CompaniesScalarWhereInput;
  NOT?: CompaniesScalarWhereInput[] | CompaniesScalarWhereInput;
}

export interface PasswordPoliciesCreateManyWithoutCompanyInput {
  create?:
    | PasswordPoliciesCreateWithoutCompanyInput[]
    | PasswordPoliciesCreateWithoutCompanyInput;
  connect?:
    | PasswordPoliciesWhereUniqueInput[]
    | PasswordPoliciesWhereUniqueInput;
}

export interface CompaniesUpdateManyWithWhereNestedInput {
  where: CompaniesScalarWhereInput;
  data: CompaniesUpdateManyDataInput;
}

export interface NetworkProtocolsCreateManyWithoutNetworkProtocolsesInput {
  create?:
    | NetworkProtocolsCreateWithoutNetworkProtocolsesInput[]
    | NetworkProtocolsCreateWithoutNetworkProtocolsesInput;
  connect?:
    | NetworkProtocolsWhereUniqueInput[]
    | NetworkProtocolsWhereUniqueInput;
}

export interface CompaniesUpdateManyDataInput {
  name?: String;
}

export interface NetworkProtocolsCreateOneWithoutNetworksesInput {
  create?: NetworkProtocolsCreateWithoutNetworksesInput;
  connect?: NetworkProtocolsWhereUniqueInput;
}

export interface CompanyTypesUpdateManyMutationInput {
  name?: String;
}

export interface ApplicationNetworkTypeLinksUpdateInput {
  application?: ApplicationsUpdateOneWithoutApplicationNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutApplicationNetworkTypeLinksesInput;
}

export interface DeviceNetworkTypeLinksCreateInput {
  device?: DevicesCreateOneWithoutDeviceNetworkTypeLinksesInput;
  deviceProfile?: DeviceProfilesCreateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutDeviceNetworkTypeLinksesInput;
}

export interface ProtocolDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProtocolDataWhereInput;
  AND?:
    | ProtocolDataSubscriptionWhereInput[]
    | ProtocolDataSubscriptionWhereInput;
  OR?:
    | ProtocolDataSubscriptionWhereInput[]
    | ProtocolDataSubscriptionWhereInput;
  NOT?:
    | ProtocolDataSubscriptionWhereInput[]
    | ProtocolDataSubscriptionWhereInput;
}

export interface DeviceNetworkTypeLinksUpdateInput {
  device?: DevicesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
  deviceProfile?: DeviceProfilesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutDeviceNetworkTypeLinksesInput;
}

export interface UsersUpdateWithWhereUniqueWithoutRoleInput {
  where: UsersWhereUniqueInput;
  data: UsersUpdateWithoutRoleDataInput;
}

export interface DeviceNetworkTypeLinksUpdateManyMutationInput {
  networkSettings?: String;
}

export interface CompaniesCreateWithoutPasswordPoliciesesInput {
  applicationses?: ApplicationsCreateManyWithoutCompanyInput;
  companyNetworkTypeLinkses?: CompanyNetworkTypeLinksCreateManyWithoutCompanyInput;
  deviceProfileses?: DeviceProfilesCreateManyWithoutCompanyInput;
  name?: String;
  type?: CompanyTypesCreateOneWithoutCompaniesesInput;
  userses?: UsersCreateManyWithoutCompanyInput;
}

export interface DeviceProfilesCreateInput {
  company?: CompaniesCreateOneWithoutDeviceProfilesesInput;
  description?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutDeviceProfileInput;
  name?: String;
  networkSettings?: String;
  networkType?: NetworkTypesCreateOneWithoutDeviceProfilesesInput;
}

export interface CompaniesUpsertWithoutUsersesInput {
  update: CompaniesUpdateWithoutUsersesDataInput;
  create: CompaniesCreateWithoutUsersesInput;
}

export interface DeviceProfilesUpdateInput {
  company?: CompaniesUpdateOneWithoutDeviceProfilesesInput;
  description?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutDeviceProfileInput;
  name?: String;
  networkSettings?: String;
  networkType?: NetworkTypesUpdateOneWithoutDeviceProfilesesInput;
}

export interface DevicesCreateManyWithoutApplicationInput {
  create?:
    | DevicesCreateWithoutApplicationInput[]
    | DevicesCreateWithoutApplicationInput;
  connect?: DevicesWhereUniqueInput[] | DevicesWhereUniqueInput;
}

export interface DeviceProfilesUpdateManyMutationInput {
  description?: String;
  name?: String;
  networkSettings?: String;
}

export interface DeviceProfilesCreateManyWithoutNetworkTypeInput {
  create?:
    | DeviceProfilesCreateWithoutNetworkTypeInput[]
    | DeviceProfilesCreateWithoutNetworkTypeInput;
  connect?: DeviceProfilesWhereUniqueInput[] | DeviceProfilesWhereUniqueInput;
}

export interface DevicesCreateInput {
  application?: ApplicationsCreateOneWithoutDevicesesInput;
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksCreateManyWithoutDeviceInput;
  name?: String;
}

export interface NetworkTypesUpdateOneWithoutCompanyNetworkTypeLinksesInput {
  create?: NetworkTypesCreateWithoutCompanyNetworkTypeLinksesInput;
  update?: NetworkTypesUpdateWithoutCompanyNetworkTypeLinksesDataInput;
  upsert?: NetworkTypesUpsertWithoutCompanyNetworkTypeLinksesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: NetworkTypesWhereUniqueInput;
}

export interface DevicesUpdateInput {
  application?: ApplicationsUpdateOneWithoutDevicesesInput;
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinkses?: DeviceNetworkTypeLinksUpdateManyWithoutDeviceInput;
  name?: String;
}

export interface ReportingProtocolsUpdateInput {
  applicationses?: ApplicationsUpdateManyWithoutReportingProtocolInput;
  name?: String;
  protocolHandler?: String;
}

export interface UsersCreateWithoutEmailVerificationsesInput {
  company?: CompaniesCreateOneWithoutUsersesInput;
  email?: String;
  emailVerified?: Boolean;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  role?: UserRolesCreateOneWithoutUsersesInput;
  username?: String;
}

export interface UsersCreateOneWithoutEmailVerificationsesInput {
  create?: UsersCreateWithoutEmailVerificationsesInput;
  connect?: UsersWhereUniqueInput;
}

export interface EmailVerificationsCreateInput {
  changeRequested?: String;
  email?: String;
  user?: UsersCreateOneWithoutEmailVerificationsesInput;
  uuid?: String;
}

export interface DevicesUpdateManyMutationInput {
  description?: String;
  deviceModel?: String;
  name?: String;
}

export interface NetworksUpdateWithWhereUniqueWithoutNetworkProviderInput {
  where: NetworksWhereUniqueInput;
  data: NetworksUpdateWithoutNetworkProviderDataInput;
}

export interface DeviceNetworkTypeLinksSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeviceNetworkTypeLinksWhereInput;
  AND?:
    | DeviceNetworkTypeLinksSubscriptionWhereInput[]
    | DeviceNetworkTypeLinksSubscriptionWhereInput;
  OR?:
    | DeviceNetworkTypeLinksSubscriptionWhereInput[]
    | DeviceNetworkTypeLinksSubscriptionWhereInput;
  NOT?:
    | DeviceNetworkTypeLinksSubscriptionWhereInput[]
    | DeviceNetworkTypeLinksSubscriptionWhereInput;
}

export interface ProtocolDataCreateManyWithoutNetworkInput {
  create?:
    | ProtocolDataCreateWithoutNetworkInput[]
    | ProtocolDataCreateWithoutNetworkInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
}

export interface UserRolesCreateOneWithoutUsersesInput {
  create?: UserRolesCreateWithoutUsersesInput;
  connect?: UserRolesWhereUniqueInput;
}

export interface DeviceNetworkTypeLinksCreateManyWithoutNetworkTypeInput {
  create?:
    | DeviceNetworkTypeLinksCreateWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinksCreateWithoutNetworkTypeInput;
  connect?:
    | DeviceNetworkTypeLinksWhereUniqueInput[]
    | DeviceNetworkTypeLinksWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UsersPreviousValues {
  email?: String;
  emailVerified?: Boolean;
  id: Int;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  username?: String;
}

export interface UsersPreviousValuesPromise
  extends Promise<UsersPreviousValues>,
    Fragmentable {
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  id: () => Promise<Int>;
  lastVerifiedEmail: () => Promise<String>;
  passwordHash: () => Promise<String>;
  username: () => Promise<String>;
}

export interface UsersPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersPreviousValues>>,
    Fragmentable {
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<Int>>;
  lastVerifiedEmail: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationsEdge {
  node: Applications;
  cursor: String;
}

export interface ApplicationsEdgePromise
  extends Promise<ApplicationsEdge>,
    Fragmentable {
  node: <T = ApplicationsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationsEdgeSubscription
  extends Promise<AsyncIterator<ApplicationsEdge>>,
    Fragmentable {
  node: <T = ApplicationsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRolesSubscriptionPayload {
  mutation: MutationType;
  node: UserRoles;
  updatedFields: String[];
  previousValues: UserRolesPreviousValues;
}

export interface UserRolesSubscriptionPayloadPromise
  extends Promise<UserRolesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRolesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRolesPreviousValuesPromise>() => T;
}

export interface UserRolesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRolesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRolesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRolesPreviousValuesSubscription>() => T;
}

export interface ApplicationsConnection {
  pageInfo: PageInfo;
  edges: ApplicationsEdge[];
}

export interface ApplicationsConnectionPromise
  extends Promise<ApplicationsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationsEdge>>() => T;
  aggregate: <T = AggregateApplicationsPromise>() => T;
}

export interface ApplicationsConnectionSubscription
  extends Promise<AsyncIterator<ApplicationsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicationsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicationsSubscription>() => T;
}

export interface AggregateApplicationNetworkTypeLinks {
  count: Int;
}

export interface AggregateApplicationNetworkTypeLinksPromise
  extends Promise<AggregateApplicationNetworkTypeLinks>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationNetworkTypeLinksSubscription
  extends Promise<AsyncIterator<AggregateApplicationNetworkTypeLinks>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Companies {
  id: Int;
  name?: String;
}

export interface CompaniesPromise extends Promise<Companies>, Fragmentable {
  applicationses: <T = FragmentableArray<Applications>>(args?: {
    where?: ApplicationsWhereInput;
    orderBy?: ApplicationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companyNetworkTypeLinkses: <
    T = FragmentableArray<CompanyNetworkTypeLinks>
  >(args?: {
    where?: CompanyNetworkTypeLinksWhereInput;
    orderBy?: CompanyNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deviceProfileses: <T = FragmentableArray<DeviceProfiles>>(args?: {
    where?: DeviceProfilesWhereInput;
    orderBy?: DeviceProfilesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  passwordPolicieses: <T = FragmentableArray<PasswordPolicies>>(args?: {
    where?: PasswordPoliciesWhereInput;
    orderBy?: PasswordPoliciesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: <T = CompanyTypesPromise>() => T;
  userses: <T = FragmentableArray<Users>>(args?: {
    where?: UsersWhereInput;
    orderBy?: UsersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompaniesSubscription
  extends Promise<AsyncIterator<Companies>>,
    Fragmentable {
  applicationses: <
    T = Promise<AsyncIterator<ApplicationsSubscription>>
  >(args?: {
    where?: ApplicationsWhereInput;
    orderBy?: ApplicationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companyNetworkTypeLinkses: <
    T = Promise<AsyncIterator<CompanyNetworkTypeLinksSubscription>>
  >(args?: {
    where?: CompanyNetworkTypeLinksWhereInput;
    orderBy?: CompanyNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deviceProfileses: <
    T = Promise<AsyncIterator<DeviceProfilesSubscription>>
  >(args?: {
    where?: DeviceProfilesWhereInput;
    orderBy?: DeviceProfilesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  passwordPolicieses: <
    T = Promise<AsyncIterator<PasswordPoliciesSubscription>>
  >(args?: {
    where?: PasswordPoliciesWhereInput;
    orderBy?: PasswordPoliciesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: <T = CompanyTypesSubscription>() => T;
  userses: <T = Promise<AsyncIterator<UsersSubscription>>>(args?: {
    where?: UsersWhereInput;
    orderBy?: UsersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ApplicationNetworkTypeLinksEdge {
  node: ApplicationNetworkTypeLinks;
  cursor: String;
}

export interface ApplicationNetworkTypeLinksEdgePromise
  extends Promise<ApplicationNetworkTypeLinksEdge>,
    Fragmentable {
  node: <T = ApplicationNetworkTypeLinksPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationNetworkTypeLinksEdgeSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinksEdge>>,
    Fragmentable {
  node: <T = ApplicationNetworkTypeLinksSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UsersEdge {
  node: Users;
  cursor: String;
}

export interface UsersEdgePromise extends Promise<UsersEdge>, Fragmentable {
  node: <T = UsersPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsersEdgeSubscription
  extends Promise<AsyncIterator<UsersEdge>>,
    Fragmentable {
  node: <T = UsersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserRoles {
  count: Int;
}

export interface AggregateUserRolesPromise
  extends Promise<AggregateUserRoles>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRolesSubscription
  extends Promise<AsyncIterator<AggregateUserRoles>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicationNetworkTypeLinks {
  id: Int;
  networkSettings?: String;
}

export interface ApplicationNetworkTypeLinksPromise
  extends Promise<ApplicationNetworkTypeLinks>,
    Fragmentable {
  application: <T = ApplicationsPromise>() => T;
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
  networkType: <T = NetworkTypesPromise>() => T;
}

export interface ApplicationNetworkTypeLinksSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinks>>,
    Fragmentable {
  application: <T = ApplicationsSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
  networkType: <T = NetworkTypesSubscription>() => T;
}

export interface UserRolesConnection {
  pageInfo: PageInfo;
  edges: UserRolesEdge[];
}

export interface UserRolesConnectionPromise
  extends Promise<UserRolesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRolesEdge>>() => T;
  aggregate: <T = AggregateUserRolesPromise>() => T;
}

export interface UserRolesConnectionSubscription
  extends Promise<AsyncIterator<UserRolesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserRolesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserRolesSubscription>() => T;
}

export interface ApplicationNetworkTypeLinksSubscriptionPayload {
  mutation: MutationType;
  node: ApplicationNetworkTypeLinks;
  updatedFields: String[];
  previousValues: ApplicationNetworkTypeLinksPreviousValues;
}

export interface ApplicationNetworkTypeLinksSubscriptionPayloadPromise
  extends Promise<ApplicationNetworkTypeLinksSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationNetworkTypeLinksPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationNetworkTypeLinksPreviousValuesPromise>() => T;
}

export interface ApplicationNetworkTypeLinksSubscriptionPayloadSubscription
  extends Promise<
      AsyncIterator<ApplicationNetworkTypeLinksSubscriptionPayload>
    >,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationNetworkTypeLinksSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ApplicationNetworkTypeLinksPreviousValuesSubscription
  >() => T;
}

export interface AggregateReportingProtocols {
  count: Int;
}

export interface AggregateReportingProtocolsPromise
  extends Promise<AggregateReportingProtocols>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportingProtocolsSubscription
  extends Promise<AsyncIterator<AggregateReportingProtocols>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicationNetworkTypeLinksPreviousValues {
  id: Int;
  networkSettings?: String;
}

export interface ApplicationNetworkTypeLinksPreviousValuesPromise
  extends Promise<ApplicationNetworkTypeLinksPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
}

export interface ApplicationNetworkTypeLinksPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinksPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface ReportingProtocolsConnection {
  pageInfo: PageInfo;
  edges: ReportingProtocolsEdge[];
}

export interface ReportingProtocolsConnectionPromise
  extends Promise<ReportingProtocolsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportingProtocolsEdge>>() => T;
  aggregate: <T = AggregateReportingProtocolsPromise>() => T;
}

export interface ReportingProtocolsConnectionSubscription
  extends Promise<AsyncIterator<ReportingProtocolsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ReportingProtocolsEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateReportingProtocolsSubscription>() => T;
}

export interface ApplicationNetworkTypeLinksConnection {
  pageInfo: PageInfo;
  edges: ApplicationNetworkTypeLinksEdge[];
}

export interface ApplicationNetworkTypeLinksConnectionPromise
  extends Promise<ApplicationNetworkTypeLinksConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationNetworkTypeLinksEdge>>() => T;
  aggregate: <T = AggregateApplicationNetworkTypeLinksPromise>() => T;
}

export interface ApplicationNetworkTypeLinksConnectionSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinksConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ApplicationNetworkTypeLinksEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateApplicationNetworkTypeLinksSubscription>() => T;
}

export interface ProtocolDataEdge {
  node: ProtocolData;
  cursor: String;
}

export interface ProtocolDataEdgePromise
  extends Promise<ProtocolDataEdge>,
    Fragmentable {
  node: <T = ProtocolDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProtocolDataEdgeSubscription
  extends Promise<AsyncIterator<ProtocolDataEdge>>,
    Fragmentable {
  node: <T = ProtocolDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationsSubscriptionPayload {
  mutation: MutationType;
  node: Applications;
  updatedFields: String[];
  previousValues: ApplicationsPreviousValues;
}

export interface ApplicationsSubscriptionPayloadPromise
  extends Promise<ApplicationsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationsPreviousValuesPromise>() => T;
}

export interface ApplicationsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicationsPreviousValuesSubscription>() => T;
}

export interface AggregatePasswordPolicies {
  count: Int;
}

export interface AggregatePasswordPoliciesPromise
  extends Promise<AggregatePasswordPolicies>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePasswordPoliciesSubscription
  extends Promise<AsyncIterator<AggregatePasswordPolicies>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicationsPreviousValues {
  baseUrl?: String;
  description?: String;
  id: Int;
  name?: String;
}

export interface ApplicationsPreviousValuesPromise
  extends Promise<ApplicationsPreviousValues>,
    Fragmentable {
  baseUrl: () => Promise<String>;
  description: () => Promise<String>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface ApplicationsPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationsPreviousValues>>,
    Fragmentable {
  baseUrl: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PasswordPoliciesConnection {
  pageInfo: PageInfo;
  edges: PasswordPoliciesEdge[];
}

export interface PasswordPoliciesConnectionPromise
  extends Promise<PasswordPoliciesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PasswordPoliciesEdge>>() => T;
  aggregate: <T = AggregatePasswordPoliciesPromise>() => T;
}

export interface PasswordPoliciesConnectionSubscription
  extends Promise<AsyncIterator<PasswordPoliciesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PasswordPoliciesEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePasswordPoliciesSubscription>() => T;
}

export interface ReportingProtocols {
  id: Int;
  name?: String;
  protocolHandler?: String;
}

export interface ReportingProtocolsPromise
  extends Promise<ReportingProtocols>,
    Fragmentable {
  applicationses: <T = FragmentableArray<Applications>>(args?: {
    where?: ApplicationsWhereInput;
    orderBy?: ApplicationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  protocolHandler: () => Promise<String>;
}

export interface ReportingProtocolsSubscription
  extends Promise<AsyncIterator<ReportingProtocols>>,
    Fragmentable {
  applicationses: <
    T = Promise<AsyncIterator<ApplicationsSubscription>>
  >(args?: {
    where?: ApplicationsWhereInput;
    orderBy?: ApplicationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
}

export interface NetworksEdge {
  node: Networks;
  cursor: String;
}

export interface NetworksEdgePromise
  extends Promise<NetworksEdge>,
    Fragmentable {
  node: <T = NetworksPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworksEdgeSubscription
  extends Promise<AsyncIterator<NetworksEdge>>,
    Fragmentable {
  node: <T = NetworksSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompaniesSubscriptionPayload {
  mutation: MutationType;
  node: Companies;
  updatedFields: String[];
  previousValues: CompaniesPreviousValues;
}

export interface CompaniesSubscriptionPayloadPromise
  extends Promise<CompaniesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompaniesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompaniesPreviousValuesPromise>() => T;
}

export interface CompaniesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompaniesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompaniesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompaniesPreviousValuesSubscription>() => T;
}

export interface AggregateNetworkTypes {
  count: Int;
}

export interface AggregateNetworkTypesPromise
  extends Promise<AggregateNetworkTypes>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkTypesSubscription
  extends Promise<AsyncIterator<AggregateNetworkTypes>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompaniesPreviousValues {
  id: Int;
  name?: String;
}

export interface CompaniesPreviousValuesPromise
  extends Promise<CompaniesPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface CompaniesPreviousValuesSubscription
  extends Promise<AsyncIterator<CompaniesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NetworkTypesConnection {
  pageInfo: PageInfo;
  edges: NetworkTypesEdge[];
}

export interface NetworkTypesConnectionPromise
  extends Promise<NetworkTypesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkTypesEdge>>() => T;
  aggregate: <T = AggregateNetworkTypesPromise>() => T;
}

export interface NetworkTypesConnectionSubscription
  extends Promise<AsyncIterator<NetworkTypesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkTypesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkTypesSubscription>() => T;
}

export interface UserRoles {
  id: Int;
  name?: String;
}

export interface UserRolesPromise extends Promise<UserRoles>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  userses: <T = FragmentableArray<Users>>(args?: {
    where?: UsersWhereInput;
    orderBy?: UsersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserRolesSubscription
  extends Promise<AsyncIterator<UserRoles>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  userses: <T = Promise<AsyncIterator<UsersSubscription>>>(args?: {
    where?: UsersWhereInput;
    orderBy?: UsersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NetworkProvidersEdge {
  node: NetworkProviders;
  cursor: String;
}

export interface NetworkProvidersEdgePromise
  extends Promise<NetworkProvidersEdge>,
    Fragmentable {
  node: <T = NetworkProvidersPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkProvidersEdgeSubscription
  extends Promise<AsyncIterator<NetworkProvidersEdge>>,
    Fragmentable {
  node: <T = NetworkProvidersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNetworkTypeLinksSubscriptionPayload {
  mutation: MutationType;
  node: CompanyNetworkTypeLinks;
  updatedFields: String[];
  previousValues: CompanyNetworkTypeLinksPreviousValues;
}

export interface CompanyNetworkTypeLinksSubscriptionPayloadPromise
  extends Promise<CompanyNetworkTypeLinksSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyNetworkTypeLinksPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyNetworkTypeLinksPreviousValuesPromise>() => T;
}

export interface CompanyNetworkTypeLinksSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinksSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanyNetworkTypeLinksSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = CompanyNetworkTypeLinksPreviousValuesSubscription
  >() => T;
}

export interface UserRolesPreviousValues {
  id: Int;
  name?: String;
}

export interface UserRolesPreviousValuesPromise
  extends Promise<UserRolesPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface UserRolesPreviousValuesSubscription
  extends Promise<AsyncIterator<UserRolesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNetworkTypeLinksPreviousValues {
  id: Int;
  networkSettings?: String;
}

export interface CompanyNetworkTypeLinksPreviousValuesPromise
  extends Promise<CompanyNetworkTypeLinksPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
}

export interface CompanyNetworkTypeLinksPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinksPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface NetworkProtocolsEdge {
  node: NetworkProtocols;
  cursor: String;
}

export interface NetworkProtocolsEdgePromise
  extends Promise<NetworkProtocolsEdge>,
    Fragmentable {
  node: <T = NetworkProtocolsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkProtocolsEdgeSubscription
  extends Promise<AsyncIterator<NetworkProtocolsEdge>>,
    Fragmentable {
  node: <T = NetworkProtocolsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailVerifications {
  changeRequested?: String;
  email?: String;
  id: Int;
  uuid?: String;
}

export interface EmailVerificationsPromise
  extends Promise<EmailVerifications>,
    Fragmentable {
  changeRequested: () => Promise<String>;
  email: () => Promise<String>;
  id: () => Promise<Int>;
  user: <T = UsersPromise>() => T;
  uuid: () => Promise<String>;
}

export interface EmailVerificationsSubscription
  extends Promise<AsyncIterator<EmailVerifications>>,
    Fragmentable {
  changeRequested: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  user: <T = UsersSubscription>() => T;
  uuid: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmailVerifications {
  count: Int;
}

export interface AggregateEmailVerificationsPromise
  extends Promise<AggregateEmailVerifications>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailVerificationsSubscription
  extends Promise<AsyncIterator<AggregateEmailVerifications>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyTypesSubscriptionPayload {
  mutation: MutationType;
  node: CompanyTypes;
  updatedFields: String[];
  previousValues: CompanyTypesPreviousValues;
}

export interface CompanyTypesSubscriptionPayloadPromise
  extends Promise<CompanyTypesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyTypesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyTypesPreviousValuesPromise>() => T;
}

export interface CompanyTypesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanyTypesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanyTypesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyTypesPreviousValuesSubscription>() => T;
}

export interface EmailVerificationsConnection {
  pageInfo: PageInfo;
  edges: EmailVerificationsEdge[];
}

export interface EmailVerificationsConnectionPromise
  extends Promise<EmailVerificationsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailVerificationsEdge>>() => T;
  aggregate: <T = AggregateEmailVerificationsPromise>() => T;
}

export interface EmailVerificationsConnectionSubscription
  extends Promise<AsyncIterator<EmailVerificationsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<EmailVerificationsEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateEmailVerificationsSubscription>() => T;
}

export interface CompanyTypesPreviousValues {
  id: Int;
  name?: String;
}

export interface CompanyTypesPreviousValuesPromise
  extends Promise<CompanyTypesPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface CompanyTypesPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyTypesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DevicesEdge {
  node: Devices;
  cursor: String;
}

export interface DevicesEdgePromise extends Promise<DevicesEdge>, Fragmentable {
  node: <T = DevicesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DevicesEdgeSubscription
  extends Promise<AsyncIterator<DevicesEdge>>,
    Fragmentable {
  node: <T = DevicesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Users {
  email?: String;
  emailVerified?: Boolean;
  id: Int;
  lastVerifiedEmail?: String;
  passwordHash?: String;
  username?: String;
}

export interface UsersPromise extends Promise<Users>, Fragmentable {
  company: <T = CompaniesPromise>() => T;
  email: () => Promise<String>;
  emailVerificationses: <T = FragmentableArray<EmailVerifications>>(args?: {
    where?: EmailVerificationsWhereInput;
    orderBy?: EmailVerificationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  emailVerified: () => Promise<Boolean>;
  id: () => Promise<Int>;
  lastVerifiedEmail: () => Promise<String>;
  passwordHash: () => Promise<String>;
  role: <T = UserRolesPromise>() => T;
  username: () => Promise<String>;
}

export interface UsersSubscription
  extends Promise<AsyncIterator<Users>>,
    Fragmentable {
  company: <T = CompaniesSubscription>() => T;
  email: () => Promise<AsyncIterator<String>>;
  emailVerificationses: <
    T = Promise<AsyncIterator<EmailVerificationsSubscription>>
  >(args?: {
    where?: EmailVerificationsWhereInput;
    orderBy?: EmailVerificationsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<Int>>;
  lastVerifiedEmail: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  role: <T = UserRolesSubscription>() => T;
  username: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeviceProfiles {
  count: Int;
}

export interface AggregateDeviceProfilesPromise
  extends Promise<AggregateDeviceProfiles>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceProfilesSubscription
  extends Promise<AsyncIterator<AggregateDeviceProfiles>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceNetworkTypeLinksSubscriptionPayload {
  mutation: MutationType;
  node: DeviceNetworkTypeLinks;
  updatedFields: String[];
  previousValues: DeviceNetworkTypeLinksPreviousValues;
}

export interface DeviceNetworkTypeLinksSubscriptionPayloadPromise
  extends Promise<DeviceNetworkTypeLinksSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeviceNetworkTypeLinksPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeviceNetworkTypeLinksPreviousValuesPromise>() => T;
}

export interface DeviceNetworkTypeLinksSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinksSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceNetworkTypeLinksSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeviceNetworkTypeLinksPreviousValuesSubscription>() => T;
}

export interface DeviceProfilesConnection {
  pageInfo: PageInfo;
  edges: DeviceProfilesEdge[];
}

export interface DeviceProfilesConnectionPromise
  extends Promise<DeviceProfilesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceProfilesEdge>>() => T;
  aggregate: <T = AggregateDeviceProfilesPromise>() => T;
}

export interface DeviceProfilesConnectionSubscription
  extends Promise<AsyncIterator<DeviceProfilesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeviceProfilesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeviceProfilesSubscription>() => T;
}

export interface DeviceNetworkTypeLinksPreviousValues {
  id: Int;
  networkSettings?: String;
}

export interface DeviceNetworkTypeLinksPreviousValuesPromise
  extends Promise<DeviceNetworkTypeLinksPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
}

export interface DeviceNetworkTypeLinksPreviousValuesSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinksPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface DeviceNetworkTypeLinksEdge {
  node: DeviceNetworkTypeLinks;
  cursor: String;
}

export interface DeviceNetworkTypeLinksEdgePromise
  extends Promise<DeviceNetworkTypeLinksEdge>,
    Fragmentable {
  node: <T = DeviceNetworkTypeLinksPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceNetworkTypeLinksEdgeSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinksEdge>>,
    Fragmentable {
  node: <T = DeviceNetworkTypeLinksSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyTypes {
  id: Int;
  name?: String;
}

export interface CompanyTypesPromise
  extends Promise<CompanyTypes>,
    Fragmentable {
  companieses: <T = FragmentableArray<Companies>>(args?: {
    where?: CompaniesWhereInput;
    orderBy?: CompaniesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface CompanyTypesSubscription
  extends Promise<AsyncIterator<CompanyTypes>>,
    Fragmentable {
  companieses: <T = Promise<AsyncIterator<CompaniesSubscription>>>(args?: {
    where?: CompaniesWhereInput;
    orderBy?: CompaniesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompanyTypes {
  count: Int;
}

export interface AggregateCompanyTypesPromise
  extends Promise<AggregateCompanyTypes>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanyTypesSubscription
  extends Promise<AsyncIterator<AggregateCompanyTypes>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceProfilesSubscriptionPayload {
  mutation: MutationType;
  node: DeviceProfiles;
  updatedFields: String[];
  previousValues: DeviceProfilesPreviousValues;
}

export interface DeviceProfilesSubscriptionPayloadPromise
  extends Promise<DeviceProfilesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeviceProfilesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeviceProfilesPreviousValuesPromise>() => T;
}

export interface DeviceProfilesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceProfilesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceProfilesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeviceProfilesPreviousValuesSubscription>() => T;
}

export interface CompanyTypesConnection {
  pageInfo: PageInfo;
  edges: CompanyTypesEdge[];
}

export interface CompanyTypesConnectionPromise
  extends Promise<CompanyTypesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyTypesEdge>>() => T;
  aggregate: <T = AggregateCompanyTypesPromise>() => T;
}

export interface CompanyTypesConnectionSubscription
  extends Promise<AsyncIterator<CompanyTypesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyTypesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanyTypesSubscription>() => T;
}

export interface DeviceProfilesPreviousValues {
  description?: String;
  id: Int;
  name?: String;
  networkSettings?: String;
}

export interface DeviceProfilesPreviousValuesPromise
  extends Promise<DeviceProfilesPreviousValues>,
    Fragmentable {
  description: () => Promise<String>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkSettings: () => Promise<String>;
}

export interface DeviceProfilesPreviousValuesSubscription
  extends Promise<AsyncIterator<DeviceProfilesPreviousValues>>,
    Fragmentable {
  description: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNetworkTypeLinksEdge {
  node: CompanyNetworkTypeLinks;
  cursor: String;
}

export interface CompanyNetworkTypeLinksEdgePromise
  extends Promise<CompanyNetworkTypeLinksEdge>,
    Fragmentable {
  node: <T = CompanyNetworkTypeLinksPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyNetworkTypeLinksEdgeSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinksEdge>>,
    Fragmentable {
  node: <T = CompanyNetworkTypeLinksSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PasswordPolicies {
  id: Int;
  ruleRegExp?: String;
  ruleText?: String;
}

export interface PasswordPoliciesPromise
  extends Promise<PasswordPolicies>,
    Fragmentable {
  company: <T = CompaniesPromise>() => T;
  id: () => Promise<Int>;
  ruleRegExp: () => Promise<String>;
  ruleText: () => Promise<String>;
}

export interface PasswordPoliciesSubscription
  extends Promise<AsyncIterator<PasswordPolicies>>,
    Fragmentable {
  company: <T = CompaniesSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  ruleRegExp: () => Promise<AsyncIterator<String>>;
  ruleText: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompanies {
  count: Int;
}

export interface AggregateCompaniesPromise
  extends Promise<AggregateCompanies>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompaniesSubscription
  extends Promise<AsyncIterator<AggregateCompanies>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DevicesSubscriptionPayload {
  mutation: MutationType;
  node: Devices;
  updatedFields: String[];
  previousValues: DevicesPreviousValues;
}

export interface DevicesSubscriptionPayloadPromise
  extends Promise<DevicesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DevicesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DevicesPreviousValuesPromise>() => T;
}

export interface DevicesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DevicesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DevicesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DevicesPreviousValuesSubscription>() => T;
}

export interface CompaniesConnection {
  pageInfo: PageInfo;
  edges: CompaniesEdge[];
}

export interface CompaniesConnectionPromise
  extends Promise<CompaniesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompaniesEdge>>() => T;
  aggregate: <T = AggregateCompaniesPromise>() => T;
}

export interface CompaniesConnectionSubscription
  extends Promise<AsyncIterator<CompaniesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompaniesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompaniesSubscription>() => T;
}

export interface DevicesPreviousValues {
  description?: String;
  deviceModel?: String;
  id: Int;
  name?: String;
}

export interface DevicesPreviousValuesPromise
  extends Promise<DevicesPreviousValues>,
    Fragmentable {
  description: () => Promise<String>;
  deviceModel: () => Promise<String>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface DevicesPreviousValuesSubscription
  extends Promise<AsyncIterator<DevicesPreviousValues>>,
    Fragmentable {
  description: () => Promise<AsyncIterator<String>>;
  deviceModel: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UsersSubscriptionPayload {
  mutation: MutationType;
  node: Users;
  updatedFields: String[];
  previousValues: UsersPreviousValues;
}

export interface UsersSubscriptionPayloadPromise
  extends Promise<UsersSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsersPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersPreviousValuesPromise>() => T;
}

export interface UsersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersPreviousValuesSubscription>() => T;
}

export interface ProtocolData {
  dataIdentifier?: String;
  dataValue?: String;
  id: Int;
}

export interface ProtocolDataPromise
  extends Promise<ProtocolData>,
    Fragmentable {
  dataIdentifier: () => Promise<String>;
  dataValue: () => Promise<String>;
  id: () => Promise<Int>;
  network: <T = NetworksPromise>() => T;
  networkProtocol: <T = NetworkProtocolsPromise>() => T;
}

export interface ProtocolDataSubscription
  extends Promise<AsyncIterator<ProtocolData>>,
    Fragmentable {
  dataIdentifier: () => Promise<AsyncIterator<String>>;
  dataValue: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  network: <T = NetworksSubscription>() => T;
  networkProtocol: <T = NetworkProtocolsSubscription>() => T;
}

export interface UsersConnection {
  pageInfo: PageInfo;
  edges: UsersEdge[];
}

export interface UsersConnectionPromise
  extends Promise<UsersConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsersEdge>>() => T;
  aggregate: <T = AggregateUsersPromise>() => T;
}

export interface UsersConnectionSubscription
  extends Promise<AsyncIterator<UsersConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersSubscription>() => T;
}

export interface EmailVerificationsSubscriptionPayload {
  mutation: MutationType;
  node: EmailVerifications;
  updatedFields: String[];
  previousValues: EmailVerificationsPreviousValues;
}

export interface EmailVerificationsSubscriptionPayloadPromise
  extends Promise<EmailVerificationsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailVerificationsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailVerificationsPreviousValuesPromise>() => T;
}

export interface EmailVerificationsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailVerificationsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailVerificationsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailVerificationsPreviousValuesSubscription>() => T;
}

export interface Applications {
  baseUrl?: String;
  description?: String;
  id: Int;
  name?: String;
}

export interface ApplicationsPromise
  extends Promise<Applications>,
    Fragmentable {
  applicationNetworkTypeLinkses: <
    T = FragmentableArray<ApplicationNetworkTypeLinks>
  >(args?: {
    where?: ApplicationNetworkTypeLinksWhereInput;
    orderBy?: ApplicationNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  baseUrl: () => Promise<String>;
  company: <T = CompaniesPromise>() => T;
  description: () => Promise<String>;
  deviceses: <T = FragmentableArray<Devices>>(args?: {
    where?: DevicesWhereInput;
    orderBy?: DevicesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  reportingProtocol: <T = ReportingProtocolsPromise>() => T;
}

export interface ApplicationsSubscription
  extends Promise<AsyncIterator<Applications>>,
    Fragmentable {
  applicationNetworkTypeLinkses: <
    T = Promise<AsyncIterator<ApplicationNetworkTypeLinksSubscription>>
  >(args?: {
    where?: ApplicationNetworkTypeLinksWhereInput;
    orderBy?: ApplicationNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  baseUrl: () => Promise<AsyncIterator<String>>;
  company: <T = CompaniesSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  deviceses: <T = Promise<AsyncIterator<DevicesSubscription>>>(args?: {
    where?: DevicesWhereInput;
    orderBy?: DevicesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  reportingProtocol: <T = ReportingProtocolsSubscription>() => T;
}

export interface EmailVerificationsPreviousValues {
  changeRequested?: String;
  email?: String;
  id: Int;
  uuid?: String;
}

export interface EmailVerificationsPreviousValuesPromise
  extends Promise<EmailVerificationsPreviousValues>,
    Fragmentable {
  changeRequested: () => Promise<String>;
  email: () => Promise<String>;
  id: () => Promise<Int>;
  uuid: () => Promise<String>;
}

export interface EmailVerificationsPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailVerificationsPreviousValues>>,
    Fragmentable {
  changeRequested: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  uuid: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProtocolData {
  count: Int;
}

export interface AggregateProtocolDataPromise
  extends Promise<AggregateProtocolData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProtocolDataSubscription
  extends Promise<AsyncIterator<AggregateProtocolData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkProviders {
  id: Int;
  name?: String;
}

export interface NetworkProvidersPromise
  extends Promise<NetworkProviders>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkses: <T = FragmentableArray<Networks>>(args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NetworkProvidersSubscription
  extends Promise<AsyncIterator<NetworkProviders>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkses: <T = Promise<AsyncIterator<NetworksSubscription>>>(args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PasswordPoliciesEdge {
  node: PasswordPolicies;
  cursor: String;
}

export interface PasswordPoliciesEdgePromise
  extends Promise<PasswordPoliciesEdge>,
    Fragmentable {
  node: <T = PasswordPoliciesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PasswordPoliciesEdgeSubscription
  extends Promise<AsyncIterator<PasswordPoliciesEdge>>,
    Fragmentable {
  node: <T = PasswordPoliciesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkProtocolsSubscriptionPayload {
  mutation: MutationType;
  node: NetworkProtocols;
  updatedFields: String[];
  previousValues: NetworkProtocolsPreviousValues;
}

export interface NetworkProtocolsSubscriptionPayloadPromise
  extends Promise<NetworkProtocolsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkProtocolsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkProtocolsPreviousValuesPromise>() => T;
}

export interface NetworkProtocolsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkProtocolsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkProtocolsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkProtocolsPreviousValuesSubscription>() => T;
}

export interface NetworksConnection {
  pageInfo: PageInfo;
  edges: NetworksEdge[];
}

export interface NetworksConnectionPromise
  extends Promise<NetworksConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworksEdge>>() => T;
  aggregate: <T = AggregateNetworksPromise>() => T;
}

export interface NetworksConnectionSubscription
  extends Promise<AsyncIterator<NetworksConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworksEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworksSubscription>() => T;
}

export interface NetworkProtocolsPreviousValues {
  id: Int;
  name?: String;
  networkProtocolVersion?: String;
  protocolHandler?: String;
}

export interface NetworkProtocolsPreviousValuesPromise
  extends Promise<NetworkProtocolsPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkProtocolVersion: () => Promise<String>;
  protocolHandler: () => Promise<String>;
}

export interface NetworkProtocolsPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkProtocolsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkProtocolVersion: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNetworkProviders {
  count: Int;
}

export interface AggregateNetworkProvidersPromise
  extends Promise<AggregateNetworkProviders>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkProvidersSubscription
  extends Promise<AsyncIterator<AggregateNetworkProviders>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Networks {
  baseUrl?: String;
  id: Int;
  name?: String;
  securityData?: String;
}

export interface NetworksPromise extends Promise<Networks>, Fragmentable {
  baseUrl: () => Promise<String>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkProtocol: <T = NetworkProtocolsPromise>() => T;
  networkProvider: <T = NetworkProvidersPromise>() => T;
  networkType: <T = NetworkTypesPromise>() => T;
  protocolDatas: <T = FragmentableArray<ProtocolData>>(args?: {
    where?: ProtocolDataWhereInput;
    orderBy?: ProtocolDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  securityData: () => Promise<String>;
}

export interface NetworksSubscription
  extends Promise<AsyncIterator<Networks>>,
    Fragmentable {
  baseUrl: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkProtocol: <T = NetworkProtocolsSubscription>() => T;
  networkProvider: <T = NetworkProvidersSubscription>() => T;
  networkType: <T = NetworkTypesSubscription>() => T;
  protocolDatas: <T = Promise<AsyncIterator<ProtocolDataSubscription>>>(args?: {
    where?: ProtocolDataWhereInput;
    orderBy?: ProtocolDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  securityData: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNetworkProtocols {
  count: Int;
}

export interface AggregateNetworkProtocolsPromise
  extends Promise<AggregateNetworkProtocols>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkProtocolsSubscription
  extends Promise<AsyncIterator<AggregateNetworkProtocols>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkProvidersSubscriptionPayload {
  mutation: MutationType;
  node: NetworkProviders;
  updatedFields: String[];
  previousValues: NetworkProvidersPreviousValues;
}

export interface NetworkProvidersSubscriptionPayloadPromise
  extends Promise<NetworkProvidersSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkProvidersPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkProvidersPreviousValuesPromise>() => T;
}

export interface NetworkProvidersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkProvidersSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkProvidersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkProvidersPreviousValuesSubscription>() => T;
}

export interface EmailVerificationsEdge {
  node: EmailVerifications;
  cursor: String;
}

export interface EmailVerificationsEdgePromise
  extends Promise<EmailVerificationsEdge>,
    Fragmentable {
  node: <T = EmailVerificationsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailVerificationsEdgeSubscription
  extends Promise<AsyncIterator<EmailVerificationsEdge>>,
    Fragmentable {
  node: <T = EmailVerificationsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkProvidersPreviousValues {
  id: Int;
  name?: String;
}

export interface NetworkProvidersPreviousValuesPromise
  extends Promise<NetworkProvidersPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface NetworkProvidersPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkProvidersPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DevicesConnection {
  pageInfo: PageInfo;
  edges: DevicesEdge[];
}

export interface DevicesConnectionPromise
  extends Promise<DevicesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DevicesEdge>>() => T;
  aggregate: <T = AggregateDevicesPromise>() => T;
}

export interface DevicesConnectionSubscription
  extends Promise<AsyncIterator<DevicesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DevicesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDevicesSubscription>() => T;
}

export interface NetworkProtocols {
  id: Int;
  name?: String;
  networkProtocolVersion?: String;
  protocolHandler?: String;
}

export interface NetworkProtocolsPromise
  extends Promise<NetworkProtocols>,
    Fragmentable {
  id: () => Promise<Int>;
  masterProtocol: <T = NetworkProtocolsPromise>() => T;
  name: () => Promise<String>;
  networkProtocolses: <T = FragmentableArray<NetworkProtocols>>(args?: {
    where?: NetworkProtocolsWhereInput;
    orderBy?: NetworkProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networkProtocolVersion: () => Promise<String>;
  networkses: <T = FragmentableArray<Networks>>(args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networkType: <T = NetworkTypesPromise>() => T;
  protocolDatas: <T = FragmentableArray<ProtocolData>>(args?: {
    where?: ProtocolDataWhereInput;
    orderBy?: ProtocolDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  protocolHandler: () => Promise<String>;
}

export interface NetworkProtocolsSubscription
  extends Promise<AsyncIterator<NetworkProtocols>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  masterProtocol: <T = NetworkProtocolsSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  networkProtocolses: <
    T = Promise<AsyncIterator<NetworkProtocolsSubscription>>
  >(args?: {
    where?: NetworkProtocolsWhereInput;
    orderBy?: NetworkProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networkProtocolVersion: () => Promise<AsyncIterator<String>>;
  networkses: <T = Promise<AsyncIterator<NetworksSubscription>>>(args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networkType: <T = NetworkTypesSubscription>() => T;
  protocolDatas: <T = Promise<AsyncIterator<ProtocolDataSubscription>>>(args?: {
    where?: ProtocolDataWhereInput;
    orderBy?: ProtocolDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  protocolHandler: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeviceNetworkTypeLinks {
  count: Int;
}

export interface AggregateDeviceNetworkTypeLinksPromise
  extends Promise<AggregateDeviceNetworkTypeLinks>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceNetworkTypeLinksSubscription
  extends Promise<AsyncIterator<AggregateDeviceNetworkTypeLinks>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkTypesSubscriptionPayload {
  mutation: MutationType;
  node: NetworkTypes;
  updatedFields: String[];
  previousValues: NetworkTypesPreviousValues;
}

export interface NetworkTypesSubscriptionPayloadPromise
  extends Promise<NetworkTypesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkTypesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkTypesPreviousValuesPromise>() => T;
}

export interface NetworkTypesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkTypesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkTypesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkTypesPreviousValuesSubscription>() => T;
}

export interface CompanyTypesEdge {
  node: CompanyTypes;
  cursor: String;
}

export interface CompanyTypesEdgePromise
  extends Promise<CompanyTypesEdge>,
    Fragmentable {
  node: <T = CompanyTypesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyTypesEdgeSubscription
  extends Promise<AsyncIterator<CompanyTypesEdge>>,
    Fragmentable {
  node: <T = CompanyTypesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkTypesPreviousValues {
  id: Int;
  name?: String;
}

export interface NetworkTypesPreviousValuesPromise
  extends Promise<NetworkTypesPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface NetworkTypesPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkTypesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNetworkTypeLinksConnection {
  pageInfo: PageInfo;
  edges: CompanyNetworkTypeLinksEdge[];
}

export interface CompanyNetworkTypeLinksConnectionPromise
  extends Promise<CompanyNetworkTypeLinksConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyNetworkTypeLinksEdge>>() => T;
  aggregate: <T = AggregateCompanyNetworkTypeLinksPromise>() => T;
}

export interface CompanyNetworkTypeLinksConnectionSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinksConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CompanyNetworkTypeLinksEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCompanyNetworkTypeLinksSubscription>() => T;
}

export interface DeviceProfiles {
  description?: String;
  id: Int;
  name?: String;
  networkSettings?: String;
}

export interface DeviceProfilesPromise
  extends Promise<DeviceProfiles>,
    Fragmentable {
  company: <T = CompaniesPromise>() => T;
  description: () => Promise<String>;
  deviceNetworkTypeLinkses: <
    T = FragmentableArray<DeviceNetworkTypeLinks>
  >(args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkSettings: () => Promise<String>;
  networkType: <T = NetworkTypesPromise>() => T;
}

export interface DeviceProfilesSubscription
  extends Promise<AsyncIterator<DeviceProfiles>>,
    Fragmentable {
  company: <T = CompaniesSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  deviceNetworkTypeLinkses: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinksSubscription>>
  >(args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
  networkType: <T = NetworkTypesSubscription>() => T;
}

export interface AggregateApplications {
  count: Int;
}

export interface AggregateApplicationsPromise
  extends Promise<AggregateApplications>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationsSubscription
  extends Promise<AsyncIterator<AggregateApplications>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworksSubscriptionPayload {
  mutation: MutationType;
  node: Networks;
  updatedFields: String[];
  previousValues: NetworksPreviousValues;
}

export interface NetworksSubscriptionPayloadPromise
  extends Promise<NetworksSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworksPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworksPreviousValuesPromise>() => T;
}

export interface NetworksSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworksSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworksSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworksPreviousValuesSubscription>() => T;
}

export interface UserRolesEdge {
  node: UserRoles;
  cursor: String;
}

export interface UserRolesEdgePromise
  extends Promise<UserRolesEdge>,
    Fragmentable {
  node: <T = UserRolesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRolesEdgeSubscription
  extends Promise<AsyncIterator<UserRolesEdge>>,
    Fragmentable {
  node: <T = UserRolesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworksPreviousValues {
  baseUrl?: String;
  id: Int;
  name?: String;
  securityData?: String;
}

export interface NetworksPreviousValuesPromise
  extends Promise<NetworksPreviousValues>,
    Fragmentable {
  baseUrl: () => Promise<String>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  securityData: () => Promise<String>;
}

export interface NetworksPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworksPreviousValues>>,
    Fragmentable {
  baseUrl: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  securityData: () => Promise<AsyncIterator<String>>;
}

export interface ProtocolDataConnection {
  pageInfo: PageInfo;
  edges: ProtocolDataEdge[];
}

export interface ProtocolDataConnectionPromise
  extends Promise<ProtocolDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProtocolDataEdge>>() => T;
  aggregate: <T = AggregateProtocolDataPromise>() => T;
}

export interface ProtocolDataConnectionSubscription
  extends Promise<AsyncIterator<ProtocolDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProtocolDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProtocolDataSubscription>() => T;
}

export interface Devices {
  description?: String;
  deviceModel?: String;
  id: Int;
  name?: String;
}

export interface DevicesPromise extends Promise<Devices>, Fragmentable {
  application: <T = ApplicationsPromise>() => T;
  description: () => Promise<String>;
  deviceModel: () => Promise<String>;
  deviceNetworkTypeLinkses: <
    T = FragmentableArray<DeviceNetworkTypeLinks>
  >(args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface DevicesSubscription
  extends Promise<AsyncIterator<Devices>>,
    Fragmentable {
  application: <T = ApplicationsSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  deviceModel: () => Promise<AsyncIterator<String>>;
  deviceNetworkTypeLinkses: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinksSubscription>>
  >(args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NetworkTypesEdge {
  node: NetworkTypes;
  cursor: String;
}

export interface NetworkTypesEdgePromise
  extends Promise<NetworkTypesEdge>,
    Fragmentable {
  node: <T = NetworkTypesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkTypesEdgeSubscription
  extends Promise<AsyncIterator<NetworkTypesEdge>>,
    Fragmentable {
  node: <T = NetworkTypesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PasswordPoliciesSubscriptionPayload {
  mutation: MutationType;
  node: PasswordPolicies;
  updatedFields: String[];
  previousValues: PasswordPoliciesPreviousValues;
}

export interface PasswordPoliciesSubscriptionPayloadPromise
  extends Promise<PasswordPoliciesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PasswordPoliciesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PasswordPoliciesPreviousValuesPromise>() => T;
}

export interface PasswordPoliciesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PasswordPoliciesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PasswordPoliciesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PasswordPoliciesPreviousValuesSubscription>() => T;
}

export interface NetworkProtocolsConnection {
  pageInfo: PageInfo;
  edges: NetworkProtocolsEdge[];
}

export interface NetworkProtocolsConnectionPromise
  extends Promise<NetworkProtocolsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkProtocolsEdge>>() => T;
  aggregate: <T = AggregateNetworkProtocolsPromise>() => T;
}

export interface NetworkProtocolsConnectionSubscription
  extends Promise<AsyncIterator<NetworkProtocolsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkProtocolsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkProtocolsSubscription>() => T;
}

export interface PasswordPoliciesPreviousValues {
  id: Int;
  ruleRegExp?: String;
  ruleText?: String;
}

export interface PasswordPoliciesPreviousValuesPromise
  extends Promise<PasswordPoliciesPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ruleRegExp: () => Promise<String>;
  ruleText: () => Promise<String>;
}

export interface PasswordPoliciesPreviousValuesSubscription
  extends Promise<AsyncIterator<PasswordPoliciesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ruleRegExp: () => Promise<AsyncIterator<String>>;
  ruleText: () => Promise<AsyncIterator<String>>;
}

export interface DeviceProfilesEdge {
  node: DeviceProfiles;
  cursor: String;
}

export interface DeviceProfilesEdgePromise
  extends Promise<DeviceProfilesEdge>,
    Fragmentable {
  node: <T = DeviceProfilesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceProfilesEdgeSubscription
  extends Promise<AsyncIterator<DeviceProfilesEdge>>,
    Fragmentable {
  node: <T = DeviceProfilesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DeviceNetworkTypeLinks {
  id: Int;
  networkSettings?: String;
}

export interface DeviceNetworkTypeLinksPromise
  extends Promise<DeviceNetworkTypeLinks>,
    Fragmentable {
  device: <T = DevicesPromise>() => T;
  deviceProfile: <T = DeviceProfilesPromise>() => T;
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
  networkType: <T = NetworkTypesPromise>() => T;
}

export interface DeviceNetworkTypeLinksSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinks>>,
    Fragmentable {
  device: <T = DevicesSubscription>() => T;
  deviceProfile: <T = DeviceProfilesSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
  networkType: <T = NetworkTypesSubscription>() => T;
}

export interface AggregateCompanyNetworkTypeLinks {
  count: Int;
}

export interface AggregateCompanyNetworkTypeLinksPromise
  extends Promise<AggregateCompanyNetworkTypeLinks>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanyNetworkTypeLinksSubscription
  extends Promise<AsyncIterator<AggregateCompanyNetworkTypeLinks>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProtocolDataSubscriptionPayload {
  mutation: MutationType;
  node: ProtocolData;
  updatedFields: String[];
  previousValues: ProtocolDataPreviousValues;
}

export interface ProtocolDataSubscriptionPayloadPromise
  extends Promise<ProtocolDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProtocolDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProtocolDataPreviousValuesPromise>() => T;
}

export interface ProtocolDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProtocolDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProtocolDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProtocolDataPreviousValuesSubscription>() => T;
}

export interface AggregateUsers {
  count: Int;
}

export interface AggregateUsersPromise
  extends Promise<AggregateUsers>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersSubscription
  extends Promise<AsyncIterator<AggregateUsers>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProtocolDataPreviousValues {
  dataIdentifier?: String;
  dataValue?: String;
  id: Int;
}

export interface ProtocolDataPreviousValuesPromise
  extends Promise<ProtocolDataPreviousValues>,
    Fragmentable {
  dataIdentifier: () => Promise<String>;
  dataValue: () => Promise<String>;
  id: () => Promise<Int>;
}

export interface ProtocolDataPreviousValuesSubscription
  extends Promise<AsyncIterator<ProtocolDataPreviousValues>>,
    Fragmentable {
  dataIdentifier: () => Promise<AsyncIterator<String>>;
  dataValue: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateNetworks {
  count: Int;
}

export interface AggregateNetworksPromise
  extends Promise<AggregateNetworks>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworksSubscription
  extends Promise<AsyncIterator<AggregateNetworks>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateDevices {
  count: Int;
}

export interface AggregateDevicesPromise
  extends Promise<AggregateDevices>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDevicesSubscription
  extends Promise<AsyncIterator<AggregateDevices>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyNetworkTypeLinks {
  id: Int;
  networkSettings?: String;
}

export interface CompanyNetworkTypeLinksPromise
  extends Promise<CompanyNetworkTypeLinks>,
    Fragmentable {
  company: <T = CompaniesPromise>() => T;
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
  networkType: <T = NetworkTypesPromise>() => T;
}

export interface CompanyNetworkTypeLinksSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinks>>,
    Fragmentable {
  company: <T = CompaniesSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
  networkType: <T = NetworkTypesSubscription>() => T;
}

export interface ReportingProtocolsPreviousValues {
  id: Int;
  name?: String;
  protocolHandler?: String;
}

export interface ReportingProtocolsPreviousValuesPromise
  extends Promise<ReportingProtocolsPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  protocolHandler: () => Promise<String>;
}

export interface ReportingProtocolsPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportingProtocolsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
}

export interface ReportingProtocolsSubscriptionPayload {
  mutation: MutationType;
  node: ReportingProtocols;
  updatedFields: String[];
  previousValues: ReportingProtocolsPreviousValues;
}

export interface ReportingProtocolsSubscriptionPayloadPromise
  extends Promise<ReportingProtocolsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportingProtocolsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportingProtocolsPreviousValuesPromise>() => T;
}

export interface ReportingProtocolsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportingProtocolsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportingProtocolsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportingProtocolsPreviousValuesSubscription>() => T;
}

export interface NetworkTypes {
  id: Int;
  name?: String;
}

export interface NetworkTypesPromise
  extends Promise<NetworkTypes>,
    Fragmentable {
  applicationNetworkTypeLinkses: <
    T = FragmentableArray<ApplicationNetworkTypeLinks>
  >(args?: {
    where?: ApplicationNetworkTypeLinksWhereInput;
    orderBy?: ApplicationNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companyNetworkTypeLinkses: <
    T = FragmentableArray<CompanyNetworkTypeLinks>
  >(args?: {
    where?: CompanyNetworkTypeLinksWhereInput;
    orderBy?: CompanyNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deviceNetworkTypeLinkses: <
    T = FragmentableArray<DeviceNetworkTypeLinks>
  >(args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deviceProfileses: <T = FragmentableArray<DeviceProfiles>>(args?: {
    where?: DeviceProfilesWhereInput;
    orderBy?: DeviceProfilesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkProtocolses: <T = FragmentableArray<NetworkProtocols>>(args?: {
    where?: NetworkProtocolsWhereInput;
    orderBy?: NetworkProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networkses: <T = FragmentableArray<Networks>>(args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NetworkTypesSubscription
  extends Promise<AsyncIterator<NetworkTypes>>,
    Fragmentable {
  applicationNetworkTypeLinkses: <
    T = Promise<AsyncIterator<ApplicationNetworkTypeLinksSubscription>>
  >(args?: {
    where?: ApplicationNetworkTypeLinksWhereInput;
    orderBy?: ApplicationNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companyNetworkTypeLinkses: <
    T = Promise<AsyncIterator<CompanyNetworkTypeLinksSubscription>>
  >(args?: {
    where?: CompanyNetworkTypeLinksWhereInput;
    orderBy?: CompanyNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deviceNetworkTypeLinkses: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinksSubscription>>
  >(args?: {
    where?: DeviceNetworkTypeLinksWhereInput;
    orderBy?: DeviceNetworkTypeLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deviceProfileses: <
    T = Promise<AsyncIterator<DeviceProfilesSubscription>>
  >(args?: {
    where?: DeviceProfilesWhereInput;
    orderBy?: DeviceProfilesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkProtocolses: <
    T = Promise<AsyncIterator<NetworkProtocolsSubscription>>
  >(args?: {
    where?: NetworkProtocolsWhereInput;
    orderBy?: NetworkProtocolsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networkses: <T = Promise<AsyncIterator<NetworksSubscription>>>(args?: {
    where?: NetworksWhereInput;
    orderBy?: NetworksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DeviceNetworkTypeLinksConnection {
  pageInfo: PageInfo;
  edges: DeviceNetworkTypeLinksEdge[];
}

export interface DeviceNetworkTypeLinksConnectionPromise
  extends Promise<DeviceNetworkTypeLinksConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceNetworkTypeLinksEdge>>() => T;
  aggregate: <T = AggregateDeviceNetworkTypeLinksPromise>() => T;
}

export interface DeviceNetworkTypeLinksConnectionSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinksConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinksEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateDeviceNetworkTypeLinksSubscription>() => T;
}

export interface NetworkProvidersConnection {
  pageInfo: PageInfo;
  edges: NetworkProvidersEdge[];
}

export interface NetworkProvidersConnectionPromise
  extends Promise<NetworkProvidersConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkProvidersEdge>>() => T;
  aggregate: <T = AggregateNetworkProvidersPromise>() => T;
}

export interface NetworkProvidersConnectionSubscription
  extends Promise<AsyncIterator<NetworkProvidersConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkProvidersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkProvidersSubscription>() => T;
}

export interface ReportingProtocolsEdge {
  node: ReportingProtocols;
  cursor: String;
}

export interface ReportingProtocolsEdgePromise
  extends Promise<ReportingProtocolsEdge>,
    Fragmentable {
  node: <T = ReportingProtocolsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportingProtocolsEdgeSubscription
  extends Promise<AsyncIterator<ReportingProtocolsEdge>>,
    Fragmentable {
  node: <T = ReportingProtocolsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompaniesEdge {
  node: Companies;
  cursor: String;
}

export interface CompaniesEdgePromise
  extends Promise<CompaniesEdge>,
    Fragmentable {
  node: <T = CompaniesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompaniesEdgeSubscription
  extends Promise<AsyncIterator<CompaniesEdge>>,
    Fragmentable {
  node: <T = CompaniesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ApplicationNetworkTypeLinks",
    embedded: false
  },
  {
    name: "Applications",
    embedded: false
  },
  {
    name: "Companies",
    embedded: false
  },
  {
    name: "CompanyNetworkTypeLinks",
    embedded: false
  },
  {
    name: "CompanyTypes",
    embedded: false
  },
  {
    name: "DeviceNetworkTypeLinks",
    embedded: false
  },
  {
    name: "DeviceProfiles",
    embedded: false
  },
  {
    name: "Devices",
    embedded: false
  },
  {
    name: "EmailVerifications",
    embedded: false
  },
  {
    name: "NetworkProtocols",
    embedded: false
  },
  {
    name: "NetworkProviders",
    embedded: false
  },
  {
    name: "NetworkTypes",
    embedded: false
  },
  {
    name: "Networks",
    embedded: false
  },
  {
    name: "PasswordPolicies",
    embedded: false
  },
  {
    name: "ProtocolData",
    embedded: false
  },
  {
    name: "ReportingProtocols",
    embedded: false
  },
  {
    name: "UserRoles",
    embedded: false
  },
  {
    name: "Users",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
