// Code generated by Prisma (prisma@1.28.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  application: (where?: ApplicationWhereInput) => Promise<boolean>;
  applicationNetworkTypeLink: (
    where?: ApplicationNetworkTypeLinkWhereInput
  ) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  companyNetworkTypeLink: (
    where?: CompanyNetworkTypeLinkWhereInput
  ) => Promise<boolean>;
  companyType: (where?: CompanyTypeWhereInput) => Promise<boolean>;
  device: (where?: DeviceWhereInput) => Promise<boolean>;
  deviceNetworkTypeLink: (
    where?: DeviceNetworkTypeLinkWhereInput
  ) => Promise<boolean>;
  deviceProfile: (where?: DeviceProfileWhereInput) => Promise<boolean>;
  emailVerification: (where?: EmailVerificationWhereInput) => Promise<boolean>;
  network: (where?: NetworkWhereInput) => Promise<boolean>;
  networkProtocol: (where?: NetworkProtocolWhereInput) => Promise<boolean>;
  networkProvider: (where?: NetworkProviderWhereInput) => Promise<boolean>;
  networkType: (where?: NetworkTypeWhereInput) => Promise<boolean>;
  passwordPolicy: (where?: PasswordPolicyWhereInput) => Promise<boolean>;
  protocolData: (where?: ProtocolDataWhereInput) => Promise<boolean>;
  reportingProtocol: (where?: ReportingProtocolWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userRole: (where?: UserRoleWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  application: (where: ApplicationWhereUniqueInput) => ApplicationPromise;
  applications: (
    args?: {
      where?: ApplicationWhereInput;
      orderBy?: ApplicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Application>;
  applicationsConnection: (
    args?: {
      where?: ApplicationWhereInput;
      orderBy?: ApplicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ApplicationConnectionPromise;
  applicationNetworkTypeLink: (
    where: ApplicationNetworkTypeLinkWhereUniqueInput
  ) => ApplicationNetworkTypeLinkPromise;
  applicationNetworkTypeLinks: (
    args?: {
      where?: ApplicationNetworkTypeLinkWhereInput;
      orderBy?: ApplicationNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ApplicationNetworkTypeLink>;
  applicationNetworkTypeLinksConnection: (
    args?: {
      where?: ApplicationNetworkTypeLinkWhereInput;
      orderBy?: ApplicationNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ApplicationNetworkTypeLinkConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyPromise;
  companies: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Company>;
  companiesConnection: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompanyConnectionPromise;
  companyNetworkTypeLink: (
    where: CompanyNetworkTypeLinkWhereUniqueInput
  ) => CompanyNetworkTypeLinkPromise;
  companyNetworkTypeLinks: (
    args?: {
      where?: CompanyNetworkTypeLinkWhereInput;
      orderBy?: CompanyNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CompanyNetworkTypeLink>;
  companyNetworkTypeLinksConnection: (
    args?: {
      where?: CompanyNetworkTypeLinkWhereInput;
      orderBy?: CompanyNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompanyNetworkTypeLinkConnectionPromise;
  companyType: (where: CompanyTypeWhereUniqueInput) => CompanyTypePromise;
  companyTypes: (
    args?: {
      where?: CompanyTypeWhereInput;
      orderBy?: CompanyTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CompanyType>;
  companyTypesConnection: (
    args?: {
      where?: CompanyTypeWhereInput;
      orderBy?: CompanyTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompanyTypeConnectionPromise;
  device: (where: DeviceWhereUniqueInput) => DevicePromise;
  devices: (
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Device>;
  devicesConnection: (
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeviceConnectionPromise;
  deviceNetworkTypeLink: (
    where: DeviceNetworkTypeLinkWhereUniqueInput
  ) => DeviceNetworkTypeLinkPromise;
  deviceNetworkTypeLinks: (
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DeviceNetworkTypeLink>;
  deviceNetworkTypeLinksConnection: (
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeviceNetworkTypeLinkConnectionPromise;
  deviceProfile: (where: DeviceProfileWhereUniqueInput) => DeviceProfilePromise;
  deviceProfiles: (
    args?: {
      where?: DeviceProfileWhereInput;
      orderBy?: DeviceProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DeviceProfile>;
  deviceProfilesConnection: (
    args?: {
      where?: DeviceProfileWhereInput;
      orderBy?: DeviceProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeviceProfileConnectionPromise;
  emailVerification: (
    where: EmailVerificationWhereUniqueInput
  ) => EmailVerificationPromise;
  emailVerifications: (
    args?: {
      where?: EmailVerificationWhereInput;
      orderBy?: EmailVerificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EmailVerification>;
  emailVerificationsConnection: (
    args?: {
      where?: EmailVerificationWhereInput;
      orderBy?: EmailVerificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EmailVerificationConnectionPromise;
  network: (where: NetworkWhereUniqueInput) => NetworkPromise;
  networks: (
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Network>;
  networksConnection: (
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NetworkConnectionPromise;
  networkProtocol: (
    where: NetworkProtocolWhereUniqueInput
  ) => NetworkProtocolPromise;
  networkProtocols: (
    args?: {
      where?: NetworkProtocolWhereInput;
      orderBy?: NetworkProtocolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NetworkProtocol>;
  networkProtocolsConnection: (
    args?: {
      where?: NetworkProtocolWhereInput;
      orderBy?: NetworkProtocolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NetworkProtocolConnectionPromise;
  networkProvider: (
    where: NetworkProviderWhereUniqueInput
  ) => NetworkProviderPromise;
  networkProviders: (
    args?: {
      where?: NetworkProviderWhereInput;
      orderBy?: NetworkProviderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NetworkProvider>;
  networkProvidersConnection: (
    args?: {
      where?: NetworkProviderWhereInput;
      orderBy?: NetworkProviderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NetworkProviderConnectionPromise;
  networkType: (where: NetworkTypeWhereUniqueInput) => NetworkTypePromise;
  networkTypes: (
    args?: {
      where?: NetworkTypeWhereInput;
      orderBy?: NetworkTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NetworkType>;
  networkTypesConnection: (
    args?: {
      where?: NetworkTypeWhereInput;
      orderBy?: NetworkTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NetworkTypeConnectionPromise;
  passwordPolicy: (
    where: PasswordPolicyWhereUniqueInput
  ) => PasswordPolicyPromise;
  passwordPolicies: (
    args?: {
      where?: PasswordPolicyWhereInput;
      orderBy?: PasswordPolicyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PasswordPolicy>;
  passwordPoliciesConnection: (
    args?: {
      where?: PasswordPolicyWhereInput;
      orderBy?: PasswordPolicyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PasswordPolicyConnectionPromise;
  protocolData: (where: ProtocolDataWhereUniqueInput) => ProtocolDataPromise;
  protocolDatas: (
    args?: {
      where?: ProtocolDataWhereInput;
      orderBy?: ProtocolDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProtocolData>;
  protocolDatasConnection: (
    args?: {
      where?: ProtocolDataWhereInput;
      orderBy?: ProtocolDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProtocolDataConnectionPromise;
  reportingProtocol: (
    where: ReportingProtocolWhereUniqueInput
  ) => ReportingProtocolPromise;
  reportingProtocols: (
    args?: {
      where?: ReportingProtocolWhereInput;
      orderBy?: ReportingProtocolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ReportingProtocol>;
  reportingProtocolsConnection: (
    args?: {
      where?: ReportingProtocolWhereInput;
      orderBy?: ReportingProtocolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReportingProtocolConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userRole: (where: UserRoleWhereUniqueInput) => UserRolePromise;
  userRoles: (
    args?: {
      where?: UserRoleWhereInput;
      orderBy?: UserRoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserRole>;
  userRolesConnection: (
    args?: {
      where?: UserRoleWhereInput;
      orderBy?: UserRoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserRoleConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApplication: (data: ApplicationCreateInput) => ApplicationPromise;
  updateApplication: (
    args: { data: ApplicationUpdateInput; where: ApplicationWhereUniqueInput }
  ) => ApplicationPromise;
  updateManyApplications: (
    args: {
      data: ApplicationUpdateManyMutationInput;
      where?: ApplicationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertApplication: (
    args: {
      where: ApplicationWhereUniqueInput;
      create: ApplicationCreateInput;
      update: ApplicationUpdateInput;
    }
  ) => ApplicationPromise;
  deleteApplication: (where: ApplicationWhereUniqueInput) => ApplicationPromise;
  deleteManyApplications: (
    where?: ApplicationWhereInput
  ) => BatchPayloadPromise;
  createApplicationNetworkTypeLink: (
    data: ApplicationNetworkTypeLinkCreateInput
  ) => ApplicationNetworkTypeLinkPromise;
  updateApplicationNetworkTypeLink: (
    args: {
      data: ApplicationNetworkTypeLinkUpdateInput;
      where: ApplicationNetworkTypeLinkWhereUniqueInput;
    }
  ) => ApplicationNetworkTypeLinkPromise;
  updateManyApplicationNetworkTypeLinks: (
    args: {
      data: ApplicationNetworkTypeLinkUpdateManyMutationInput;
      where?: ApplicationNetworkTypeLinkWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertApplicationNetworkTypeLink: (
    args: {
      where: ApplicationNetworkTypeLinkWhereUniqueInput;
      create: ApplicationNetworkTypeLinkCreateInput;
      update: ApplicationNetworkTypeLinkUpdateInput;
    }
  ) => ApplicationNetworkTypeLinkPromise;
  deleteApplicationNetworkTypeLink: (
    where: ApplicationNetworkTypeLinkWhereUniqueInput
  ) => ApplicationNetworkTypeLinkPromise;
  deleteManyApplicationNetworkTypeLinks: (
    where?: ApplicationNetworkTypeLinkWhereInput
  ) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (
    args: { data: CompanyUpdateInput; where: CompanyWhereUniqueInput }
  ) => CompanyPromise;
  updateManyCompanies: (
    args: { data: CompanyUpdateManyMutationInput; where?: CompanyWhereInput }
  ) => BatchPayloadPromise;
  upsertCompany: (
    args: {
      where: CompanyWhereUniqueInput;
      create: CompanyCreateInput;
      update: CompanyUpdateInput;
    }
  ) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createCompanyNetworkTypeLink: (
    data: CompanyNetworkTypeLinkCreateInput
  ) => CompanyNetworkTypeLinkPromise;
  updateCompanyNetworkTypeLink: (
    args: {
      data: CompanyNetworkTypeLinkUpdateInput;
      where: CompanyNetworkTypeLinkWhereUniqueInput;
    }
  ) => CompanyNetworkTypeLinkPromise;
  updateManyCompanyNetworkTypeLinks: (
    args: {
      data: CompanyNetworkTypeLinkUpdateManyMutationInput;
      where?: CompanyNetworkTypeLinkWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCompanyNetworkTypeLink: (
    args: {
      where: CompanyNetworkTypeLinkWhereUniqueInput;
      create: CompanyNetworkTypeLinkCreateInput;
      update: CompanyNetworkTypeLinkUpdateInput;
    }
  ) => CompanyNetworkTypeLinkPromise;
  deleteCompanyNetworkTypeLink: (
    where: CompanyNetworkTypeLinkWhereUniqueInput
  ) => CompanyNetworkTypeLinkPromise;
  deleteManyCompanyNetworkTypeLinks: (
    where?: CompanyNetworkTypeLinkWhereInput
  ) => BatchPayloadPromise;
  createCompanyType: (data: CompanyTypeCreateInput) => CompanyTypePromise;
  updateCompanyType: (
    args: { data: CompanyTypeUpdateInput; where: CompanyTypeWhereUniqueInput }
  ) => CompanyTypePromise;
  updateManyCompanyTypes: (
    args: {
      data: CompanyTypeUpdateManyMutationInput;
      where?: CompanyTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCompanyType: (
    args: {
      where: CompanyTypeWhereUniqueInput;
      create: CompanyTypeCreateInput;
      update: CompanyTypeUpdateInput;
    }
  ) => CompanyTypePromise;
  deleteCompanyType: (where: CompanyTypeWhereUniqueInput) => CompanyTypePromise;
  deleteManyCompanyTypes: (
    where?: CompanyTypeWhereInput
  ) => BatchPayloadPromise;
  createDevice: (data: DeviceCreateInput) => DevicePromise;
  updateDevice: (
    args: { data: DeviceUpdateInput; where: DeviceWhereUniqueInput }
  ) => DevicePromise;
  updateManyDevices: (
    args: { data: DeviceUpdateManyMutationInput; where?: DeviceWhereInput }
  ) => BatchPayloadPromise;
  upsertDevice: (
    args: {
      where: DeviceWhereUniqueInput;
      create: DeviceCreateInput;
      update: DeviceUpdateInput;
    }
  ) => DevicePromise;
  deleteDevice: (where: DeviceWhereUniqueInput) => DevicePromise;
  deleteManyDevices: (where?: DeviceWhereInput) => BatchPayloadPromise;
  createDeviceNetworkTypeLink: (
    data: DeviceNetworkTypeLinkCreateInput
  ) => DeviceNetworkTypeLinkPromise;
  updateDeviceNetworkTypeLink: (
    args: {
      data: DeviceNetworkTypeLinkUpdateInput;
      where: DeviceNetworkTypeLinkWhereUniqueInput;
    }
  ) => DeviceNetworkTypeLinkPromise;
  updateManyDeviceNetworkTypeLinks: (
    args: {
      data: DeviceNetworkTypeLinkUpdateManyMutationInput;
      where?: DeviceNetworkTypeLinkWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDeviceNetworkTypeLink: (
    args: {
      where: DeviceNetworkTypeLinkWhereUniqueInput;
      create: DeviceNetworkTypeLinkCreateInput;
      update: DeviceNetworkTypeLinkUpdateInput;
    }
  ) => DeviceNetworkTypeLinkPromise;
  deleteDeviceNetworkTypeLink: (
    where: DeviceNetworkTypeLinkWhereUniqueInput
  ) => DeviceNetworkTypeLinkPromise;
  deleteManyDeviceNetworkTypeLinks: (
    where?: DeviceNetworkTypeLinkWhereInput
  ) => BatchPayloadPromise;
  createDeviceProfile: (data: DeviceProfileCreateInput) => DeviceProfilePromise;
  updateDeviceProfile: (
    args: {
      data: DeviceProfileUpdateInput;
      where: DeviceProfileWhereUniqueInput;
    }
  ) => DeviceProfilePromise;
  updateManyDeviceProfiles: (
    args: {
      data: DeviceProfileUpdateManyMutationInput;
      where?: DeviceProfileWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDeviceProfile: (
    args: {
      where: DeviceProfileWhereUniqueInput;
      create: DeviceProfileCreateInput;
      update: DeviceProfileUpdateInput;
    }
  ) => DeviceProfilePromise;
  deleteDeviceProfile: (
    where: DeviceProfileWhereUniqueInput
  ) => DeviceProfilePromise;
  deleteManyDeviceProfiles: (
    where?: DeviceProfileWhereInput
  ) => BatchPayloadPromise;
  createEmailVerification: (
    data: EmailVerificationCreateInput
  ) => EmailVerificationPromise;
  updateEmailVerification: (
    args: {
      data: EmailVerificationUpdateInput;
      where: EmailVerificationWhereUniqueInput;
    }
  ) => EmailVerificationPromise;
  updateManyEmailVerifications: (
    args: {
      data: EmailVerificationUpdateManyMutationInput;
      where?: EmailVerificationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEmailVerification: (
    args: {
      where: EmailVerificationWhereUniqueInput;
      create: EmailVerificationCreateInput;
      update: EmailVerificationUpdateInput;
    }
  ) => EmailVerificationPromise;
  deleteEmailVerification: (
    where: EmailVerificationWhereUniqueInput
  ) => EmailVerificationPromise;
  deleteManyEmailVerifications: (
    where?: EmailVerificationWhereInput
  ) => BatchPayloadPromise;
  createNetwork: (data: NetworkCreateInput) => NetworkPromise;
  updateNetwork: (
    args: { data: NetworkUpdateInput; where: NetworkWhereUniqueInput }
  ) => NetworkPromise;
  updateManyNetworks: (
    args: { data: NetworkUpdateManyMutationInput; where?: NetworkWhereInput }
  ) => BatchPayloadPromise;
  upsertNetwork: (
    args: {
      where: NetworkWhereUniqueInput;
      create: NetworkCreateInput;
      update: NetworkUpdateInput;
    }
  ) => NetworkPromise;
  deleteNetwork: (where: NetworkWhereUniqueInput) => NetworkPromise;
  deleteManyNetworks: (where?: NetworkWhereInput) => BatchPayloadPromise;
  createNetworkProtocol: (
    data: NetworkProtocolCreateInput
  ) => NetworkProtocolPromise;
  updateNetworkProtocol: (
    args: {
      data: NetworkProtocolUpdateInput;
      where: NetworkProtocolWhereUniqueInput;
    }
  ) => NetworkProtocolPromise;
  updateManyNetworkProtocols: (
    args: {
      data: NetworkProtocolUpdateManyMutationInput;
      where?: NetworkProtocolWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNetworkProtocol: (
    args: {
      where: NetworkProtocolWhereUniqueInput;
      create: NetworkProtocolCreateInput;
      update: NetworkProtocolUpdateInput;
    }
  ) => NetworkProtocolPromise;
  deleteNetworkProtocol: (
    where: NetworkProtocolWhereUniqueInput
  ) => NetworkProtocolPromise;
  deleteManyNetworkProtocols: (
    where?: NetworkProtocolWhereInput
  ) => BatchPayloadPromise;
  createNetworkProvider: (
    data: NetworkProviderCreateInput
  ) => NetworkProviderPromise;
  updateNetworkProvider: (
    args: {
      data: NetworkProviderUpdateInput;
      where: NetworkProviderWhereUniqueInput;
    }
  ) => NetworkProviderPromise;
  updateManyNetworkProviders: (
    args: {
      data: NetworkProviderUpdateManyMutationInput;
      where?: NetworkProviderWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNetworkProvider: (
    args: {
      where: NetworkProviderWhereUniqueInput;
      create: NetworkProviderCreateInput;
      update: NetworkProviderUpdateInput;
    }
  ) => NetworkProviderPromise;
  deleteNetworkProvider: (
    where: NetworkProviderWhereUniqueInput
  ) => NetworkProviderPromise;
  deleteManyNetworkProviders: (
    where?: NetworkProviderWhereInput
  ) => BatchPayloadPromise;
  createNetworkType: (data: NetworkTypeCreateInput) => NetworkTypePromise;
  updateNetworkType: (
    args: { data: NetworkTypeUpdateInput; where: NetworkTypeWhereUniqueInput }
  ) => NetworkTypePromise;
  updateManyNetworkTypes: (
    args: {
      data: NetworkTypeUpdateManyMutationInput;
      where?: NetworkTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNetworkType: (
    args: {
      where: NetworkTypeWhereUniqueInput;
      create: NetworkTypeCreateInput;
      update: NetworkTypeUpdateInput;
    }
  ) => NetworkTypePromise;
  deleteNetworkType: (where: NetworkTypeWhereUniqueInput) => NetworkTypePromise;
  deleteManyNetworkTypes: (
    where?: NetworkTypeWhereInput
  ) => BatchPayloadPromise;
  createPasswordPolicy: (
    data: PasswordPolicyCreateInput
  ) => PasswordPolicyPromise;
  updatePasswordPolicy: (
    args: {
      data: PasswordPolicyUpdateInput;
      where: PasswordPolicyWhereUniqueInput;
    }
  ) => PasswordPolicyPromise;
  updateManyPasswordPolicies: (
    args: {
      data: PasswordPolicyUpdateManyMutationInput;
      where?: PasswordPolicyWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPasswordPolicy: (
    args: {
      where: PasswordPolicyWhereUniqueInput;
      create: PasswordPolicyCreateInput;
      update: PasswordPolicyUpdateInput;
    }
  ) => PasswordPolicyPromise;
  deletePasswordPolicy: (
    where: PasswordPolicyWhereUniqueInput
  ) => PasswordPolicyPromise;
  deleteManyPasswordPolicies: (
    where?: PasswordPolicyWhereInput
  ) => BatchPayloadPromise;
  createProtocolData: (data: ProtocolDataCreateInput) => ProtocolDataPromise;
  updateProtocolData: (
    args: { data: ProtocolDataUpdateInput; where: ProtocolDataWhereUniqueInput }
  ) => ProtocolDataPromise;
  updateManyProtocolDatas: (
    args: {
      data: ProtocolDataUpdateManyMutationInput;
      where?: ProtocolDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProtocolData: (
    args: {
      where: ProtocolDataWhereUniqueInput;
      create: ProtocolDataCreateInput;
      update: ProtocolDataUpdateInput;
    }
  ) => ProtocolDataPromise;
  deleteProtocolData: (
    where: ProtocolDataWhereUniqueInput
  ) => ProtocolDataPromise;
  deleteManyProtocolDatas: (
    where?: ProtocolDataWhereInput
  ) => BatchPayloadPromise;
  createReportingProtocol: (
    data: ReportingProtocolCreateInput
  ) => ReportingProtocolPromise;
  updateReportingProtocol: (
    args: {
      data: ReportingProtocolUpdateInput;
      where: ReportingProtocolWhereUniqueInput;
    }
  ) => ReportingProtocolPromise;
  updateManyReportingProtocols: (
    args: {
      data: ReportingProtocolUpdateManyMutationInput;
      where?: ReportingProtocolWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertReportingProtocol: (
    args: {
      where: ReportingProtocolWhereUniqueInput;
      create: ReportingProtocolCreateInput;
      update: ReportingProtocolUpdateInput;
    }
  ) => ReportingProtocolPromise;
  deleteReportingProtocol: (
    where: ReportingProtocolWhereUniqueInput
  ) => ReportingProtocolPromise;
  deleteManyReportingProtocols: (
    where?: ReportingProtocolWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserRole: (data: UserRoleCreateInput) => UserRolePromise;
  updateUserRole: (
    args: { data: UserRoleUpdateInput; where: UserRoleWhereUniqueInput }
  ) => UserRolePromise;
  updateManyUserRoles: (
    args: { data: UserRoleUpdateManyMutationInput; where?: UserRoleWhereInput }
  ) => BatchPayloadPromise;
  upsertUserRole: (
    args: {
      where: UserRoleWhereUniqueInput;
      create: UserRoleCreateInput;
      update: UserRoleUpdateInput;
    }
  ) => UserRolePromise;
  deleteUserRole: (where: UserRoleWhereUniqueInput) => UserRolePromise;
  deleteManyUserRoles: (where?: UserRoleWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  application: (
    where?: ApplicationSubscriptionWhereInput
  ) => ApplicationSubscriptionPayloadSubscription;
  applicationNetworkTypeLink: (
    where?: ApplicationNetworkTypeLinkSubscriptionWhereInput
  ) => ApplicationNetworkTypeLinkSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  companyNetworkTypeLink: (
    where?: CompanyNetworkTypeLinkSubscriptionWhereInput
  ) => CompanyNetworkTypeLinkSubscriptionPayloadSubscription;
  companyType: (
    where?: CompanyTypeSubscriptionWhereInput
  ) => CompanyTypeSubscriptionPayloadSubscription;
  device: (
    where?: DeviceSubscriptionWhereInput
  ) => DeviceSubscriptionPayloadSubscription;
  deviceNetworkTypeLink: (
    where?: DeviceNetworkTypeLinkSubscriptionWhereInput
  ) => DeviceNetworkTypeLinkSubscriptionPayloadSubscription;
  deviceProfile: (
    where?: DeviceProfileSubscriptionWhereInput
  ) => DeviceProfileSubscriptionPayloadSubscription;
  emailVerification: (
    where?: EmailVerificationSubscriptionWhereInput
  ) => EmailVerificationSubscriptionPayloadSubscription;
  network: (
    where?: NetworkSubscriptionWhereInput
  ) => NetworkSubscriptionPayloadSubscription;
  networkProtocol: (
    where?: NetworkProtocolSubscriptionWhereInput
  ) => NetworkProtocolSubscriptionPayloadSubscription;
  networkProvider: (
    where?: NetworkProviderSubscriptionWhereInput
  ) => NetworkProviderSubscriptionPayloadSubscription;
  networkType: (
    where?: NetworkTypeSubscriptionWhereInput
  ) => NetworkTypeSubscriptionPayloadSubscription;
  passwordPolicy: (
    where?: PasswordPolicySubscriptionWhereInput
  ) => PasswordPolicySubscriptionPayloadSubscription;
  protocolData: (
    where?: ProtocolDataSubscriptionWhereInput
  ) => ProtocolDataSubscriptionPayloadSubscription;
  reportingProtocol: (
    where?: ReportingProtocolSubscriptionWhereInput
  ) => ReportingProtocolSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userRole: (
    where?: UserRoleSubscriptionWhereInput
  ) => UserRoleSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PasswordPolicyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ruleText_ASC"
  | "ruleText_DESC"
  | "ruleRegExp_ASC"
  | "ruleRegExp_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProtocolDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dataIdentifier_ASC"
  | "dataIdentifier_DESC"
  | "dataValue_ASC"
  | "dataValue_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "baseUrl_ASC"
  | "baseUrl_DESC"
  | "securityData_ASC"
  | "securityData_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkProtocolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "protocolHandler_ASC"
  | "protocolHandler_DESC"
  | "networkProtocolVersion_ASC"
  | "networkProtocolVersion_DESC"
  | "masterProtocol_ASC"
  | "masterProtocol_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeviceProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmailVerificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uuid_ASC"
  | "uuid_DESC"
  | "email_ASC"
  | "email_DESC"
  | "changeRequested_ASC"
  | "changeRequested_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ApplicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "baseUrl_ASC"
  | "baseUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyNetworkTypeLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ApplicationNetworkTypeLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeviceNetworkTypeLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "networkSettings_ASC"
  | "networkSettings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "lastVerifiedEmail_ASC"
  | "lastVerifiedEmail_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeviceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "deviceModel_ASC"
  | "deviceModel_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkProviderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReportingProtocolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "protocolHandler_ASC"
  | "protocolHandler_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface NetworkUpdateManyWithoutNetworkProtocolInput {
  create?:
    | NetworkCreateWithoutNetworkProtocolInput[]
    | NetworkCreateWithoutNetworkProtocolInput;
  delete?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  connect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  set?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  disconnect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  update?:
    | NetworkUpdateWithWhereUniqueWithoutNetworkProtocolInput[]
    | NetworkUpdateWithWhereUniqueWithoutNetworkProtocolInput;
  upsert?:
    | NetworkUpsertWithWhereUniqueWithoutNetworkProtocolInput[]
    | NetworkUpsertWithWhereUniqueWithoutNetworkProtocolInput;
  deleteMany?: NetworkScalarWhereInput[] | NetworkScalarWhereInput;
  updateMany?:
    | NetworkUpdateManyWithWhereNestedInput[]
    | NetworkUpdateManyWithWhereNestedInput;
}

export type ApplicationWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CompanyUpdateOneRequiredWithoutDeviceProfilesInput {
  create?: CompanyCreateWithoutDeviceProfilesInput;
  update?: CompanyUpdateWithoutDeviceProfilesDataInput;
  upsert?: CompanyUpsertWithoutDeviceProfilesInput;
  connect?: CompanyWhereUniqueInput;
}

export interface UserWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  lastVerifiedEmail?: String;
  lastVerifiedEmail_not?: String;
  lastVerifiedEmail_in?: String[] | String;
  lastVerifiedEmail_not_in?: String[] | String;
  lastVerifiedEmail_lt?: String;
  lastVerifiedEmail_lte?: String;
  lastVerifiedEmail_gt?: String;
  lastVerifiedEmail_gte?: String;
  lastVerifiedEmail_contains?: String;
  lastVerifiedEmail_not_contains?: String;
  lastVerifiedEmail_starts_with?: String;
  lastVerifiedEmail_not_starts_with?: String;
  lastVerifiedEmail_ends_with?: String;
  lastVerifiedEmail_not_ends_with?: String;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  company?: CompanyWhereInput;
  passwordHash?: String;
  passwordHash_not?: String;
  passwordHash_in?: String[] | String;
  passwordHash_not_in?: String[] | String;
  passwordHash_lt?: String;
  passwordHash_lte?: String;
  passwordHash_gt?: String;
  passwordHash_gte?: String;
  passwordHash_contains?: String;
  passwordHash_not_contains?: String;
  passwordHash_starts_with?: String;
  passwordHash_not_starts_with?: String;
  passwordHash_ends_with?: String;
  passwordHash_not_ends_with?: String;
  role?: UserRoleWhereInput;
  emailVerifications_every?: EmailVerificationWhereInput;
  emailVerifications_some?: EmailVerificationWhereInput;
  emailVerifications_none?: EmailVerificationWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CompanyUpdateWithoutDeviceProfilesDataInput {
  name?: String;
  type?: CompanyTypeUpdateOneWithoutCompaniesInput;
  applications?: ApplicationUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyUpdateManyWithoutCompanyInput;
  users?: UserUpdateManyWithoutCompanyInput;
}

export interface UserRoleWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: UserRoleWhereInput[] | UserRoleWhereInput;
  OR?: UserRoleWhereInput[] | UserRoleWhereInput;
  NOT?: UserRoleWhereInput[] | UserRoleWhereInput;
}

export interface PasswordPolicyUpdateManyWithoutCompanyInput {
  create?:
    | PasswordPolicyCreateWithoutCompanyInput[]
    | PasswordPolicyCreateWithoutCompanyInput;
  delete?: PasswordPolicyWhereUniqueInput[] | PasswordPolicyWhereUniqueInput;
  connect?: PasswordPolicyWhereUniqueInput[] | PasswordPolicyWhereUniqueInput;
  set?: PasswordPolicyWhereUniqueInput[] | PasswordPolicyWhereUniqueInput;
  disconnect?:
    | PasswordPolicyWhereUniqueInput[]
    | PasswordPolicyWhereUniqueInput;
  update?:
    | PasswordPolicyUpdateWithWhereUniqueWithoutCompanyInput[]
    | PasswordPolicyUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | PasswordPolicyUpsertWithWhereUniqueWithoutCompanyInput[]
    | PasswordPolicyUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?:
    | PasswordPolicyScalarWhereInput[]
    | PasswordPolicyScalarWhereInput;
  updateMany?:
    | PasswordPolicyUpdateManyWithWhereNestedInput[]
    | PasswordPolicyUpdateManyWithWhereNestedInput;
}

export interface PasswordPolicyWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  ruleText?: String;
  ruleText_not?: String;
  ruleText_in?: String[] | String;
  ruleText_not_in?: String[] | String;
  ruleText_lt?: String;
  ruleText_lte?: String;
  ruleText_gt?: String;
  ruleText_gte?: String;
  ruleText_contains?: String;
  ruleText_not_contains?: String;
  ruleText_starts_with?: String;
  ruleText_not_starts_with?: String;
  ruleText_ends_with?: String;
  ruleText_not_ends_with?: String;
  ruleRegExp?: String;
  ruleRegExp_not?: String;
  ruleRegExp_in?: String[] | String;
  ruleRegExp_not_in?: String[] | String;
  ruleRegExp_lt?: String;
  ruleRegExp_lte?: String;
  ruleRegExp_gt?: String;
  ruleRegExp_gte?: String;
  ruleRegExp_contains?: String;
  ruleRegExp_not_contains?: String;
  ruleRegExp_starts_with?: String;
  ruleRegExp_not_starts_with?: String;
  ruleRegExp_ends_with?: String;
  ruleRegExp_not_ends_with?: String;
  company?: CompanyWhereInput;
  AND?: PasswordPolicyWhereInput[] | PasswordPolicyWhereInput;
  OR?: PasswordPolicyWhereInput[] | PasswordPolicyWhereInput;
  NOT?: PasswordPolicyWhereInput[] | PasswordPolicyWhereInput;
}

export interface PasswordPolicyUpdateWithWhereUniqueWithoutCompanyInput {
  where: PasswordPolicyWhereUniqueInput;
  data: PasswordPolicyUpdateWithoutCompanyDataInput;
}

export interface NetworkProviderWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networks_every?: NetworkWhereInput;
  networks_some?: NetworkWhereInput;
  networks_none?: NetworkWhereInput;
  AND?: NetworkProviderWhereInput[] | NetworkProviderWhereInput;
  OR?: NetworkProviderWhereInput[] | NetworkProviderWhereInput;
  NOT?: NetworkProviderWhereInput[] | NetworkProviderWhereInput;
}

export interface ApplicationUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput {
  create?: ApplicationCreateWithoutApplicationNetworkTypeLinksInput;
  update?: ApplicationUpdateWithoutApplicationNetworkTypeLinksDataInput;
  upsert?: ApplicationUpsertWithoutApplicationNetworkTypeLinksInput;
  connect?: ApplicationWhereUniqueInput;
}

export interface CompanyCreateOneWithoutUsersInput {
  create?: CompanyCreateWithoutUsersInput;
  connect?: CompanyWhereUniqueInput;
}

export interface ApplicationUpdateWithoutApplicationNetworkTypeLinksDataInput {
  company?: CompanyUpdateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolUpdateOneWithoutApplicationsInput;
  devices?: DeviceUpdateManyWithoutApplicationInput;
}

export interface PasswordPolicyUpdateWithoutCompanyDataInput {
  ruleText?: String;
  ruleRegExp?: String;
}

export interface ReportingProtocolUpdateOneWithoutApplicationsInput {
  create?: ReportingProtocolCreateWithoutApplicationsInput;
  update?: ReportingProtocolUpdateWithoutApplicationsDataInput;
  upsert?: ReportingProtocolUpsertWithoutApplicationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ReportingProtocolWhereUniqueInput;
}

export interface NetworkProtocolWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  protocolHandler?: String;
  protocolHandler_not?: String;
  protocolHandler_in?: String[] | String;
  protocolHandler_not_in?: String[] | String;
  protocolHandler_lt?: String;
  protocolHandler_lte?: String;
  protocolHandler_gt?: String;
  protocolHandler_gte?: String;
  protocolHandler_contains?: String;
  protocolHandler_not_contains?: String;
  protocolHandler_starts_with?: String;
  protocolHandler_not_starts_with?: String;
  protocolHandler_ends_with?: String;
  protocolHandler_not_ends_with?: String;
  networkType?: NetworkTypeWhereInput;
  networkProtocolVersion?: String;
  networkProtocolVersion_not?: String;
  networkProtocolVersion_in?: String[] | String;
  networkProtocolVersion_not_in?: String[] | String;
  networkProtocolVersion_lt?: String;
  networkProtocolVersion_lte?: String;
  networkProtocolVersion_gt?: String;
  networkProtocolVersion_gte?: String;
  networkProtocolVersion_contains?: String;
  networkProtocolVersion_not_contains?: String;
  networkProtocolVersion_starts_with?: String;
  networkProtocolVersion_not_starts_with?: String;
  networkProtocolVersion_ends_with?: String;
  networkProtocolVersion_not_ends_with?: String;
  masterProtocol?: Int;
  masterProtocol_not?: Int;
  masterProtocol_in?: Int[] | Int;
  masterProtocol_not_in?: Int[] | Int;
  masterProtocol_lt?: Int;
  masterProtocol_lte?: Int;
  masterProtocol_gt?: Int;
  masterProtocol_gte?: Int;
  networks_every?: NetworkWhereInput;
  networks_some?: NetworkWhereInput;
  networks_none?: NetworkWhereInput;
  protocolData_every?: ProtocolDataWhereInput;
  protocolData_some?: ProtocolDataWhereInput;
  protocolData_none?: ProtocolDataWhereInput;
  AND?: NetworkProtocolWhereInput[] | NetworkProtocolWhereInput;
  OR?: NetworkProtocolWhereInput[] | NetworkProtocolWhereInput;
  NOT?: NetworkProtocolWhereInput[] | NetworkProtocolWhereInput;
}

export interface ReportingProtocolUpdateWithoutApplicationsDataInput {
  name?: String;
  protocolHandler?: String;
}

export interface ReportingProtocolSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReportingProtocolWhereInput;
  AND?:
    | ReportingProtocolSubscriptionWhereInput[]
    | ReportingProtocolSubscriptionWhereInput;
  OR?:
    | ReportingProtocolSubscriptionWhereInput[]
    | ReportingProtocolSubscriptionWhereInput;
  NOT?:
    | ReportingProtocolSubscriptionWhereInput[]
    | ReportingProtocolSubscriptionWhereInput;
}

export interface ReportingProtocolUpsertWithoutApplicationsInput {
  update: ReportingProtocolUpdateWithoutApplicationsDataInput;
  create: ReportingProtocolCreateWithoutApplicationsInput;
}

export interface DeviceProfileWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkType?: NetworkTypeWhereInput;
  company?: CompanyWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  deviceNetworkTypeLinks_every?: DeviceNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_some?: DeviceNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_none?: DeviceNetworkTypeLinkWhereInput;
  AND?: DeviceProfileWhereInput[] | DeviceProfileWhereInput;
  OR?: DeviceProfileWhereInput[] | DeviceProfileWhereInput;
  NOT?: DeviceProfileWhereInput[] | DeviceProfileWhereInput;
}

export interface DeviceUpdateManyWithoutApplicationInput {
  create?:
    | DeviceCreateWithoutApplicationInput[]
    | DeviceCreateWithoutApplicationInput;
  delete?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  connect?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  set?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  disconnect?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
  update?:
    | DeviceUpdateWithWhereUniqueWithoutApplicationInput[]
    | DeviceUpdateWithWhereUniqueWithoutApplicationInput;
  upsert?:
    | DeviceUpsertWithWhereUniqueWithoutApplicationInput[]
    | DeviceUpsertWithWhereUniqueWithoutApplicationInput;
  deleteMany?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
  updateMany?:
    | DeviceUpdateManyWithWhereNestedInput[]
    | DeviceUpdateManyWithWhereNestedInput;
}

export interface PasswordPolicySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PasswordPolicyWhereInput;
  AND?:
    | PasswordPolicySubscriptionWhereInput[]
    | PasswordPolicySubscriptionWhereInput;
  OR?:
    | PasswordPolicySubscriptionWhereInput[]
    | PasswordPolicySubscriptionWhereInput;
  NOT?:
    | PasswordPolicySubscriptionWhereInput[]
    | PasswordPolicySubscriptionWhereInput;
}

export interface DeviceUpdateWithWhereUniqueWithoutApplicationInput {
  where: DeviceWhereUniqueInput;
  data: DeviceUpdateWithoutApplicationDataInput;
}

export interface NetworkTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkTypeWhereInput;
  AND?: NetworkTypeSubscriptionWhereInput[] | NetworkTypeSubscriptionWhereInput;
  OR?: NetworkTypeSubscriptionWhereInput[] | NetworkTypeSubscriptionWhereInput;
  NOT?: NetworkTypeSubscriptionWhereInput[] | NetworkTypeSubscriptionWhereInput;
}

export interface DeviceUpdateWithoutApplicationDataInput {
  name?: String;
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutDeviceInput;
}

export interface CompanyNetworkTypeLinkWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  company?: CompanyWhereInput;
  networkType?: NetworkTypeWhereInput;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?: CompanyNetworkTypeLinkWhereInput[] | CompanyNetworkTypeLinkWhereInput;
  OR?: CompanyNetworkTypeLinkWhereInput[] | CompanyNetworkTypeLinkWhereInput;
  NOT?: CompanyNetworkTypeLinkWhereInput[] | CompanyNetworkTypeLinkWhereInput;
}

export interface DeviceNetworkTypeLinkUpdateManyWithoutDeviceInput {
  create?:
    | DeviceNetworkTypeLinkCreateWithoutDeviceInput[]
    | DeviceNetworkTypeLinkCreateWithoutDeviceInput;
  delete?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  connect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  set?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  update?:
    | DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceInput[]
    | DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceInput;
  upsert?:
    | DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceInput[]
    | DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceInput;
  deleteMany?:
    | DeviceNetworkTypeLinkScalarWhereInput[]
    | DeviceNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface NetworkTypeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  applicationNetworkTypeLinks_every?: ApplicationNetworkTypeLinkWhereInput;
  applicationNetworkTypeLinks_some?: ApplicationNetworkTypeLinkWhereInput;
  applicationNetworkTypeLinks_none?: ApplicationNetworkTypeLinkWhereInput;
  companyNetworkTypeLinks_every?: CompanyNetworkTypeLinkWhereInput;
  companyNetworkTypeLinks_some?: CompanyNetworkTypeLinkWhereInput;
  companyNetworkTypeLinks_none?: CompanyNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_every?: DeviceNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_some?: DeviceNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_none?: DeviceNetworkTypeLinkWhereInput;
  deviceProfiles_every?: DeviceProfileWhereInput;
  deviceProfiles_some?: DeviceProfileWhereInput;
  deviceProfiles_none?: DeviceProfileWhereInput;
  networkProtocols_every?: NetworkProtocolWhereInput;
  networkProtocols_some?: NetworkProtocolWhereInput;
  networkProtocols_none?: NetworkProtocolWhereInput;
  networks_every?: NetworkWhereInput;
  networks_some?: NetworkWhereInput;
  networks_none?: NetworkWhereInput;
  AND?: NetworkTypeWhereInput[] | NetworkTypeWhereInput;
  OR?: NetworkTypeWhereInput[] | NetworkTypeWhereInput;
  NOT?: NetworkTypeWhereInput[] | NetworkTypeWhereInput;
}

export interface DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput;
  data: DeviceNetworkTypeLinkUpdateWithoutDeviceDataInput;
}

export interface ApplicationNetworkTypeLinkWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  application?: ApplicationWhereInput;
  networkType?: NetworkTypeWhereInput;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | ApplicationNetworkTypeLinkWhereInput[]
    | ApplicationNetworkTypeLinkWhereInput;
  OR?:
    | ApplicationNetworkTypeLinkWhereInput[]
    | ApplicationNetworkTypeLinkWhereInput;
  NOT?:
    | ApplicationNetworkTypeLinkWhereInput[]
    | ApplicationNetworkTypeLinkWhereInput;
}

export interface DeviceNetworkTypeLinkUpdateWithoutDeviceDataInput {
  networkType?: NetworkTypeUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  deviceProfile?: DeviceProfileUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface DeviceProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeviceProfileWhereInput;
  AND?:
    | DeviceProfileSubscriptionWhereInput[]
    | DeviceProfileSubscriptionWhereInput;
  OR?:
    | DeviceProfileSubscriptionWhereInput[]
    | DeviceProfileSubscriptionWhereInput;
  NOT?:
    | DeviceProfileSubscriptionWhereInput[]
    | DeviceProfileSubscriptionWhereInput;
}

export interface NetworkTypeUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput {
  create?: NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput;
  update?: NetworkTypeUpdateWithoutDeviceNetworkTypeLinksDataInput;
  upsert?: NetworkTypeUpsertWithoutDeviceNetworkTypeLinksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface DeviceNetworkTypeLinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeviceNetworkTypeLinkWhereInput;
  AND?:
    | DeviceNetworkTypeLinkSubscriptionWhereInput[]
    | DeviceNetworkTypeLinkSubscriptionWhereInput;
  OR?:
    | DeviceNetworkTypeLinkSubscriptionWhereInput[]
    | DeviceNetworkTypeLinkSubscriptionWhereInput;
  NOT?:
    | DeviceNetworkTypeLinkSubscriptionWhereInput[]
    | DeviceNetworkTypeLinkSubscriptionWhereInput;
}

export interface NetworkTypeUpdateWithoutDeviceNetworkTypeLinksDataInput {
  name?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolUpdateManyWithoutNetworkTypeInput;
  networks?: NetworkUpdateManyWithoutNetworkTypeInput;
}

export interface ApplicationWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  company?: CompanyWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  reportingProtocol?: ReportingProtocolWhereInput;
  applicationNetworkTypeLinks_every?: ApplicationNetworkTypeLinkWhereInput;
  applicationNetworkTypeLinks_some?: ApplicationNetworkTypeLinkWhereInput;
  applicationNetworkTypeLinks_none?: ApplicationNetworkTypeLinkWhereInput;
  devices_every?: DeviceWhereInput;
  devices_some?: DeviceWhereInput;
  devices_none?: DeviceWhereInput;
  AND?: ApplicationWhereInput[] | ApplicationWhereInput;
  OR?: ApplicationWhereInput[] | ApplicationWhereInput;
  NOT?: ApplicationWhereInput[] | ApplicationWhereInput;
}

export interface CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput {
  create?:
    | CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput;
  delete?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  connect?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  set?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  update?:
    | CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | CompanyNetworkTypeLinkScalarWhereInput[]
    | CompanyNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface CompanyNetworkTypeLinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyNetworkTypeLinkWhereInput;
  AND?:
    | CompanyNetworkTypeLinkSubscriptionWhereInput[]
    | CompanyNetworkTypeLinkSubscriptionWhereInput;
  OR?:
    | CompanyNetworkTypeLinkSubscriptionWhereInput[]
    | CompanyNetworkTypeLinkSubscriptionWhereInput;
  NOT?:
    | CompanyNetworkTypeLinkSubscriptionWhereInput[]
    | CompanyNetworkTypeLinkSubscriptionWhereInput;
}

export interface CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput;
  data: CompanyNetworkTypeLinkUpdateWithoutNetworkTypeDataInput;
}

export interface ApplicationNetworkTypeLinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ApplicationNetworkTypeLinkWhereInput;
  AND?:
    | ApplicationNetworkTypeLinkSubscriptionWhereInput[]
    | ApplicationNetworkTypeLinkSubscriptionWhereInput;
  OR?:
    | ApplicationNetworkTypeLinkSubscriptionWhereInput[]
    | ApplicationNetworkTypeLinkSubscriptionWhereInput;
  NOT?:
    | ApplicationNetworkTypeLinkSubscriptionWhereInput[]
    | ApplicationNetworkTypeLinkSubscriptionWhereInput;
}

export interface CompanyNetworkTypeLinkUpdateWithoutNetworkTypeDataInput {
  company?: CompanyUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface ApplicationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ApplicationWhereInput;
  AND?: ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput;
  OR?: ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput;
  NOT?: ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput;
}

export interface CompanyUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput {
  create?: CompanyCreateWithoutCompanyNetworkTypeLinksInput;
  update?: CompanyUpdateWithoutCompanyNetworkTypeLinksDataInput;
  upsert?: CompanyUpsertWithoutCompanyNetworkTypeLinksInput;
  connect?: CompanyWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRoleDataInput;
  create: UserCreateWithoutRoleInput;
}

export interface CompanyUpdateWithoutCompanyNetworkTypeLinksDataInput {
  name?: String;
  type?: CompanyTypeUpdateOneWithoutCompaniesInput;
  applications?: ApplicationUpdateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyUpdateManyWithoutCompanyInput;
  users?: UserUpdateManyWithoutCompanyInput;
}

export interface UserUpdateWithoutRoleDataInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  company?: CompanyUpdateOneRequiredWithoutUsersInput;
  passwordHash?: String;
  emailVerifications?: EmailVerificationUpdateManyWithoutUserInput;
}

export interface ApplicationUpdateManyWithoutCompanyInput {
  create?:
    | ApplicationCreateWithoutCompanyInput[]
    | ApplicationCreateWithoutCompanyInput;
  delete?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  connect?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  set?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  disconnect?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  update?:
    | ApplicationUpdateWithWhereUniqueWithoutCompanyInput[]
    | ApplicationUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | ApplicationUpsertWithWhereUniqueWithoutCompanyInput[]
    | ApplicationUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: ApplicationScalarWhereInput[] | ApplicationScalarWhereInput;
  updateMany?:
    | ApplicationUpdateManyWithWhereNestedInput[]
    | ApplicationUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyWithoutRoleInput {
  create?: UserCreateWithoutRoleInput[] | UserCreateWithoutRoleInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutRoleInput[]
    | UserUpdateWithWhereUniqueWithoutRoleInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutRoleInput[]
    | UserUpsertWithWhereUniqueWithoutRoleInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ApplicationUpdateWithWhereUniqueWithoutCompanyInput {
  where: ApplicationWhereUniqueInput;
  data: ApplicationUpdateWithoutCompanyDataInput;
}

export interface UserRoleUpdateInput {
  name?: String;
  users?: UserUpdateManyWithoutRoleInput;
}

export interface ApplicationUpdateWithoutCompanyDataInput {
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolUpdateOneWithoutApplicationsInput;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput;
  devices?: DeviceUpdateManyWithoutApplicationInput;
}

export interface UserCreateManyWithoutRoleInput {
  create?: UserCreateWithoutRoleInput[] | UserCreateWithoutRoleInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput {
  create?:
    | ApplicationNetworkTypeLinkCreateWithoutApplicationInput[]
    | ApplicationNetworkTypeLinkCreateWithoutApplicationInput;
  delete?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  connect?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  set?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  update?:
    | ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutApplicationInput[]
    | ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutApplicationInput;
  upsert?:
    | ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutApplicationInput[]
    | ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutApplicationInput;
  deleteMany?:
    | ApplicationNetworkTypeLinkScalarWhereInput[]
    | ApplicationNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface CompanyTypeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  companies_every?: CompanyWhereInput;
  companies_some?: CompanyWhereInput;
  companies_none?: CompanyWhereInput;
  AND?: CompanyTypeWhereInput[] | CompanyTypeWhereInput;
  OR?: CompanyTypeWhereInput[] | CompanyTypeWhereInput;
  NOT?: CompanyTypeWhereInput[] | CompanyTypeWhereInput;
}

export interface ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutApplicationInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput;
  data: ApplicationNetworkTypeLinkUpdateWithoutApplicationDataInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  passwordHash?: String;
}

export interface ApplicationNetworkTypeLinkUpdateWithoutApplicationDataInput {
  networkType?: NetworkTypeUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput;
  networkSettings?: String;
}

export type DeviceWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworkTypeUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput {
  create?: NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput;
  update?: NetworkTypeUpdateWithoutApplicationNetworkTypeLinksDataInput;
  upsert?: NetworkTypeUpsertWithoutApplicationNetworkTypeLinksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface ReportingProtocolUpdateManyMutationInput {
  name?: String;
  protocolHandler?: String;
}

export interface NetworkTypeUpdateWithoutApplicationNetworkTypeLinksDataInput {
  name?: String;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolUpdateManyWithoutNetworkTypeInput;
  networks?: NetworkUpdateManyWithoutNetworkTypeInput;
}

export type DeviceNetworkTypeLinkWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput {
  create?:
    | DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput;
  delete?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  connect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  set?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  update?:
    | DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | DeviceNetworkTypeLinkScalarWhereInput[]
    | DeviceNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface ApplicationUpdateWithWhereUniqueWithoutReportingProtocolInput {
  where: ApplicationWhereUniqueInput;
  data: ApplicationUpdateWithoutReportingProtocolDataInput;
}

export interface DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput;
  data: DeviceNetworkTypeLinkUpdateWithoutNetworkTypeDataInput;
}

export type DeviceProfileWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface DeviceNetworkTypeLinkUpdateWithoutNetworkTypeDataInput {
  device?: DeviceUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  deviceProfile?: DeviceProfileUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface ApplicationCreateWithoutReportingProtocolInput {
  company?: CompanyCreateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput;
  devices?: DeviceCreateManyWithoutApplicationInput;
}

export interface DeviceUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput {
  create?: DeviceCreateWithoutDeviceNetworkTypeLinksInput;
  update?: DeviceUpdateWithoutDeviceNetworkTypeLinksDataInput;
  upsert?: DeviceUpsertWithoutDeviceNetworkTypeLinksInput;
  connect?: DeviceWhereUniqueInput;
}

export type EmailVerificationWhereUniqueInput = AtLeastOne<{
  id: Int;
  uuid?: String;
}>;

export interface DeviceUpdateWithoutDeviceNetworkTypeLinksDataInput {
  application?: ApplicationUpdateOneRequiredWithoutDevicesInput;
  name?: String;
  description?: String;
  deviceModel?: String;
}

export interface ProtocolDataUpdateManyMutationInput {
  dataIdentifier?: String;
  dataValue?: String;
}

export interface ApplicationUpdateOneRequiredWithoutDevicesInput {
  create?: ApplicationCreateWithoutDevicesInput;
  update?: ApplicationUpdateWithoutDevicesDataInput;
  upsert?: ApplicationUpsertWithoutDevicesInput;
  connect?: ApplicationWhereUniqueInput;
}

export type NetworkWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface ApplicationUpdateWithoutDevicesDataInput {
  company?: CompanyUpdateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolUpdateOneWithoutApplicationsInput;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput;
}

export interface PasswordPolicyUpdateManyMutationInput {
  ruleText?: String;
  ruleRegExp?: String;
}

export interface ApplicationUpsertWithoutDevicesInput {
  update: ApplicationUpdateWithoutDevicesDataInput;
  create: ApplicationCreateWithoutDevicesInput;
}

export type NetworkProtocolWhereUniqueInput = AtLeastOne<{
  id: Int;
  protocolHandler?: String;
}>;

export interface DeviceUpsertWithoutDeviceNetworkTypeLinksInput {
  update: DeviceUpdateWithoutDeviceNetworkTypeLinksDataInput;
  create: DeviceCreateWithoutDeviceNetworkTypeLinksInput;
}

export interface CompanyUpdateOneWithoutPasswordPoliciesInput {
  create?: CompanyCreateWithoutPasswordPoliciesInput;
  update?: CompanyUpdateWithoutPasswordPoliciesDataInput;
  upsert?: CompanyUpsertWithoutPasswordPoliciesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface DeviceProfileUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput {
  create?: DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput;
  update?: DeviceProfileUpdateWithoutDeviceNetworkTypeLinksDataInput;
  upsert?: DeviceProfileUpsertWithoutDeviceNetworkTypeLinksInput;
  connect?: DeviceProfileWhereUniqueInput;
}

export type NetworkProviderWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface DeviceProfileUpdateWithoutDeviceNetworkTypeLinksDataInput {
  networkType?: NetworkTypeUpdateOneRequiredWithoutDeviceProfilesInput;
  company?: CompanyUpdateOneRequiredWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
}

export interface CompanyCreateWithoutPasswordPoliciesInput {
  name?: String;
  type?: CompanyTypeCreateOneWithoutCompaniesInput;
  applications?: ApplicationCreateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutCompanyInput;
  users?: UserCreateManyWithoutCompanyInput;
}

export interface NetworkTypeUpdateOneRequiredWithoutDeviceProfilesInput {
  create?: NetworkTypeCreateWithoutDeviceProfilesInput;
  update?: NetworkTypeUpdateWithoutDeviceProfilesDataInput;
  upsert?: NetworkTypeUpsertWithoutDeviceProfilesInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface PasswordPolicyCreateInput {
  ruleText?: String;
  ruleRegExp?: String;
  company?: CompanyCreateOneWithoutPasswordPoliciesInput;
}

export interface NetworkTypeUpdateWithoutDeviceProfilesDataInput {
  name?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolUpdateManyWithoutNetworkTypeInput;
  networks?: NetworkUpdateManyWithoutNetworkTypeInput;
}

export interface NetworkTypeUpdateManyMutationInput {
  name?: String;
}

export interface NetworkProtocolUpdateManyWithoutNetworkTypeInput {
  create?:
    | NetworkProtocolCreateWithoutNetworkTypeInput[]
    | NetworkProtocolCreateWithoutNetworkTypeInput;
  delete?: NetworkProtocolWhereUniqueInput[] | NetworkProtocolWhereUniqueInput;
  connect?: NetworkProtocolWhereUniqueInput[] | NetworkProtocolWhereUniqueInput;
  set?: NetworkProtocolWhereUniqueInput[] | NetworkProtocolWhereUniqueInput;
  disconnect?:
    | NetworkProtocolWhereUniqueInput[]
    | NetworkProtocolWhereUniqueInput;
  update?:
    | NetworkProtocolUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworkProtocolUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | NetworkProtocolUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworkProtocolUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | NetworkProtocolScalarWhereInput[]
    | NetworkProtocolScalarWhereInput;
  updateMany?:
    | NetworkProtocolUpdateManyWithWhereNestedInput[]
    | NetworkProtocolUpdateManyWithWhereNestedInput;
}

export interface NetworkTypeCreateInput {
  name: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolCreateManyWithoutNetworkTypeInput;
  networks?: NetworkCreateManyWithoutNetworkTypeInput;
}

export interface NetworkProtocolUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkProtocolWhereUniqueInput;
  data: NetworkProtocolUpdateWithoutNetworkTypeDataInput;
}

export type PasswordPolicyWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworkProtocolUpdateWithoutNetworkTypeDataInput {
  name?: String;
  protocolHandler?: String;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  networks?: NetworkUpdateManyWithoutNetworkProtocolInput;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
}

export interface NetworkUpdateWithoutNetworkProviderDataInput {
  name?: String;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworksInput;
  networkProtocol?: NetworkProtocolUpdateOneRequiredWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkInput;
}

export interface CompanyUpdateOneRequiredWithoutUsersInput {
  create?: CompanyCreateWithoutUsersInput;
  update?: CompanyUpdateWithoutUsersDataInput;
  upsert?: CompanyUpsertWithoutUsersInput;
  connect?: CompanyWhereUniqueInput;
}

export type ProtocolDataWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworkUpdateWithWhereUniqueWithoutNetworkProtocolInput {
  where: NetworkWhereUniqueInput;
  data: NetworkUpdateWithoutNetworkProtocolDataInput;
}

export interface NetworkProviderUpdateInput {
  name?: String;
  networks?: NetworkUpdateManyWithoutNetworkProviderInput;
}

export interface NetworkUpdateWithoutNetworkProtocolDataInput {
  name?: String;
  networkProvider?: NetworkProviderUpdateOneRequiredWithoutNetworksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkInput;
}

export type ReportingProtocolWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworkProviderUpdateOneRequiredWithoutNetworksInput {
  create?: NetworkProviderCreateWithoutNetworksInput;
  update?: NetworkProviderUpdateWithoutNetworksDataInput;
  upsert?: NetworkProviderUpsertWithoutNetworksInput;
  connect?: NetworkProviderWhereUniqueInput;
}

export interface NetworkProviderCreateInput {
  name?: String;
  networks?: NetworkCreateManyWithoutNetworkProviderInput;
}

export interface NetworkProviderUpdateWithoutNetworksDataInput {
  name?: String;
}

export interface NetworkProtocolUpdateInput {
  name?: String;
  protocolHandler?: String;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworkProtocolsInput;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  networks?: NetworkUpdateManyWithoutNetworkProtocolInput;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
}

export interface NetworkProviderUpsertWithoutNetworksInput {
  update: NetworkProviderUpdateWithoutNetworksDataInput;
  create: NetworkProviderCreateWithoutNetworksInput;
}

export interface NetworkProtocolCreateInput {
  name?: String;
  protocolHandler?: String;
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  networks?: NetworkCreateManyWithoutNetworkProtocolInput;
  protocolData?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
}

export interface NetworkTypeUpdateOneRequiredWithoutNetworksInput {
  create?: NetworkTypeCreateWithoutNetworksInput;
  update?: NetworkTypeUpdateWithoutNetworksDataInput;
  upsert?: NetworkTypeUpsertWithoutNetworksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface NetworkUpdateInput {
  name?: String;
  networkProvider?: NetworkProviderUpdateOneRequiredWithoutNetworksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworksInput;
  networkProtocol?: NetworkProtocolUpdateOneRequiredWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkInput;
}

export interface NetworkTypeUpdateWithoutNetworksDataInput {
  name?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolUpdateManyWithoutNetworkTypeInput;
}

export interface NetworkCreateInput {
  name?: String;
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput;
  networkType: NetworkTypeCreateOneWithoutNetworksInput;
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataCreateManyWithoutNetworkInput;
}

export interface DeviceProfileUpdateManyWithoutNetworkTypeInput {
  create?:
    | DeviceProfileCreateWithoutNetworkTypeInput[]
    | DeviceProfileCreateWithoutNetworkTypeInput;
  delete?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  connect?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  set?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  disconnect?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  update?:
    | DeviceProfileUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceProfileUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | DeviceProfileUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | DeviceProfileUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?: DeviceProfileScalarWhereInput[] | DeviceProfileScalarWhereInput;
  updateMany?:
    | DeviceProfileUpdateManyWithWhereNestedInput[]
    | DeviceProfileUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutEmailVerificationsInput {
  update: UserUpdateWithoutEmailVerificationsDataInput;
  create: UserCreateWithoutEmailVerificationsInput;
}

export interface DeviceProfileUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceProfileWhereUniqueInput;
  data: DeviceProfileUpdateWithoutNetworkTypeDataInput;
}

export interface CompanyUpdateWithoutUsersDataInput {
  name?: String;
  type?: CompanyTypeUpdateOneWithoutCompaniesInput;
  applications?: ApplicationUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyUpdateManyWithoutCompanyInput;
}

export interface DeviceProfileUpdateWithoutNetworkTypeDataInput {
  company?: CompanyUpdateOneRequiredWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput;
}

export interface ApplicationCreateInput {
  company?: CompanyCreateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolCreateOneWithoutApplicationsInput;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput;
  devices?: DeviceCreateManyWithoutApplicationInput;
}

export interface UserUpdateWithoutEmailVerificationsDataInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  company?: CompanyUpdateOneRequiredWithoutUsersInput;
  passwordHash?: String;
  role?: UserRoleUpdateOneRequiredWithoutUsersInput;
}

export interface CompanyCreateWithoutApplicationsInput {
  name?: String;
  type?: CompanyTypeCreateOneWithoutCompaniesInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyCreateManyWithoutCompanyInput;
  users?: UserCreateManyWithoutCompanyInput;
}

export interface EmailVerificationWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  user?: UserWhereInput;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  changeRequested?: String;
  changeRequested_not?: String;
  changeRequested_in?: String[] | String;
  changeRequested_not_in?: String[] | String;
  changeRequested_lt?: String;
  changeRequested_lte?: String;
  changeRequested_gt?: String;
  changeRequested_gte?: String;
  changeRequested_contains?: String;
  changeRequested_not_contains?: String;
  changeRequested_starts_with?: String;
  changeRequested_not_starts_with?: String;
  changeRequested_ends_with?: String;
  changeRequested_not_ends_with?: String;
  AND?: EmailVerificationWhereInput[] | EmailVerificationWhereInput;
  OR?: EmailVerificationWhereInput[] | EmailVerificationWhereInput;
  NOT?: EmailVerificationWhereInput[] | EmailVerificationWhereInput;
}

export interface CompanyTypeCreateWithoutCompaniesInput {
  name?: String;
}

export interface ProtocolDataWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  network?: NetworkWhereInput;
  networkProtocol?: NetworkProtocolWhereInput;
  dataIdentifier?: String;
  dataIdentifier_not?: String;
  dataIdentifier_in?: String[] | String;
  dataIdentifier_not_in?: String[] | String;
  dataIdentifier_lt?: String;
  dataIdentifier_lte?: String;
  dataIdentifier_gt?: String;
  dataIdentifier_gte?: String;
  dataIdentifier_contains?: String;
  dataIdentifier_not_contains?: String;
  dataIdentifier_starts_with?: String;
  dataIdentifier_not_starts_with?: String;
  dataIdentifier_ends_with?: String;
  dataIdentifier_not_ends_with?: String;
  dataValue?: String;
  dataValue_not?: String;
  dataValue_in?: String[] | String;
  dataValue_not_in?: String[] | String;
  dataValue_lt?: String;
  dataValue_lte?: String;
  dataValue_gt?: String;
  dataValue_gte?: String;
  dataValue_contains?: String;
  dataValue_not_contains?: String;
  dataValue_starts_with?: String;
  dataValue_not_starts_with?: String;
  dataValue_ends_with?: String;
  dataValue_not_ends_with?: String;
  AND?: ProtocolDataWhereInput[] | ProtocolDataWhereInput;
  OR?: ProtocolDataWhereInput[] | ProtocolDataWhereInput;
  NOT?: ProtocolDataWhereInput[] | ProtocolDataWhereInput;
}

export interface CompanyNetworkTypeLinkCreateWithoutCompanyInput {
  networkType: NetworkTypeCreateOneWithoutCompanyNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface UserUpdateOneRequiredWithoutEmailVerificationsInput {
  create?: UserCreateWithoutEmailVerificationsInput;
  update?: UserUpdateWithoutEmailVerificationsDataInput;
  upsert?: UserUpsertWithoutEmailVerificationsInput;
  connect?: UserWhereUniqueInput;
}

export interface NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput {
  name: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolCreateManyWithoutNetworkTypeInput;
  networks?: NetworkCreateManyWithoutNetworkTypeInput;
}

export interface NetworkWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  networkProvider?: NetworkProviderWhereInput;
  networkType?: NetworkTypeWhereInput;
  networkProtocol?: NetworkProtocolWhereInput;
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  securityData?: String;
  securityData_not?: String;
  securityData_in?: String[] | String;
  securityData_not_in?: String[] | String;
  securityData_lt?: String;
  securityData_lte?: String;
  securityData_gt?: String;
  securityData_gte?: String;
  securityData_contains?: String;
  securityData_not_contains?: String;
  securityData_starts_with?: String;
  securityData_not_starts_with?: String;
  securityData_ends_with?: String;
  securityData_not_ends_with?: String;
  protocolData_every?: ProtocolDataWhereInput;
  protocolData_some?: ProtocolDataWhereInput;
  protocolData_none?: ProtocolDataWhereInput;
  AND?: NetworkWhereInput[] | NetworkWhereInput;
  OR?: NetworkWhereInput[] | NetworkWhereInput;
  NOT?: NetworkWhereInput[] | NetworkWhereInput;
}

export interface ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput {
  application: ApplicationCreateOneWithoutApplicationNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface PasswordPolicyUpsertWithWhereUniqueWithoutCompanyInput {
  where: PasswordPolicyWhereUniqueInput;
  update: PasswordPolicyUpdateWithoutCompanyDataInput;
  create: PasswordPolicyCreateWithoutCompanyInput;
}

export interface ApplicationCreateWithoutApplicationNetworkTypeLinksInput {
  company?: CompanyCreateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolCreateOneWithoutApplicationsInput;
  devices?: DeviceCreateManyWithoutApplicationInput;
}

export interface PasswordPolicyScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  ruleText?: String;
  ruleText_not?: String;
  ruleText_in?: String[] | String;
  ruleText_not_in?: String[] | String;
  ruleText_lt?: String;
  ruleText_lte?: String;
  ruleText_gt?: String;
  ruleText_gte?: String;
  ruleText_contains?: String;
  ruleText_not_contains?: String;
  ruleText_starts_with?: String;
  ruleText_not_starts_with?: String;
  ruleText_ends_with?: String;
  ruleText_not_ends_with?: String;
  ruleRegExp?: String;
  ruleRegExp_not?: String;
  ruleRegExp_in?: String[] | String;
  ruleRegExp_not_in?: String[] | String;
  ruleRegExp_lt?: String;
  ruleRegExp_lte?: String;
  ruleRegExp_gt?: String;
  ruleRegExp_gte?: String;
  ruleRegExp_contains?: String;
  ruleRegExp_not_contains?: String;
  ruleRegExp_starts_with?: String;
  ruleRegExp_not_starts_with?: String;
  ruleRegExp_ends_with?: String;
  ruleRegExp_not_ends_with?: String;
  AND?: PasswordPolicyScalarWhereInput[] | PasswordPolicyScalarWhereInput;
  OR?: PasswordPolicyScalarWhereInput[] | PasswordPolicyScalarWhereInput;
  NOT?: PasswordPolicyScalarWhereInput[] | PasswordPolicyScalarWhereInput;
}

export interface ReportingProtocolCreateWithoutApplicationsInput {
  name?: String;
  protocolHandler?: String;
}

export interface PasswordPolicyUpdateManyWithWhereNestedInput {
  where: PasswordPolicyScalarWhereInput;
  data: PasswordPolicyUpdateManyDataInput;
}

export interface DeviceCreateWithoutApplicationInput {
  name?: String;
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutDeviceInput;
}

export interface PasswordPolicyUpdateManyDataInput {
  ruleText?: String;
  ruleRegExp?: String;
}

export interface DeviceNetworkTypeLinkCreateWithoutDeviceInput {
  networkType: NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput;
  deviceProfile: DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface UserUpdateManyWithoutCompanyInput {
  create?: UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    | UserUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    | UserUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput {
  name: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolCreateManyWithoutNetworkTypeInput;
  networks?: NetworkCreateManyWithoutNetworkTypeInput;
}

export interface UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCompanyDataInput;
}

export interface CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput {
  company: CompanyCreateOneWithoutCompanyNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface UserUpdateWithoutCompanyDataInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  passwordHash?: String;
  role?: UserRoleUpdateOneRequiredWithoutUsersInput;
  emailVerifications?: EmailVerificationUpdateManyWithoutUserInput;
}

export interface CompanyCreateWithoutCompanyNetworkTypeLinksInput {
  name?: String;
  type?: CompanyTypeCreateOneWithoutCompaniesInput;
  applications?: ApplicationCreateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyCreateManyWithoutCompanyInput;
  users?: UserCreateManyWithoutCompanyInput;
}

export interface UserRoleUpdateOneRequiredWithoutUsersInput {
  create?: UserRoleCreateWithoutUsersInput;
  update?: UserRoleUpdateWithoutUsersDataInput;
  upsert?: UserRoleUpsertWithoutUsersInput;
  connect?: UserRoleWhereUniqueInput;
}

export interface ApplicationCreateWithoutCompanyInput {
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolCreateOneWithoutApplicationsInput;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput;
  devices?: DeviceCreateManyWithoutApplicationInput;
}

export interface UserRoleUpdateWithoutUsersDataInput {
  name?: String;
}

export interface ApplicationNetworkTypeLinkCreateWithoutApplicationInput {
  networkType: NetworkTypeCreateOneWithoutApplicationNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface UserRoleUpsertWithoutUsersInput {
  update: UserRoleUpdateWithoutUsersDataInput;
  create: UserRoleCreateWithoutUsersInput;
}

export interface NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput {
  name: String;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolCreateManyWithoutNetworkTypeInput;
  networks?: NetworkCreateManyWithoutNetworkTypeInput;
}

export interface EmailVerificationUpdateManyWithoutUserInput {
  create?:
    | EmailVerificationCreateWithoutUserInput[]
    | EmailVerificationCreateWithoutUserInput;
  delete?:
    | EmailVerificationWhereUniqueInput[]
    | EmailVerificationWhereUniqueInput;
  connect?:
    | EmailVerificationWhereUniqueInput[]
    | EmailVerificationWhereUniqueInput;
  set?: EmailVerificationWhereUniqueInput[] | EmailVerificationWhereUniqueInput;
  disconnect?:
    | EmailVerificationWhereUniqueInput[]
    | EmailVerificationWhereUniqueInput;
  update?:
    | EmailVerificationUpdateWithWhereUniqueWithoutUserInput[]
    | EmailVerificationUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | EmailVerificationUpsertWithWhereUniqueWithoutUserInput[]
    | EmailVerificationUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?:
    | EmailVerificationScalarWhereInput[]
    | EmailVerificationScalarWhereInput;
  updateMany?:
    | EmailVerificationUpdateManyWithWhereNestedInput[]
    | EmailVerificationUpdateManyWithWhereNestedInput;
}

export interface DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput {
  device: DeviceCreateOneWithoutDeviceNetworkTypeLinksInput;
  deviceProfile: DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface EmailVerificationUpdateWithWhereUniqueWithoutUserInput {
  where: EmailVerificationWhereUniqueInput;
  data: EmailVerificationUpdateWithoutUserDataInput;
}

export interface DeviceCreateWithoutDeviceNetworkTypeLinksInput {
  application: ApplicationCreateOneWithoutDevicesInput;
  name?: String;
  description?: String;
  deviceModel?: String;
}

export interface EmailVerificationUpdateWithoutUserDataInput {
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface ApplicationCreateWithoutDevicesInput {
  company?: CompanyCreateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolCreateOneWithoutApplicationsInput;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput;
}

export interface EmailVerificationUpsertWithWhereUniqueWithoutUserInput {
  where: EmailVerificationWhereUniqueInput;
  update: EmailVerificationUpdateWithoutUserDataInput;
  create: EmailVerificationCreateWithoutUserInput;
}

export interface DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput {
  networkType: NetworkTypeCreateOneWithoutDeviceProfilesInput;
  company: CompanyCreateOneWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
}

export interface EmailVerificationScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  changeRequested?: String;
  changeRequested_not?: String;
  changeRequested_in?: String[] | String;
  changeRequested_not_in?: String[] | String;
  changeRequested_lt?: String;
  changeRequested_lte?: String;
  changeRequested_gt?: String;
  changeRequested_gte?: String;
  changeRequested_contains?: String;
  changeRequested_not_contains?: String;
  changeRequested_starts_with?: String;
  changeRequested_not_starts_with?: String;
  changeRequested_ends_with?: String;
  changeRequested_not_ends_with?: String;
  AND?: EmailVerificationScalarWhereInput[] | EmailVerificationScalarWhereInput;
  OR?: EmailVerificationScalarWhereInput[] | EmailVerificationScalarWhereInput;
  NOT?: EmailVerificationScalarWhereInput[] | EmailVerificationScalarWhereInput;
}

export interface NetworkTypeCreateWithoutDeviceProfilesInput {
  name: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolCreateManyWithoutNetworkTypeInput;
  networks?: NetworkCreateManyWithoutNetworkTypeInput;
}

export interface EmailVerificationUpdateManyWithWhereNestedInput {
  where: EmailVerificationScalarWhereInput;
  data: EmailVerificationUpdateManyDataInput;
}

export interface NetworkProtocolCreateWithoutNetworkTypeInput {
  name?: String;
  protocolHandler?: String;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  networks?: NetworkCreateManyWithoutNetworkProtocolInput;
  protocolData?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
}

export interface EmailVerificationUpdateManyDataInput {
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface NetworkCreateWithoutNetworkProtocolInput {
  name?: String;
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput;
  networkType: NetworkTypeCreateOneWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataCreateManyWithoutNetworkInput;
}

export interface UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCompanyDataInput;
  create: UserCreateWithoutCompanyInput;
}

export interface NetworkProviderCreateWithoutNetworksInput {
  name?: String;
}

export interface UserScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  lastVerifiedEmail?: String;
  lastVerifiedEmail_not?: String;
  lastVerifiedEmail_in?: String[] | String;
  lastVerifiedEmail_not_in?: String[] | String;
  lastVerifiedEmail_lt?: String;
  lastVerifiedEmail_lte?: String;
  lastVerifiedEmail_gt?: String;
  lastVerifiedEmail_gte?: String;
  lastVerifiedEmail_contains?: String;
  lastVerifiedEmail_not_contains?: String;
  lastVerifiedEmail_starts_with?: String;
  lastVerifiedEmail_not_starts_with?: String;
  lastVerifiedEmail_ends_with?: String;
  lastVerifiedEmail_not_ends_with?: String;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  passwordHash?: String;
  passwordHash_not?: String;
  passwordHash_in?: String[] | String;
  passwordHash_not_in?: String[] | String;
  passwordHash_lt?: String;
  passwordHash_lte?: String;
  passwordHash_gt?: String;
  passwordHash_gte?: String;
  passwordHash_contains?: String;
  passwordHash_not_contains?: String;
  passwordHash_starts_with?: String;
  passwordHash_not_starts_with?: String;
  passwordHash_ends_with?: String;
  passwordHash_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface NetworkTypeCreateWithoutNetworksInput {
  name: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolCreateManyWithoutNetworkTypeInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface DeviceProfileCreateWithoutNetworkTypeInput {
  company: CompanyCreateOneWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput;
}

export interface UserUpdateManyDataInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  passwordHash?: String;
}

export interface CompanyCreateWithoutDeviceProfilesInput {
  name?: String;
  type?: CompanyTypeCreateOneWithoutCompaniesInput;
  applications?: ApplicationCreateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyCreateManyWithoutCompanyInput;
  users?: UserCreateManyWithoutCompanyInput;
}

export interface CompanyUpsertWithoutDeviceProfilesInput {
  update: CompanyUpdateWithoutDeviceProfilesDataInput;
  create: CompanyCreateWithoutDeviceProfilesInput;
}

export interface PasswordPolicyCreateWithoutCompanyInput {
  ruleText?: String;
  ruleRegExp?: String;
}

export interface DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput {
  create?:
    | DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput;
  delete?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  connect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  set?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
  update?:
    | DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceProfileInput;
  upsert?:
    | DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceProfileInput;
  deleteMany?:
    | DeviceNetworkTypeLinkScalarWhereInput[]
    | DeviceNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutCompanyInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  passwordHash: String;
  role: UserRoleCreateOneWithoutUsersInput;
  emailVerifications?: EmailVerificationCreateManyWithoutUserInput;
}

export interface DeviceNetworkTypeLinkUpdateWithWhereUniqueWithoutDeviceProfileInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput;
  data: DeviceNetworkTypeLinkUpdateWithoutDeviceProfileDataInput;
}

export interface UserRoleCreateWithoutUsersInput {
  name?: String;
}

export interface DeviceNetworkTypeLinkUpdateWithoutDeviceProfileDataInput {
  device?: DeviceUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface EmailVerificationCreateWithoutUserInput {
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceProfileInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput;
  update: DeviceNetworkTypeLinkUpdateWithoutDeviceProfileDataInput;
  create: DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput;
}

export interface DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput {
  device: DeviceCreateOneWithoutDeviceNetworkTypeLinksInput;
  networkType: NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface DeviceNetworkTypeLinkScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | DeviceNetworkTypeLinkScalarWhereInput[]
    | DeviceNetworkTypeLinkScalarWhereInput;
  OR?:
    | DeviceNetworkTypeLinkScalarWhereInput[]
    | DeviceNetworkTypeLinkScalarWhereInput;
  NOT?:
    | DeviceNetworkTypeLinkScalarWhereInput[]
    | DeviceNetworkTypeLinkScalarWhereInput;
}

export interface ProtocolDataCreateWithoutNetworkInput {
  networkProtocol: NetworkProtocolCreateOneWithoutProtocolDataInput;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface DeviceNetworkTypeLinkUpdateManyWithWhereNestedInput {
  where: DeviceNetworkTypeLinkScalarWhereInput;
  data: DeviceNetworkTypeLinkUpdateManyDataInput;
}

export interface NetworkProtocolCreateWithoutProtocolDataInput {
  name?: String;
  protocolHandler?: String;
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  networks?: NetworkCreateManyWithoutNetworkProtocolInput;
}

export interface DeviceNetworkTypeLinkUpdateManyDataInput {
  networkSettings?: String;
}

export interface NetworkTypeCreateWithoutNetworkProtocolsInput {
  name: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutNetworkTypeInput;
  networks?: NetworkCreateManyWithoutNetworkTypeInput;
}

export interface DeviceProfileUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceProfileWhereUniqueInput;
  update: DeviceProfileUpdateWithoutNetworkTypeDataInput;
  create: DeviceProfileCreateWithoutNetworkTypeInput;
}

export interface NetworkCreateWithoutNetworkTypeInput {
  name?: String;
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput;
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataCreateManyWithoutNetworkInput;
}

export interface DeviceProfileScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?: DeviceProfileScalarWhereInput[] | DeviceProfileScalarWhereInput;
  OR?: DeviceProfileScalarWhereInput[] | DeviceProfileScalarWhereInput;
  NOT?: DeviceProfileScalarWhereInput[] | DeviceProfileScalarWhereInput;
}

export interface NetworkProtocolCreateWithoutNetworksInput {
  name?: String;
  protocolHandler?: String;
  networkType: NetworkTypeCreateOneWithoutNetworkProtocolsInput;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  protocolData?: ProtocolDataCreateManyWithoutNetworkProtocolInput;
}

export interface DeviceProfileUpdateManyWithWhereNestedInput {
  where: DeviceProfileScalarWhereInput;
  data: DeviceProfileUpdateManyDataInput;
}

export interface ProtocolDataCreateWithoutNetworkProtocolInput {
  network: NetworkCreateOneWithoutProtocolDataInput;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface DeviceProfileUpdateManyDataInput {
  name?: String;
  description?: String;
  networkSettings?: String;
}

export interface NetworkCreateWithoutProtocolDataInput {
  name?: String;
  networkProvider: NetworkProviderCreateOneWithoutNetworksInput;
  networkType: NetworkTypeCreateOneWithoutNetworksInput;
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
}

export interface NetworkTypeUpsertWithoutNetworksInput {
  update: NetworkTypeUpdateWithoutNetworksDataInput;
  create: NetworkTypeCreateWithoutNetworksInput;
}

export interface DeviceProfileCreateWithoutCompanyInput {
  networkType: NetworkTypeCreateOneWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput;
}

export interface ProtocolDataUpdateManyWithoutNetworkInput {
  create?:
    | ProtocolDataCreateWithoutNetworkInput[]
    | ProtocolDataCreateWithoutNetworkInput;
  delete?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  set?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  disconnect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  update?:
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput[]
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput;
  upsert?:
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput[]
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput;
  deleteMany?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  updateMany?:
    | ProtocolDataUpdateManyWithWhereNestedInput[]
    | ProtocolDataUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateOneWithoutApplicationsInput {
  create?: CompanyCreateWithoutApplicationsInput;
  update?: CompanyUpdateWithoutApplicationsDataInput;
  upsert?: CompanyUpsertWithoutApplicationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface ProtocolDataUpdateWithWhereUniqueWithoutNetworkInput {
  where: ProtocolDataWhereUniqueInput;
  data: ProtocolDataUpdateWithoutNetworkDataInput;
}

export interface CompanyTypeUpdateOneWithoutCompaniesInput {
  create?: CompanyTypeCreateWithoutCompaniesInput;
  update?: CompanyTypeUpdateWithoutCompaniesDataInput;
  upsert?: CompanyTypeUpsertWithoutCompaniesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyTypeWhereUniqueInput;
}

export interface ProtocolDataUpdateWithoutNetworkDataInput {
  networkProtocol?: NetworkProtocolUpdateOneRequiredWithoutProtocolDataInput;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface CompanyTypeUpsertWithoutCompaniesInput {
  update: CompanyTypeUpdateWithoutCompaniesDataInput;
  create: CompanyTypeCreateWithoutCompaniesInput;
}

export interface NetworkProtocolUpdateOneRequiredWithoutProtocolDataInput {
  create?: NetworkProtocolCreateWithoutProtocolDataInput;
  update?: NetworkProtocolUpdateWithoutProtocolDataDataInput;
  upsert?: NetworkProtocolUpsertWithoutProtocolDataInput;
  connect?: NetworkProtocolWhereUniqueInput;
}

export interface CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput;
  data: CompanyNetworkTypeLinkUpdateWithoutCompanyDataInput;
}

export interface NetworkProtocolUpdateWithoutProtocolDataDataInput {
  name?: String;
  protocolHandler?: String;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworkProtocolsInput;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  networks?: NetworkUpdateManyWithoutNetworkProtocolInput;
}

export interface NetworkTypeUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput {
  create?: NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput;
  update?: NetworkTypeUpdateWithoutCompanyNetworkTypeLinksDataInput;
  upsert?: NetworkTypeUpsertWithoutCompanyNetworkTypeLinksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface NetworkTypeUpdateOneRequiredWithoutNetworkProtocolsInput {
  create?: NetworkTypeCreateWithoutNetworkProtocolsInput;
  update?: NetworkTypeUpdateWithoutNetworkProtocolsDataInput;
  upsert?: NetworkTypeUpsertWithoutNetworkProtocolsInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput {
  create?:
    | ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput;
  delete?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  connect?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  set?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
  update?:
    | ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?:
    | ApplicationNetworkTypeLinkScalarWhereInput[]
    | ApplicationNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface NetworkTypeUpdateWithoutNetworkProtocolsDataInput {
  name?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutNetworkTypeInput;
  networks?: NetworkUpdateManyWithoutNetworkTypeInput;
}

export interface ApplicationNetworkTypeLinkUpdateWithoutNetworkTypeDataInput {
  application?: ApplicationUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface NetworkUpdateManyWithoutNetworkTypeInput {
  create?:
    | NetworkCreateWithoutNetworkTypeInput[]
    | NetworkCreateWithoutNetworkTypeInput;
  delete?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  connect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  set?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  disconnect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  update?:
    | NetworkUpdateWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworkUpdateWithWhereUniqueWithoutNetworkTypeInput;
  upsert?:
    | NetworkUpsertWithWhereUniqueWithoutNetworkTypeInput[]
    | NetworkUpsertWithWhereUniqueWithoutNetworkTypeInput;
  deleteMany?: NetworkScalarWhereInput[] | NetworkScalarWhereInput;
  updateMany?:
    | NetworkUpdateManyWithWhereNestedInput[]
    | NetworkUpdateManyWithWhereNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NetworkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkWhereUniqueInput;
  data: NetworkUpdateWithoutNetworkTypeDataInput;
}

export interface DeviceWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  application?: ApplicationWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deviceModel?: String;
  deviceModel_not?: String;
  deviceModel_in?: String[] | String;
  deviceModel_not_in?: String[] | String;
  deviceModel_lt?: String;
  deviceModel_lte?: String;
  deviceModel_gt?: String;
  deviceModel_gte?: String;
  deviceModel_contains?: String;
  deviceModel_not_contains?: String;
  deviceModel_starts_with?: String;
  deviceModel_not_starts_with?: String;
  deviceModel_ends_with?: String;
  deviceModel_not_ends_with?: String;
  deviceNetworkTypeLinks_every?: DeviceNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_some?: DeviceNetworkTypeLinkWhereInput;
  deviceNetworkTypeLinks_none?: DeviceNetworkTypeLinkWhereInput;
  AND?: DeviceWhereInput[] | DeviceWhereInput;
  OR?: DeviceWhereInput[] | DeviceWhereInput;
  NOT?: DeviceWhereInput[] | DeviceWhereInput;
}

export interface NetworkUpdateWithoutNetworkTypeDataInput {
  name?: String;
  networkProvider?: NetworkProviderUpdateOneRequiredWithoutNetworksInput;
  networkProtocol?: NetworkProtocolUpdateOneRequiredWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkInput;
}

export interface NetworkProviderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkProviderWhereInput;
  AND?:
    | NetworkProviderSubscriptionWhereInput[]
    | NetworkProviderSubscriptionWhereInput;
  OR?:
    | NetworkProviderSubscriptionWhereInput[]
    | NetworkProviderSubscriptionWhereInput;
  NOT?:
    | NetworkProviderSubscriptionWhereInput[]
    | NetworkProviderSubscriptionWhereInput;
}

export interface NetworkProtocolUpdateOneRequiredWithoutNetworksInput {
  create?: NetworkProtocolCreateWithoutNetworksInput;
  update?: NetworkProtocolUpdateWithoutNetworksDataInput;
  upsert?: NetworkProtocolUpsertWithoutNetworksInput;
  connect?: NetworkProtocolWhereUniqueInput;
}

export interface NetworkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkWhereInput;
  AND?: NetworkSubscriptionWhereInput[] | NetworkSubscriptionWhereInput;
  OR?: NetworkSubscriptionWhereInput[] | NetworkSubscriptionWhereInput;
  NOT?: NetworkSubscriptionWhereInput[] | NetworkSubscriptionWhereInput;
}

export interface NetworkProtocolUpdateWithoutNetworksDataInput {
  name?: String;
  protocolHandler?: String;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworkProtocolsInput;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
  protocolData?: ProtocolDataUpdateManyWithoutNetworkProtocolInput;
}

export interface ReportingProtocolWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  protocolHandler?: String;
  protocolHandler_not?: String;
  protocolHandler_in?: String[] | String;
  protocolHandler_not_in?: String[] | String;
  protocolHandler_lt?: String;
  protocolHandler_lte?: String;
  protocolHandler_gt?: String;
  protocolHandler_gte?: String;
  protocolHandler_contains?: String;
  protocolHandler_not_contains?: String;
  protocolHandler_starts_with?: String;
  protocolHandler_not_starts_with?: String;
  protocolHandler_ends_with?: String;
  protocolHandler_not_ends_with?: String;
  applications_every?: ApplicationWhereInput;
  applications_some?: ApplicationWhereInput;
  applications_none?: ApplicationWhereInput;
  AND?: ReportingProtocolWhereInput[] | ReportingProtocolWhereInput;
  OR?: ReportingProtocolWhereInput[] | ReportingProtocolWhereInput;
  NOT?: ReportingProtocolWhereInput[] | ReportingProtocolWhereInput;
}

export interface ProtocolDataUpdateManyWithoutNetworkProtocolInput {
  create?:
    | ProtocolDataCreateWithoutNetworkProtocolInput[]
    | ProtocolDataCreateWithoutNetworkProtocolInput;
  delete?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  set?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  disconnect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
  update?:
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput[]
    | ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput;
  upsert?:
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput[]
    | ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput;
  deleteMany?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  updateMany?:
    | ProtocolDataUpdateManyWithWhereNestedInput[]
    | ProtocolDataUpdateManyWithWhereNestedInput;
}

export interface CompanyTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyTypeWhereInput;
  AND?: CompanyTypeSubscriptionWhereInput[] | CompanyTypeSubscriptionWhereInput;
  OR?: CompanyTypeSubscriptionWhereInput[] | CompanyTypeSubscriptionWhereInput;
  NOT?: CompanyTypeSubscriptionWhereInput[] | CompanyTypeSubscriptionWhereInput;
}

export interface ProtocolDataUpdateWithWhereUniqueWithoutNetworkProtocolInput {
  where: ProtocolDataWhereUniqueInput;
  data: ProtocolDataUpdateWithoutNetworkProtocolDataInput;
}

export type ApplicationNetworkTypeLinkWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface ProtocolDataUpdateWithoutNetworkProtocolDataInput {
  network?: NetworkUpdateOneRequiredWithoutProtocolDataInput;
  dataIdentifier?: String;
  dataValue?: String;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Int;
  name?: String;
}>;

export interface NetworkUpdateOneRequiredWithoutProtocolDataInput {
  create?: NetworkCreateWithoutProtocolDataInput;
  update?: NetworkUpdateWithoutProtocolDataDataInput;
  upsert?: NetworkUpsertWithoutProtocolDataInput;
  connect?: NetworkWhereUniqueInput;
}

export type CompanyNetworkTypeLinkWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NetworkUpdateWithoutProtocolDataDataInput {
  name?: String;
  networkProvider?: NetworkProviderUpdateOneRequiredWithoutNetworksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutNetworksInput;
  networkProtocol?: NetworkProtocolUpdateOneRequiredWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
}

export type CompanyTypeWhereUniqueInput = AtLeastOne<{
  id: Int;
  name?: String;
}>;

export interface NetworkUpsertWithoutProtocolDataInput {
  update: NetworkUpdateWithoutProtocolDataDataInput;
  create: NetworkCreateWithoutProtocolDataInput;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  company?: CompanyUpdateOneRequiredWithoutUsersInput;
  passwordHash?: String;
  role?: UserRoleUpdateOneRequiredWithoutUsersInput;
  emailVerifications?: EmailVerificationUpdateManyWithoutUserInput;
}

export interface ProtocolDataUpsertWithWhereUniqueWithoutNetworkProtocolInput {
  where: ProtocolDataWhereUniqueInput;
  update: ProtocolDataUpdateWithoutNetworkProtocolDataInput;
  create: ProtocolDataCreateWithoutNetworkProtocolInput;
}

export interface ApplicationUpsertWithWhereUniqueWithoutReportingProtocolInput {
  where: ApplicationWhereUniqueInput;
  update: ApplicationUpdateWithoutReportingProtocolDataInput;
  create: ApplicationCreateWithoutReportingProtocolInput;
}

export interface ProtocolDataScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  dataIdentifier?: String;
  dataIdentifier_not?: String;
  dataIdentifier_in?: String[] | String;
  dataIdentifier_not_in?: String[] | String;
  dataIdentifier_lt?: String;
  dataIdentifier_lte?: String;
  dataIdentifier_gt?: String;
  dataIdentifier_gte?: String;
  dataIdentifier_contains?: String;
  dataIdentifier_not_contains?: String;
  dataIdentifier_starts_with?: String;
  dataIdentifier_not_starts_with?: String;
  dataIdentifier_ends_with?: String;
  dataIdentifier_not_ends_with?: String;
  dataValue?: String;
  dataValue_not?: String;
  dataValue_in?: String[] | String;
  dataValue_not_in?: String[] | String;
  dataValue_lt?: String;
  dataValue_lte?: String;
  dataValue_gt?: String;
  dataValue_gte?: String;
  dataValue_contains?: String;
  dataValue_not_contains?: String;
  dataValue_starts_with?: String;
  dataValue_not_starts_with?: String;
  dataValue_ends_with?: String;
  dataValue_not_ends_with?: String;
  AND?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  OR?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
  NOT?: ProtocolDataScalarWhereInput[] | ProtocolDataScalarWhereInput;
}

export interface ApplicationUpdateManyWithoutReportingProtocolInput {
  create?:
    | ApplicationCreateWithoutReportingProtocolInput[]
    | ApplicationCreateWithoutReportingProtocolInput;
  delete?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  connect?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  set?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  disconnect?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
  update?:
    | ApplicationUpdateWithWhereUniqueWithoutReportingProtocolInput[]
    | ApplicationUpdateWithWhereUniqueWithoutReportingProtocolInput;
  upsert?:
    | ApplicationUpsertWithWhereUniqueWithoutReportingProtocolInput[]
    | ApplicationUpsertWithWhereUniqueWithoutReportingProtocolInput;
  deleteMany?: ApplicationScalarWhereInput[] | ApplicationScalarWhereInput;
  updateMany?:
    | ApplicationUpdateManyWithWhereNestedInput[]
    | ApplicationUpdateManyWithWhereNestedInput;
}

export interface ProtocolDataUpdateManyWithWhereNestedInput {
  where: ProtocolDataScalarWhereInput;
  data: ProtocolDataUpdateManyDataInput;
}

export interface ApplicationCreateManyWithoutReportingProtocolInput {
  create?:
    | ApplicationCreateWithoutReportingProtocolInput[]
    | ApplicationCreateWithoutReportingProtocolInput;
  connect?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
}

export interface ProtocolDataUpdateManyDataInput {
  dataIdentifier?: String;
  dataValue?: String;
}

export interface ProtocolDataUpdateInput {
  network?: NetworkUpdateOneRequiredWithoutProtocolDataInput;
  networkProtocol?: NetworkProtocolUpdateOneRequiredWithoutProtocolDataInput;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface NetworkProtocolUpsertWithoutNetworksInput {
  update: NetworkProtocolUpdateWithoutNetworksDataInput;
  create: NetworkProtocolCreateWithoutNetworksInput;
}

export interface CompanyUpsertWithoutPasswordPoliciesInput {
  update: CompanyUpdateWithoutPasswordPoliciesDataInput;
  create: CompanyCreateWithoutPasswordPoliciesInput;
}

export interface NetworkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkWhereUniqueInput;
  update: NetworkUpdateWithoutNetworkTypeDataInput;
  create: NetworkCreateWithoutNetworkTypeInput;
}

export interface PasswordPolicyUpdateInput {
  ruleText?: String;
  ruleRegExp?: String;
  company?: CompanyUpdateOneWithoutPasswordPoliciesInput;
}

export interface NetworkScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  securityData?: String;
  securityData_not?: String;
  securityData_in?: String[] | String;
  securityData_not_in?: String[] | String;
  securityData_lt?: String;
  securityData_lte?: String;
  securityData_gt?: String;
  securityData_gte?: String;
  securityData_contains?: String;
  securityData_not_contains?: String;
  securityData_starts_with?: String;
  securityData_not_starts_with?: String;
  securityData_ends_with?: String;
  securityData_not_ends_with?: String;
  AND?: NetworkScalarWhereInput[] | NetworkScalarWhereInput;
  OR?: NetworkScalarWhereInput[] | NetworkScalarWhereInput;
  NOT?: NetworkScalarWhereInput[] | NetworkScalarWhereInput;
}

export interface CompanyCreateOneWithoutPasswordPoliciesInput {
  create?: CompanyCreateWithoutPasswordPoliciesInput;
  connect?: CompanyWhereUniqueInput;
}

export interface NetworkUpdateManyWithWhereNestedInput {
  where: NetworkScalarWhereInput;
  data: NetworkUpdateManyDataInput;
}

export interface NetworkTypeUpdateInput {
  name?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolUpdateManyWithoutNetworkTypeInput;
  networks?: NetworkUpdateManyWithoutNetworkTypeInput;
}

export interface NetworkUpdateManyDataInput {
  name?: String;
  baseUrl?: String;
  securityData?: String;
}

export interface NetworkUpsertWithWhereUniqueWithoutNetworkProviderInput {
  where: NetworkWhereUniqueInput;
  update: NetworkUpdateWithoutNetworkProviderDataInput;
  create: NetworkCreateWithoutNetworkProviderInput;
}

export interface NetworkTypeUpsertWithoutNetworkProtocolsInput {
  update: NetworkTypeUpdateWithoutNetworkProtocolsDataInput;
  create: NetworkTypeCreateWithoutNetworkProtocolsInput;
}

export interface NetworkUpdateManyWithoutNetworkProviderInput {
  create?:
    | NetworkCreateWithoutNetworkProviderInput[]
    | NetworkCreateWithoutNetworkProviderInput;
  delete?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  connect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  set?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  disconnect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
  update?:
    | NetworkUpdateWithWhereUniqueWithoutNetworkProviderInput[]
    | NetworkUpdateWithWhereUniqueWithoutNetworkProviderInput;
  upsert?:
    | NetworkUpsertWithWhereUniqueWithoutNetworkProviderInput[]
    | NetworkUpsertWithWhereUniqueWithoutNetworkProviderInput;
  deleteMany?: NetworkScalarWhereInput[] | NetworkScalarWhereInput;
  updateMany?:
    | NetworkUpdateManyWithWhereNestedInput[]
    | NetworkUpdateManyWithWhereNestedInput;
}

export interface NetworkProtocolUpsertWithoutProtocolDataInput {
  update: NetworkProtocolUpdateWithoutProtocolDataDataInput;
  create: NetworkProtocolCreateWithoutProtocolDataInput;
}

export interface NetworkCreateManyWithoutNetworkProviderInput {
  create?:
    | NetworkCreateWithoutNetworkProviderInput[]
    | NetworkCreateWithoutNetworkProviderInput;
  connect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
}

export interface ProtocolDataUpsertWithWhereUniqueWithoutNetworkInput {
  where: ProtocolDataWhereUniqueInput;
  update: ProtocolDataUpdateWithoutNetworkDataInput;
  create: ProtocolDataCreateWithoutNetworkInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Int;
  username?: String;
}>;

export interface NetworkUpsertWithWhereUniqueWithoutNetworkProtocolInput {
  where: NetworkWhereUniqueInput;
  update: NetworkUpdateWithoutNetworkProtocolDataInput;
  create: NetworkCreateWithoutNetworkProtocolInput;
}

export type UserRoleWhereUniqueInput = AtLeastOne<{
  id: Int;
  name?: String;
}>;

export interface NetworkProtocolUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: NetworkProtocolWhereUniqueInput;
  update: NetworkProtocolUpdateWithoutNetworkTypeDataInput;
  create: NetworkProtocolCreateWithoutNetworkTypeInput;
}

export interface CompanyUpsertWithoutUsersInput {
  update: CompanyUpdateWithoutUsersDataInput;
  create: CompanyCreateWithoutUsersInput;
}

export interface NetworkProtocolScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  protocolHandler?: String;
  protocolHandler_not?: String;
  protocolHandler_in?: String[] | String;
  protocolHandler_not_in?: String[] | String;
  protocolHandler_lt?: String;
  protocolHandler_lte?: String;
  protocolHandler_gt?: String;
  protocolHandler_gte?: String;
  protocolHandler_contains?: String;
  protocolHandler_not_contains?: String;
  protocolHandler_starts_with?: String;
  protocolHandler_not_starts_with?: String;
  protocolHandler_ends_with?: String;
  protocolHandler_not_ends_with?: String;
  networkProtocolVersion?: String;
  networkProtocolVersion_not?: String;
  networkProtocolVersion_in?: String[] | String;
  networkProtocolVersion_not_in?: String[] | String;
  networkProtocolVersion_lt?: String;
  networkProtocolVersion_lte?: String;
  networkProtocolVersion_gt?: String;
  networkProtocolVersion_gte?: String;
  networkProtocolVersion_contains?: String;
  networkProtocolVersion_not_contains?: String;
  networkProtocolVersion_starts_with?: String;
  networkProtocolVersion_not_starts_with?: String;
  networkProtocolVersion_ends_with?: String;
  networkProtocolVersion_not_ends_with?: String;
  masterProtocol?: Int;
  masterProtocol_not?: Int;
  masterProtocol_in?: Int[] | Int;
  masterProtocol_not_in?: Int[] | Int;
  masterProtocol_lt?: Int;
  masterProtocol_lte?: Int;
  masterProtocol_gt?: Int;
  masterProtocol_gte?: Int;
  AND?: NetworkProtocolScalarWhereInput[] | NetworkProtocolScalarWhereInput;
  OR?: NetworkProtocolScalarWhereInput[] | NetworkProtocolScalarWhereInput;
  NOT?: NetworkProtocolScalarWhereInput[] | NetworkProtocolScalarWhereInput;
}

export interface CompanyCreateOneWithoutApplicationsInput {
  create?: CompanyCreateWithoutApplicationsInput;
  connect?: CompanyWhereUniqueInput;
}

export interface NetworkProtocolUpdateManyWithWhereNestedInput {
  where: NetworkProtocolScalarWhereInput;
  data: NetworkProtocolUpdateManyDataInput;
}

export interface CompanyNetworkTypeLinkCreateManyWithoutCompanyInput {
  create?:
    | CompanyNetworkTypeLinkCreateWithoutCompanyInput[]
    | CompanyNetworkTypeLinkCreateWithoutCompanyInput;
  connect?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
}

export interface NetworkProtocolUpdateManyDataInput {
  name?: String;
  protocolHandler?: String;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
}

export interface ApplicationNetworkTypeLinkCreateManyWithoutNetworkTypeInput {
  create?:
    | ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput[]
    | ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput;
  connect?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
}

export interface NetworkTypeUpsertWithoutDeviceProfilesInput {
  update: NetworkTypeUpdateWithoutDeviceProfilesDataInput;
  create: NetworkTypeCreateWithoutDeviceProfilesInput;
}

export interface ReportingProtocolCreateOneWithoutApplicationsInput {
  create?: ReportingProtocolCreateWithoutApplicationsInput;
  connect?: ReportingProtocolWhereUniqueInput;
}

export interface DeviceProfileUpsertWithoutDeviceNetworkTypeLinksInput {
  update: DeviceProfileUpdateWithoutDeviceNetworkTypeLinksDataInput;
  create: DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput;
}

export interface DeviceNetworkTypeLinkCreateManyWithoutDeviceInput {
  create?:
    | DeviceNetworkTypeLinkCreateWithoutDeviceInput[]
    | DeviceNetworkTypeLinkCreateWithoutDeviceInput;
  connect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
}

export interface DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput;
  update: DeviceNetworkTypeLinkUpdateWithoutNetworkTypeDataInput;
  create: DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput;
}

export interface CompanyNetworkTypeLinkCreateManyWithoutNetworkTypeInput {
  create?:
    | CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput[]
    | CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput;
  connect?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
}

export interface NetworkTypeUpsertWithoutApplicationNetworkTypeLinksInput {
  update: NetworkTypeUpdateWithoutApplicationNetworkTypeLinksDataInput;
  create: NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput;
}

export interface ApplicationCreateManyWithoutCompanyInput {
  create?:
    | ApplicationCreateWithoutCompanyInput[]
    | ApplicationCreateWithoutCompanyInput;
  connect?: ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutApplicationInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput;
  update: ApplicationNetworkTypeLinkUpdateWithoutApplicationDataInput;
  create: ApplicationNetworkTypeLinkCreateWithoutApplicationInput;
}

export interface NetworkTypeCreateOneWithoutApplicationNetworkTypeLinksInput {
  create?: NetworkTypeCreateWithoutApplicationNetworkTypeLinksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | ApplicationNetworkTypeLinkScalarWhereInput[]
    | ApplicationNetworkTypeLinkScalarWhereInput;
  OR?:
    | ApplicationNetworkTypeLinkScalarWhereInput[]
    | ApplicationNetworkTypeLinkScalarWhereInput;
  NOT?:
    | ApplicationNetworkTypeLinkScalarWhereInput[]
    | ApplicationNetworkTypeLinkScalarWhereInput;
}

export interface DeviceCreateOneWithoutDeviceNetworkTypeLinksInput {
  create?: DeviceCreateWithoutDeviceNetworkTypeLinksInput;
  connect?: DeviceWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpdateManyWithWhereNestedInput {
  where: ApplicationNetworkTypeLinkScalarWhereInput;
  data: ApplicationNetworkTypeLinkUpdateManyDataInput;
}

export interface DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput {
  create?: DeviceProfileCreateWithoutDeviceNetworkTypeLinksInput;
  connect?: DeviceProfileWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpdateManyDataInput {
  networkSettings?: String;
}

export interface NetworkProtocolCreateManyWithoutNetworkTypeInput {
  create?:
    | NetworkProtocolCreateWithoutNetworkTypeInput[]
    | NetworkProtocolCreateWithoutNetworkTypeInput;
  connect?: NetworkProtocolWhereUniqueInput[] | NetworkProtocolWhereUniqueInput;
}

export interface ApplicationUpsertWithWhereUniqueWithoutCompanyInput {
  where: ApplicationWhereUniqueInput;
  update: ApplicationUpdateWithoutCompanyDataInput;
  create: ApplicationCreateWithoutCompanyInput;
}

export interface NetworkProviderCreateOneWithoutNetworksInput {
  create?: NetworkProviderCreateWithoutNetworksInput;
  connect?: NetworkProviderWhereUniqueInput;
}

export interface ApplicationScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  baseUrl?: String;
  baseUrl_not?: String;
  baseUrl_in?: String[] | String;
  baseUrl_not_in?: String[] | String;
  baseUrl_lt?: String;
  baseUrl_lte?: String;
  baseUrl_gt?: String;
  baseUrl_gte?: String;
  baseUrl_contains?: String;
  baseUrl_not_contains?: String;
  baseUrl_starts_with?: String;
  baseUrl_not_starts_with?: String;
  baseUrl_ends_with?: String;
  baseUrl_not_ends_with?: String;
  AND?: ApplicationScalarWhereInput[] | ApplicationScalarWhereInput;
  OR?: ApplicationScalarWhereInput[] | ApplicationScalarWhereInput;
  NOT?: ApplicationScalarWhereInput[] | ApplicationScalarWhereInput;
}

export interface DeviceProfileCreateManyWithoutNetworkTypeInput {
  create?:
    | DeviceProfileCreateWithoutNetworkTypeInput[]
    | DeviceProfileCreateWithoutNetworkTypeInput;
  connect?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
}

export interface ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput;
  data: ApplicationUpdateManyDataInput;
}

export interface PasswordPolicyCreateManyWithoutCompanyInput {
  create?:
    | PasswordPolicyCreateWithoutCompanyInput[]
    | PasswordPolicyCreateWithoutCompanyInput;
  connect?: PasswordPolicyWhereUniqueInput[] | PasswordPolicyWhereUniqueInput;
}

export interface ApplicationUpdateManyDataInput {
  name?: String;
  description?: String;
  baseUrl?: String;
}

export interface UserRoleCreateOneWithoutUsersInput {
  create?: UserRoleCreateWithoutUsersInput;
  connect?: UserRoleWhereUniqueInput;
}

export interface DeviceProfileUpdateManyWithoutCompanyInput {
  create?:
    | DeviceProfileCreateWithoutCompanyInput[]
    | DeviceProfileCreateWithoutCompanyInput;
  delete?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  connect?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  set?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  disconnect?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
  update?:
    | DeviceProfileUpdateWithWhereUniqueWithoutCompanyInput[]
    | DeviceProfileUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | DeviceProfileUpsertWithWhereUniqueWithoutCompanyInput[]
    | DeviceProfileUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: DeviceProfileScalarWhereInput[] | DeviceProfileScalarWhereInput;
  updateMany?:
    | DeviceProfileUpdateManyWithWhereNestedInput[]
    | DeviceProfileUpdateManyWithWhereNestedInput;
}

export interface DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput {
  create?:
    | DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput[]
    | DeviceNetworkTypeLinkCreateWithoutDeviceProfileInput;
  connect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
}

export interface DeviceProfileUpdateWithWhereUniqueWithoutCompanyInput {
  where: DeviceProfileWhereUniqueInput;
  data: DeviceProfileUpdateWithoutCompanyDataInput;
}

export interface NetworkProtocolCreateOneWithoutProtocolDataInput {
  create?: NetworkProtocolCreateWithoutProtocolDataInput;
  connect?: NetworkProtocolWhereUniqueInput;
}

export interface DeviceProfileUpdateWithoutCompanyDataInput {
  networkType?: NetworkTypeUpdateOneRequiredWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput;
}

export interface NetworkCreateManyWithoutNetworkTypeInput {
  create?:
    | NetworkCreateWithoutNetworkTypeInput[]
    | NetworkCreateWithoutNetworkTypeInput;
  connect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
}

export interface DeviceProfileUpsertWithWhereUniqueWithoutCompanyInput {
  where: DeviceProfileWhereUniqueInput;
  update: DeviceProfileUpdateWithoutCompanyDataInput;
  create: DeviceProfileCreateWithoutCompanyInput;
}

export interface ProtocolDataCreateManyWithoutNetworkProtocolInput {
  create?:
    | ProtocolDataCreateWithoutNetworkProtocolInput[]
    | ProtocolDataCreateWithoutNetworkProtocolInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
}

export interface CompanyUpsertWithoutCompanyNetworkTypeLinksInput {
  update: CompanyUpdateWithoutCompanyNetworkTypeLinksDataInput;
  create: CompanyCreateWithoutCompanyNetworkTypeLinksInput;
}

export interface DeviceProfileCreateManyWithoutCompanyInput {
  create?:
    | DeviceProfileCreateWithoutCompanyInput[]
    | DeviceProfileCreateWithoutCompanyInput;
  connect?: DeviceProfileWhereUniqueInput[] | DeviceProfileWhereUniqueInput;
}

export interface CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput;
  update: CompanyNetworkTypeLinkUpdateWithoutNetworkTypeDataInput;
  create: CompanyNetworkTypeLinkCreateWithoutNetworkTypeInput;
}

export interface CompanyUpdateWithoutApplicationsDataInput {
  name?: String;
  type?: CompanyTypeUpdateOneWithoutCompaniesInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyUpdateManyWithoutCompanyInput;
  users?: UserUpdateManyWithoutCompanyInput;
}

export interface CompanyNetworkTypeLinkScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?:
    | CompanyNetworkTypeLinkScalarWhereInput[]
    | CompanyNetworkTypeLinkScalarWhereInput;
  OR?:
    | CompanyNetworkTypeLinkScalarWhereInput[]
    | CompanyNetworkTypeLinkScalarWhereInput;
  NOT?:
    | CompanyNetworkTypeLinkScalarWhereInput[]
    | CompanyNetworkTypeLinkScalarWhereInput;
}

export interface CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput {
  create?:
    | CompanyNetworkTypeLinkCreateWithoutCompanyInput[]
    | CompanyNetworkTypeLinkCreateWithoutCompanyInput;
  delete?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  connect?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  set?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  disconnect?:
    | CompanyNetworkTypeLinkWhereUniqueInput[]
    | CompanyNetworkTypeLinkWhereUniqueInput;
  update?:
    | CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutCompanyInput[]
    | CompanyNetworkTypeLinkUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutCompanyInput[]
    | CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?:
    | CompanyNetworkTypeLinkScalarWhereInput[]
    | CompanyNetworkTypeLinkScalarWhereInput;
  updateMany?:
    | CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput[]
    | CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput;
}

export interface CompanyNetworkTypeLinkUpdateManyWithWhereNestedInput {
  where: CompanyNetworkTypeLinkScalarWhereInput;
  data: CompanyNetworkTypeLinkUpdateManyDataInput;
}

export interface NetworkTypeUpdateWithoutCompanyNetworkTypeLinksDataInput {
  name?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutNetworkTypeInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutNetworkTypeInput;
  networkProtocols?: NetworkProtocolUpdateManyWithoutNetworkTypeInput;
  networks?: NetworkUpdateManyWithoutNetworkTypeInput;
}

export interface CompanyNetworkTypeLinkUpdateManyDataInput {
  networkSettings?: String;
}

export interface UserRoleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRoleWhereInput;
  AND?: UserRoleSubscriptionWhereInput[] | UserRoleSubscriptionWhereInput;
  OR?: UserRoleSubscriptionWhereInput[] | UserRoleSubscriptionWhereInput;
  NOT?: UserRoleSubscriptionWhereInput[] | UserRoleSubscriptionWhereInput;
}

export interface NetworkTypeUpsertWithoutDeviceNetworkTypeLinksInput {
  update: NetworkTypeUpdateWithoutDeviceNetworkTypeLinksDataInput;
  create: NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput;
}

export interface DeviceNetworkTypeLinkWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  device?: DeviceWhereInput;
  networkType?: NetworkTypeWhereInput;
  deviceProfile?: DeviceProfileWhereInput;
  networkSettings?: String;
  networkSettings_not?: String;
  networkSettings_in?: String[] | String;
  networkSettings_not_in?: String[] | String;
  networkSettings_lt?: String;
  networkSettings_lte?: String;
  networkSettings_gt?: String;
  networkSettings_gte?: String;
  networkSettings_contains?: String;
  networkSettings_not_contains?: String;
  networkSettings_starts_with?: String;
  networkSettings_not_starts_with?: String;
  networkSettings_ends_with?: String;
  networkSettings_not_ends_with?: String;
  AND?: DeviceNetworkTypeLinkWhereInput[] | DeviceNetworkTypeLinkWhereInput;
  OR?: DeviceNetworkTypeLinkWhereInput[] | DeviceNetworkTypeLinkWhereInput;
  NOT?: DeviceNetworkTypeLinkWhereInput[] | DeviceNetworkTypeLinkWhereInput;
}

export interface DeviceNetworkTypeLinkUpsertWithWhereUniqueWithoutDeviceInput {
  where: DeviceNetworkTypeLinkWhereUniqueInput;
  update: DeviceNetworkTypeLinkUpdateWithoutDeviceDataInput;
  create: DeviceNetworkTypeLinkCreateWithoutDeviceInput;
}

export interface EmailVerificationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmailVerificationWhereInput;
  AND?:
    | EmailVerificationSubscriptionWhereInput[]
    | EmailVerificationSubscriptionWhereInput;
  OR?:
    | EmailVerificationSubscriptionWhereInput[]
    | EmailVerificationSubscriptionWhereInput;
  NOT?:
    | EmailVerificationSubscriptionWhereInput[]
    | EmailVerificationSubscriptionWhereInput;
}

export interface DeviceUpsertWithWhereUniqueWithoutApplicationInput {
  where: DeviceWhereUniqueInput;
  update: DeviceUpdateWithoutApplicationDataInput;
  create: DeviceCreateWithoutApplicationInput;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyWhereInput;
  AND?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  OR?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  NOT?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
}

export interface DeviceScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deviceModel?: String;
  deviceModel_not?: String;
  deviceModel_in?: String[] | String;
  deviceModel_not_in?: String[] | String;
  deviceModel_lt?: String;
  deviceModel_lte?: String;
  deviceModel_gt?: String;
  deviceModel_gte?: String;
  deviceModel_contains?: String;
  deviceModel_not_contains?: String;
  deviceModel_starts_with?: String;
  deviceModel_not_starts_with?: String;
  deviceModel_ends_with?: String;
  deviceModel_not_ends_with?: String;
  AND?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
  OR?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
  NOT?: DeviceScalarWhereInput[] | DeviceScalarWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoleDataInput;
}

export interface DeviceUpdateManyWithWhereNestedInput {
  where: DeviceScalarWhereInput;
  data: DeviceUpdateManyDataInput;
}

export interface UserRoleCreateInput {
  name?: String;
  users?: UserCreateManyWithoutRoleInput;
}

export interface DeviceUpdateManyDataInput {
  name?: String;
  description?: String;
  deviceModel?: String;
}

export interface ApplicationUpdateWithoutReportingProtocolDataInput {
  company?: CompanyUpdateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput;
  devices?: DeviceUpdateManyWithoutApplicationInput;
}

export interface ApplicationUpsertWithoutApplicationNetworkTypeLinksInput {
  update: ApplicationUpdateWithoutApplicationNetworkTypeLinksDataInput;
  create: ApplicationCreateWithoutApplicationNetworkTypeLinksInput;
}

export interface ReportingProtocolCreateInput {
  name?: String;
  protocolHandler?: String;
  applications?: ApplicationCreateManyWithoutReportingProtocolInput;
}

export interface ApplicationNetworkTypeLinkUpsertWithWhereUniqueWithoutNetworkTypeInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput;
  update: ApplicationNetworkTypeLinkUpdateWithoutNetworkTypeDataInput;
  create: ApplicationNetworkTypeLinkCreateWithoutNetworkTypeInput;
}

export interface CompanyUpdateWithoutPasswordPoliciesDataInput {
  name?: String;
  type?: CompanyTypeUpdateOneWithoutCompaniesInput;
  applications?: ApplicationUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutCompanyInput;
  users?: UserUpdateManyWithoutCompanyInput;
}

export interface NetworkTypeUpsertWithoutCompanyNetworkTypeLinksInput {
  update: NetworkTypeUpdateWithoutCompanyNetworkTypeLinksDataInput;
  create: NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput;
}

export type NetworkTypeWhereUniqueInput = AtLeastOne<{
  id: Int;
  name?: String;
}>;

export interface CompanyNetworkTypeLinkUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyNetworkTypeLinkWhereUniqueInput;
  update: CompanyNetworkTypeLinkUpdateWithoutCompanyDataInput;
  create: CompanyNetworkTypeLinkCreateWithoutCompanyInput;
}

export interface NetworkUpdateWithWhereUniqueWithoutNetworkProviderInput {
  where: NetworkWhereUniqueInput;
  data: NetworkUpdateWithoutNetworkProviderDataInput;
}

export interface CompanyUpsertWithoutApplicationsInput {
  update: CompanyUpdateWithoutApplicationsDataInput;
  create: CompanyCreateWithoutApplicationsInput;
}

export interface NetworkProtocolUpdateManyMutationInput {
  name?: String;
  protocolHandler?: String;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
}

export interface ApplicationUpdateManyMutationInput {
  name?: String;
  description?: String;
  baseUrl?: String;
}

export interface EmailVerificationUpdateManyMutationInput {
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface EmailVerificationUpdateInput {
  user?: UserUpdateOneRequiredWithoutEmailVerificationsInput;
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface CompanyTypeCreateOneWithoutCompaniesInput {
  create?: CompanyTypeCreateWithoutCompaniesInput;
  connect?: CompanyTypeWhereUniqueInput;
}

export interface CompanyCreateWithoutUsersInput {
  name?: String;
  type?: CompanyTypeCreateOneWithoutCompaniesInput;
  applications?: ApplicationCreateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyCreateManyWithoutCompanyInput;
}

export interface ApplicationCreateOneWithoutApplicationNetworkTypeLinksInput {
  create?: ApplicationCreateWithoutApplicationNetworkTypeLinksInput;
  connect?: ApplicationWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkCreateInput {
  application: ApplicationCreateOneWithoutApplicationNetworkTypeLinksInput;
  networkType: NetworkTypeCreateOneWithoutApplicationNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput {
  create?: NetworkTypeCreateWithoutDeviceNetworkTypeLinksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpdateInput {
  application?: ApplicationUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutApplicationNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface ApplicationNetworkTypeLinkCreateManyWithoutApplicationInput {
  create?:
    | ApplicationNetworkTypeLinkCreateWithoutApplicationInput[]
    | ApplicationNetworkTypeLinkCreateWithoutApplicationInput;
  connect?:
    | ApplicationNetworkTypeLinkWhereUniqueInput[]
    | ApplicationNetworkTypeLinkWhereUniqueInput;
}

export interface ApplicationNetworkTypeLinkUpdateManyMutationInput {
  networkSettings?: String;
}

export interface ApplicationCreateOneWithoutDevicesInput {
  create?: ApplicationCreateWithoutDevicesInput;
  connect?: ApplicationWhereUniqueInput;
}

export interface CompanyCreateInput {
  name?: String;
  type?: CompanyTypeCreateOneWithoutCompaniesInput;
  applications?: ApplicationCreateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyCreateManyWithoutCompanyInput;
  users?: UserCreateManyWithoutCompanyInput;
}

export interface NetworkCreateManyWithoutNetworkProtocolInput {
  create?:
    | NetworkCreateWithoutNetworkProtocolInput[]
    | NetworkCreateWithoutNetworkProtocolInput;
  connect?: NetworkWhereUniqueInput[] | NetworkWhereUniqueInput;
}

export interface CompanyUpdateInput {
  name?: String;
  type?: CompanyTypeUpdateOneWithoutCompaniesInput;
  applications?: ApplicationUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyUpdateManyWithoutCompanyInput;
  users?: UserUpdateManyWithoutCompanyInput;
}

export interface CompanyCreateOneWithoutDeviceProfilesInput {
  create?: CompanyCreateWithoutDeviceProfilesInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateManyMutationInput {
  name?: String;
}

export interface EmailVerificationCreateManyWithoutUserInput {
  create?:
    | EmailVerificationCreateWithoutUserInput[]
    | EmailVerificationCreateWithoutUserInput;
  connect?:
    | EmailVerificationWhereUniqueInput[]
    | EmailVerificationWhereUniqueInput;
}

export interface CompanyNetworkTypeLinkCreateInput {
  company: CompanyCreateOneWithoutCompanyNetworkTypeLinksInput;
  networkType: NetworkTypeCreateOneWithoutCompanyNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface NetworkTypeCreateOneWithoutNetworkProtocolsInput {
  create?: NetworkTypeCreateWithoutNetworkProtocolsInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface CompanyNetworkTypeLinkUpdateInput {
  company?: CompanyUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface NetworkCreateOneWithoutProtocolDataInput {
  create?: NetworkCreateWithoutProtocolDataInput;
  connect?: NetworkWhereUniqueInput;
}

export interface CompanyNetworkTypeLinkUpdateManyMutationInput {
  networkSettings?: String;
}

export interface CompanyTypeUpdateWithoutCompaniesDataInput {
  name?: String;
}

export interface CompanyTypeCreateInput {
  name?: String;
  companies?: CompanyCreateManyWithoutTypeInput;
}

export interface ApplicationNetworkTypeLinkUpdateWithWhereUniqueWithoutNetworkTypeInput {
  where: ApplicationNetworkTypeLinkWhereUniqueInput;
  data: ApplicationNetworkTypeLinkUpdateWithoutNetworkTypeDataInput;
}

export interface CompanyCreateManyWithoutTypeInput {
  create?: CompanyCreateWithoutTypeInput[] | CompanyCreateWithoutTypeInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface NetworkProtocolSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NetworkProtocolWhereInput;
  AND?:
    | NetworkProtocolSubscriptionWhereInput[]
    | NetworkProtocolSubscriptionWhereInput;
  OR?:
    | NetworkProtocolSubscriptionWhereInput[]
    | NetworkProtocolSubscriptionWhereInput;
  NOT?:
    | NetworkProtocolSubscriptionWhereInput[]
    | NetworkProtocolSubscriptionWhereInput;
}

export interface CompanyCreateWithoutTypeInput {
  name?: String;
  applications?: ApplicationCreateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkCreateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileCreateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyCreateManyWithoutCompanyInput;
  users?: UserCreateManyWithoutCompanyInput;
}

export interface UserRoleUpdateManyMutationInput {
  name?: String;
}

export interface CompanyTypeUpdateInput {
  name?: String;
  companies?: CompanyUpdateManyWithoutTypeInput;
}

export interface UserCreateInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  company: CompanyCreateOneWithoutUsersInput;
  passwordHash: String;
  role: UserRoleCreateOneWithoutUsersInput;
  emailVerifications?: EmailVerificationCreateManyWithoutUserInput;
}

export interface CompanyUpdateManyWithoutTypeInput {
  create?: CompanyCreateWithoutTypeInput[] | CompanyCreateWithoutTypeInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutTypeInput[]
    | CompanyUpdateWithWhereUniqueWithoutTypeInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutTypeInput[]
    | CompanyUpsertWithWhereUniqueWithoutTypeInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface ProtocolDataCreateInput {
  network: NetworkCreateOneWithoutProtocolDataInput;
  networkProtocol: NetworkProtocolCreateOneWithoutProtocolDataInput;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface CompanyUpdateWithWhereUniqueWithoutTypeInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutTypeDataInput;
}

export interface NetworkProviderUpdateManyMutationInput {
  name?: String;
}

export interface CompanyUpdateWithoutTypeDataInput {
  name?: String;
  applications?: ApplicationUpdateManyWithoutCompanyInput;
  companyNetworkTypeLinks?: CompanyNetworkTypeLinkUpdateManyWithoutCompanyInput;
  deviceProfiles?: DeviceProfileUpdateManyWithoutCompanyInput;
  passwordPolicies?: PasswordPolicyUpdateManyWithoutCompanyInput;
  users?: UserUpdateManyWithoutCompanyInput;
}

export interface NetworkUpdateManyMutationInput {
  name?: String;
  baseUrl?: String;
  securityData?: String;
}

export interface CompanyUpsertWithWhereUniqueWithoutTypeInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutTypeDataInput;
  create: CompanyCreateWithoutTypeInput;
}

export interface NetworkTypeCreateOneWithoutCompanyNetworkTypeLinksInput {
  create?: NetworkTypeCreateWithoutCompanyNetworkTypeLinksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface CompanyScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  OR?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  NOT?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
}

export interface CompanyCreateOneWithoutCompanyNetworkTypeLinksInput {
  create?: CompanyCreateWithoutCompanyNetworkTypeLinksInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput;
  data: CompanyUpdateManyDataInput;
}

export interface NetworkTypeCreateOneWithoutDeviceProfilesInput {
  create?: NetworkTypeCreateWithoutDeviceProfilesInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface CompanyUpdateManyDataInput {
  name?: String;
}

export interface UserCreateManyWithoutCompanyInput {
  create?: UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface CompanyTypeUpdateManyMutationInput {
  name?: String;
}

export interface NetworkProtocolCreateOneWithoutNetworksInput {
  create?: NetworkProtocolCreateWithoutNetworksInput;
  connect?: NetworkProtocolWhereUniqueInput;
}

export interface DeviceCreateInput {
  application: ApplicationCreateOneWithoutDevicesInput;
  name?: String;
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutDeviceInput;
}

export interface CompanyNetworkTypeLinkUpdateWithoutCompanyDataInput {
  networkType?: NetworkTypeUpdateOneRequiredWithoutCompanyNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface DeviceUpdateInput {
  application?: ApplicationUpdateOneRequiredWithoutDevicesInput;
  name?: String;
  description?: String;
  deviceModel?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutDeviceInput;
}

export interface DeviceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeviceWhereInput;
  AND?: DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput;
  OR?: DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput;
  NOT?: DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput;
}

export interface DeviceUpdateManyMutationInput {
  name?: String;
  description?: String;
  deviceModel?: String;
}

export interface ReportingProtocolUpdateInput {
  name?: String;
  protocolHandler?: String;
  applications?: ApplicationUpdateManyWithoutReportingProtocolInput;
}

export interface DeviceNetworkTypeLinkCreateInput {
  device: DeviceCreateOneWithoutDeviceNetworkTypeLinksInput;
  networkType: NetworkTypeCreateOneWithoutDeviceNetworkTypeLinksInput;
  deviceProfile: DeviceProfileCreateOneWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface NetworkCreateWithoutNetworkProviderInput {
  name?: String;
  networkType: NetworkTypeCreateOneWithoutNetworksInput;
  networkProtocol: NetworkProtocolCreateOneWithoutNetworksInput;
  baseUrl?: String;
  securityData?: String;
  protocolData?: ProtocolDataCreateManyWithoutNetworkInput;
}

export interface DeviceNetworkTypeLinkUpdateInput {
  device?: DeviceUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  networkType?: NetworkTypeUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  deviceProfile?: DeviceProfileUpdateOneRequiredWithoutDeviceNetworkTypeLinksInput;
  networkSettings?: String;
}

export interface DeviceCreateManyWithoutApplicationInput {
  create?:
    | DeviceCreateWithoutApplicationInput[]
    | DeviceCreateWithoutApplicationInput;
  connect?: DeviceWhereUniqueInput[] | DeviceWhereUniqueInput;
}

export interface DeviceNetworkTypeLinkUpdateManyMutationInput {
  networkSettings?: String;
}

export interface NetworkTypeCreateOneWithoutNetworksInput {
  create?: NetworkTypeCreateWithoutNetworksInput;
  connect?: NetworkTypeWhereUniqueInput;
}

export interface DeviceProfileCreateInput {
  networkType: NetworkTypeCreateOneWithoutDeviceProfilesInput;
  company: CompanyCreateOneWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkCreateManyWithoutDeviceProfileInput;
}

export interface ApplicationUpdateInput {
  company?: CompanyUpdateOneWithoutApplicationsInput;
  name?: String;
  description?: String;
  baseUrl?: String;
  reportingProtocol?: ReportingProtocolUpdateOneWithoutApplicationsInput;
  applicationNetworkTypeLinks?: ApplicationNetworkTypeLinkUpdateManyWithoutApplicationInput;
  devices?: DeviceUpdateManyWithoutApplicationInput;
}

export interface DeviceProfileUpdateInput {
  networkType?: NetworkTypeUpdateOneRequiredWithoutDeviceProfilesInput;
  company?: CompanyUpdateOneRequiredWithoutDeviceProfilesInput;
  name?: String;
  description?: String;
  networkSettings?: String;
  deviceNetworkTypeLinks?: DeviceNetworkTypeLinkUpdateManyWithoutDeviceProfileInput;
}

export interface UserCreateWithoutRoleInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  company: CompanyCreateOneWithoutUsersInput;
  passwordHash: String;
  emailVerifications?: EmailVerificationCreateManyWithoutUserInput;
}

export interface UserCreateWithoutEmailVerificationsInput {
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  company: CompanyCreateOneWithoutUsersInput;
  passwordHash: String;
  role: UserRoleCreateOneWithoutUsersInput;
}

export interface UserCreateOneWithoutEmailVerificationsInput {
  create?: UserCreateWithoutEmailVerificationsInput;
  connect?: UserWhereUniqueInput;
}

export interface EmailVerificationCreateInput {
  user: UserCreateOneWithoutEmailVerificationsInput;
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface DeviceProfileUpdateManyMutationInput {
  name?: String;
  description?: String;
  networkSettings?: String;
}

export interface DeviceNetworkTypeLinkCreateManyWithoutNetworkTypeInput {
  create?:
    | DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput[]
    | DeviceNetworkTypeLinkCreateWithoutNetworkTypeInput;
  connect?:
    | DeviceNetworkTypeLinkWhereUniqueInput[]
    | DeviceNetworkTypeLinkWhereUniqueInput;
}

export interface CompanyWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  type?: CompanyTypeWhereInput;
  applications_every?: ApplicationWhereInput;
  applications_some?: ApplicationWhereInput;
  applications_none?: ApplicationWhereInput;
  companyNetworkTypeLinks_every?: CompanyNetworkTypeLinkWhereInput;
  companyNetworkTypeLinks_some?: CompanyNetworkTypeLinkWhereInput;
  companyNetworkTypeLinks_none?: CompanyNetworkTypeLinkWhereInput;
  deviceProfiles_every?: DeviceProfileWhereInput;
  deviceProfiles_some?: DeviceProfileWhereInput;
  deviceProfiles_none?: DeviceProfileWhereInput;
  passwordPolicies_every?: PasswordPolicyWhereInput;
  passwordPolicies_some?: PasswordPolicyWhereInput;
  passwordPolicies_none?: PasswordPolicyWhereInput;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: CompanyWhereInput[] | CompanyWhereInput;
  OR?: CompanyWhereInput[] | CompanyWhereInput;
  NOT?: CompanyWhereInput[] | CompanyWhereInput;
}

export interface ProtocolDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProtocolDataWhereInput;
  AND?:
    | ProtocolDataSubscriptionWhereInput[]
    | ProtocolDataSubscriptionWhereInput;
  OR?:
    | ProtocolDataSubscriptionWhereInput[]
    | ProtocolDataSubscriptionWhereInput;
  NOT?:
    | ProtocolDataSubscriptionWhereInput[]
    | ProtocolDataSubscriptionWhereInput;
}

export interface ProtocolDataCreateManyWithoutNetworkInput {
  create?:
    | ProtocolDataCreateWithoutNetworkInput[]
    | ProtocolDataCreateWithoutNetworkInput;
  connect?: ProtocolDataWhereUniqueInput[] | ProtocolDataWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserRolePreviousValues {
  id: Int;
  name?: String;
}

export interface UserRolePreviousValuesPromise
  extends Promise<UserRolePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface UserRolePreviousValuesSubscription
  extends Promise<AsyncIterator<UserRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateApplicationNetworkTypeLink {
  count: Int;
}

export interface AggregateApplicationNetworkTypeLinkPromise
  extends Promise<AggregateApplicationNetworkTypeLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationNetworkTypeLinkSubscription
  extends Promise<AsyncIterator<AggregateApplicationNetworkTypeLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkType {
  id: Int;
  name: String;
}

export interface NetworkTypePromise extends Promise<NetworkType>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  applicationNetworkTypeLinks: <
    T = FragmentableArray<ApplicationNetworkTypeLink>
  >(
    args?: {
      where?: ApplicationNetworkTypeLinkWhereInput;
      orderBy?: ApplicationNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  companyNetworkTypeLinks: <T = FragmentableArray<CompanyNetworkTypeLink>>(
    args?: {
      where?: CompanyNetworkTypeLinkWhereInput;
      orderBy?: CompanyNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deviceNetworkTypeLinks: <T = FragmentableArray<DeviceNetworkTypeLink>>(
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deviceProfiles: <T = FragmentableArray<DeviceProfile>>(
    args?: {
      where?: DeviceProfileWhereInput;
      orderBy?: DeviceProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  networkProtocols: <T = FragmentableArray<NetworkProtocol>>(
    args?: {
      where?: NetworkProtocolWhereInput;
      orderBy?: NetworkProtocolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  networks: <T = FragmentableArray<Network>>(
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NetworkTypeSubscription
  extends Promise<AsyncIterator<NetworkType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  applicationNetworkTypeLinks: <
    T = Promise<AsyncIterator<ApplicationNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: ApplicationNetworkTypeLinkWhereInput;
      orderBy?: ApplicationNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  companyNetworkTypeLinks: <
    T = Promise<AsyncIterator<CompanyNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: CompanyNetworkTypeLinkWhereInput;
      orderBy?: CompanyNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deviceNetworkTypeLinks: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deviceProfiles: <T = Promise<AsyncIterator<DeviceProfileSubscription>>>(
    args?: {
      where?: DeviceProfileWhereInput;
      orderBy?: DeviceProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  networkProtocols: <T = Promise<AsyncIterator<NetworkProtocolSubscription>>>(
    args?: {
      where?: NetworkProtocolWhereInput;
      orderBy?: NetworkProtocolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  networks: <T = Promise<AsyncIterator<NetworkSubscription>>>(
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ApplicationNetworkTypeLinkEdge {
  node: ApplicationNetworkTypeLink;
  cursor: String;
}

export interface ApplicationNetworkTypeLinkEdgePromise
  extends Promise<ApplicationNetworkTypeLinkEdge>,
    Fragmentable {
  node: <T = ApplicationNetworkTypeLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationNetworkTypeLinkEdgeSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinkEdge>>,
    Fragmentable {
  node: <T = ApplicationNetworkTypeLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNetworkTypeLink {
  id: Int;
  networkSettings?: String;
}

export interface CompanyNetworkTypeLinkPromise
  extends Promise<CompanyNetworkTypeLink>,
    Fragmentable {
  id: () => Promise<Int>;
  company: <T = CompanyPromise>() => T;
  networkType: <T = NetworkTypePromise>() => T;
  networkSettings: () => Promise<String>;
}

export interface CompanyNetworkTypeLinkSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  company: <T = CompanySubscription>() => T;
  networkType: <T = NetworkTypeSubscription>() => T;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ApplicationNetworkTypeLink {
  id: Int;
  networkSettings?: String;
}

export interface ApplicationNetworkTypeLinkPromise
  extends Promise<ApplicationNetworkTypeLink>,
    Fragmentable {
  id: () => Promise<Int>;
  application: <T = ApplicationPromise>() => T;
  networkType: <T = NetworkTypePromise>() => T;
  networkSettings: () => Promise<String>;
}

export interface ApplicationNetworkTypeLinkSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  application: <T = ApplicationSubscription>() => T;
  networkType: <T = NetworkTypeSubscription>() => T;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationNetworkTypeLinkConnection {
  pageInfo: PageInfo;
  edges: ApplicationNetworkTypeLinkEdge[];
}

export interface ApplicationNetworkTypeLinkConnectionPromise
  extends Promise<ApplicationNetworkTypeLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationNetworkTypeLinkEdge>>() => T;
  aggregate: <T = AggregateApplicationNetworkTypeLinkPromise>() => T;
}

export interface ApplicationNetworkTypeLinkConnectionSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ApplicationNetworkTypeLinkEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateApplicationNetworkTypeLinkSubscription>() => T;
}

export interface UserPreviousValues {
  id: Int;
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  passwordHash: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  lastVerifiedEmail: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  passwordHash: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  lastVerifiedEmail: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
}

export interface UserRoleEdge {
  node: UserRole;
  cursor: String;
}

export interface UserRoleEdgePromise
  extends Promise<UserRoleEdge>,
    Fragmentable {
  node: <T = UserRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRoleEdgeSubscription
  extends Promise<AsyncIterator<UserRoleEdge>>,
    Fragmentable {
  node: <T = UserRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Application {
  id: Int;
  name?: String;
  description?: String;
  baseUrl?: String;
}

export interface ApplicationPromise extends Promise<Application>, Fragmentable {
  id: () => Promise<Int>;
  company: <T = CompanyPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  baseUrl: () => Promise<String>;
  reportingProtocol: <T = ReportingProtocolPromise>() => T;
  applicationNetworkTypeLinks: <
    T = FragmentableArray<ApplicationNetworkTypeLink>
  >(
    args?: {
      where?: ApplicationNetworkTypeLinkWhereInput;
      orderBy?: ApplicationNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  devices: <T = FragmentableArray<Device>>(
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ApplicationSubscription
  extends Promise<AsyncIterator<Application>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  company: <T = CompanySubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  baseUrl: () => Promise<AsyncIterator<String>>;
  reportingProtocol: <T = ReportingProtocolSubscription>() => T;
  applicationNetworkTypeLinks: <
    T = Promise<AsyncIterator<ApplicationNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: ApplicationNetworkTypeLinkWhereInput;
      orderBy?: ApplicationNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  devices: <T = Promise<AsyncIterator<DeviceSubscription>>>(
    args?: {
      where?: DeviceWhereInput;
      orderBy?: DeviceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Company {
  id: Int;
  name?: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  type: <T = CompanyTypePromise>() => T;
  applications: <T = FragmentableArray<Application>>(
    args?: {
      where?: ApplicationWhereInput;
      orderBy?: ApplicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  companyNetworkTypeLinks: <T = FragmentableArray<CompanyNetworkTypeLink>>(
    args?: {
      where?: CompanyNetworkTypeLinkWhereInput;
      orderBy?: CompanyNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deviceProfiles: <T = FragmentableArray<DeviceProfile>>(
    args?: {
      where?: DeviceProfileWhereInput;
      orderBy?: DeviceProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  passwordPolicies: <T = FragmentableArray<PasswordPolicy>>(
    args?: {
      where?: PasswordPolicyWhereInput;
      orderBy?: PasswordPolicyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  type: <T = CompanyTypeSubscription>() => T;
  applications: <T = Promise<AsyncIterator<ApplicationSubscription>>>(
    args?: {
      where?: ApplicationWhereInput;
      orderBy?: ApplicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  companyNetworkTypeLinks: <
    T = Promise<AsyncIterator<CompanyNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: CompanyNetworkTypeLinkWhereInput;
      orderBy?: CompanyNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deviceProfiles: <T = Promise<AsyncIterator<DeviceProfileSubscription>>>(
    args?: {
      where?: DeviceProfileWhereInput;
      orderBy?: DeviceProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  passwordPolicies: <T = Promise<AsyncIterator<PasswordPolicySubscription>>>(
    args?: {
      where?: PasswordPolicyWhereInput;
      orderBy?: PasswordPolicyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ApplicationSubscriptionPayload {
  mutation: MutationType;
  node: Application;
  updatedFields: String[];
  previousValues: ApplicationPreviousValues;
}

export interface ApplicationSubscriptionPayloadPromise
  extends Promise<ApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationPreviousValuesPromise>() => T;
}

export interface ApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicationPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationPreviousValues {
  id: Int;
  name?: String;
  description?: String;
  baseUrl?: String;
}

export interface ApplicationPreviousValuesPromise
  extends Promise<ApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  baseUrl: () => Promise<String>;
}

export interface ApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  baseUrl: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReportingProtocol {
  count: Int;
}

export interface AggregateReportingProtocolPromise
  extends Promise<AggregateReportingProtocol>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportingProtocolSubscription
  extends Promise<AsyncIterator<AggregateReportingProtocol>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateApplication {
  count: Int;
}

export interface AggregateApplicationPromise
  extends Promise<AggregateApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationSubscription
  extends Promise<AsyncIterator<AggregateApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportingProtocolConnection {
  pageInfo: PageInfo;
  edges: ReportingProtocolEdge[];
}

export interface ReportingProtocolConnectionPromise
  extends Promise<ReportingProtocolConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportingProtocolEdge>>() => T;
  aggregate: <T = AggregateReportingProtocolPromise>() => T;
}

export interface ReportingProtocolConnectionSubscription
  extends Promise<AsyncIterator<ReportingProtocolConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportingProtocolEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportingProtocolSubscription>() => T;
}

export interface ApplicationNetworkTypeLinkSubscriptionPayload {
  mutation: MutationType;
  node: ApplicationNetworkTypeLink;
  updatedFields: String[];
  previousValues: ApplicationNetworkTypeLinkPreviousValues;
}

export interface ApplicationNetworkTypeLinkSubscriptionPayloadPromise
  extends Promise<ApplicationNetworkTypeLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationNetworkTypeLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationNetworkTypeLinkPreviousValuesPromise>() => T;
}

export interface ApplicationNetworkTypeLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationNetworkTypeLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ApplicationNetworkTypeLinkPreviousValuesSubscription
  >() => T;
}

export interface AggregateProtocolData {
  count: Int;
}

export interface AggregateProtocolDataPromise
  extends Promise<AggregateProtocolData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProtocolDataSubscription
  extends Promise<AsyncIterator<AggregateProtocolData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicationNetworkTypeLinkPreviousValues {
  id: Int;
  networkSettings?: String;
}

export interface ApplicationNetworkTypeLinkPreviousValuesPromise
  extends Promise<ApplicationNetworkTypeLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
}

export interface ApplicationNetworkTypeLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationNetworkTypeLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface ProtocolDataConnection {
  pageInfo: PageInfo;
  edges: ProtocolDataEdge[];
}

export interface ProtocolDataConnectionPromise
  extends Promise<ProtocolDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProtocolDataEdge>>() => T;
  aggregate: <T = AggregateProtocolDataPromise>() => T;
}

export interface ProtocolDataConnectionSubscription
  extends Promise<AsyncIterator<ProtocolDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProtocolDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProtocolDataSubscription>() => T;
}

export interface ApplicationEdge {
  node: Application;
  cursor: String;
}

export interface ApplicationEdgePromise
  extends Promise<ApplicationEdge>,
    Fragmentable {
  node: <T = ApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationEdgeSubscription
  extends Promise<AsyncIterator<ApplicationEdge>>,
    Fragmentable {
  node: <T = ApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PasswordPolicyEdge {
  node: PasswordPolicy;
  cursor: String;
}

export interface PasswordPolicyEdgePromise
  extends Promise<PasswordPolicyEdge>,
    Fragmentable {
  node: <T = PasswordPolicyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PasswordPolicyEdgeSubscription
  extends Promise<AsyncIterator<PasswordPolicyEdge>>,
    Fragmentable {
  node: <T = PasswordPolicySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface AggregateNetworkType {
  count: Int;
}

export interface AggregateNetworkTypePromise
  extends Promise<AggregateNetworkType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkTypeSubscription
  extends Promise<AsyncIterator<AggregateNetworkType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyPreviousValues {
  id: Int;
  name?: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NetworkTypeConnection {
  pageInfo: PageInfo;
  edges: NetworkTypeEdge[];
}

export interface NetworkTypeConnectionPromise
  extends Promise<NetworkTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkTypeEdge>>() => T;
  aggregate: <T = AggregateNetworkTypePromise>() => T;
}

export interface NetworkTypeConnectionSubscription
  extends Promise<AsyncIterator<NetworkTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkTypeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNetworkProvider {
  count: Int;
}

export interface AggregateNetworkProviderPromise
  extends Promise<AggregateNetworkProvider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkProviderSubscription
  extends Promise<AsyncIterator<AggregateNetworkProvider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyNetworkTypeLinkSubscriptionPayload {
  mutation: MutationType;
  node: CompanyNetworkTypeLink;
  updatedFields: String[];
  previousValues: CompanyNetworkTypeLinkPreviousValues;
}

export interface CompanyNetworkTypeLinkSubscriptionPayloadPromise
  extends Promise<CompanyNetworkTypeLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyNetworkTypeLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyNetworkTypeLinkPreviousValuesPromise>() => T;
}

export interface CompanyNetworkTypeLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanyNetworkTypeLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyNetworkTypeLinkPreviousValuesSubscription>() => T;
}

export interface NetworkProviderConnection {
  pageInfo: PageInfo;
  edges: NetworkProviderEdge[];
}

export interface NetworkProviderConnectionPromise
  extends Promise<NetworkProviderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkProviderEdge>>() => T;
  aggregate: <T = AggregateNetworkProviderPromise>() => T;
}

export interface NetworkProviderConnectionSubscription
  extends Promise<AsyncIterator<NetworkProviderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkProviderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkProviderSubscription>() => T;
}

export interface CompanyNetworkTypeLinkPreviousValues {
  id: Int;
  networkSettings?: String;
}

export interface CompanyNetworkTypeLinkPreviousValuesPromise
  extends Promise<CompanyNetworkTypeLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
}

export interface CompanyNetworkTypeLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface NetworkProtocolEdge {
  node: NetworkProtocol;
  cursor: String;
}

export interface NetworkProtocolEdgePromise
  extends Promise<NetworkProtocolEdge>,
    Fragmentable {
  node: <T = NetworkProtocolPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkProtocolEdgeSubscription
  extends Promise<AsyncIterator<NetworkProtocolEdge>>,
    Fragmentable {
  node: <T = NetworkProtocolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationConnection {
  pageInfo: PageInfo;
  edges: ApplicationEdge[];
}

export interface ApplicationConnectionPromise
  extends Promise<ApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationEdge>>() => T;
  aggregate: <T = AggregateApplicationPromise>() => T;
}

export interface ApplicationConnectionSubscription
  extends Promise<AsyncIterator<ApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicationSubscription>() => T;
}

export interface AggregateNetwork {
  count: Int;
}

export interface AggregateNetworkPromise
  extends Promise<AggregateNetwork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkSubscription
  extends Promise<AsyncIterator<AggregateNetwork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyTypeSubscriptionPayload {
  mutation: MutationType;
  node: CompanyType;
  updatedFields: String[];
  previousValues: CompanyTypePreviousValues;
}

export interface CompanyTypeSubscriptionPayloadPromise
  extends Promise<CompanyTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyTypePreviousValuesPromise>() => T;
}

export interface CompanyTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanyTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanyTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyTypePreviousValuesSubscription>() => T;
}

export interface NetworkConnection {
  pageInfo: PageInfo;
  edges: NetworkEdge[];
}

export interface NetworkConnectionPromise
  extends Promise<NetworkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkEdge>>() => T;
  aggregate: <T = AggregateNetworkPromise>() => T;
}

export interface NetworkConnectionSubscription
  extends Promise<AsyncIterator<NetworkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkSubscription>() => T;
}

export interface CompanyTypePreviousValues {
  id: Int;
  name?: String;
}

export interface CompanyTypePreviousValuesPromise
  extends Promise<CompanyTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface CompanyTypePreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface EmailVerificationEdge {
  node: EmailVerification;
  cursor: String;
}

export interface EmailVerificationEdgePromise
  extends Promise<EmailVerificationEdge>,
    Fragmentable {
  node: <T = EmailVerificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailVerificationEdgeSubscription
  extends Promise<AsyncIterator<EmailVerificationEdge>>,
    Fragmentable {
  node: <T = EmailVerificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReportingProtocol {
  id: Int;
  name?: String;
  protocolHandler?: String;
}

export interface ReportingProtocolPromise
  extends Promise<ReportingProtocol>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  protocolHandler: () => Promise<String>;
  applications: <T = FragmentableArray<Application>>(
    args?: {
      where?: ApplicationWhereInput;
      orderBy?: ApplicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ReportingProtocolSubscription
  extends Promise<AsyncIterator<ReportingProtocol>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
  applications: <T = Promise<AsyncIterator<ApplicationSubscription>>>(
    args?: {
      where?: ApplicationWhereInput;
      orderBy?: ApplicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateDeviceProfile {
  count: Int;
}

export interface AggregateDeviceProfilePromise
  extends Promise<AggregateDeviceProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceProfileSubscription
  extends Promise<AsyncIterator<AggregateDeviceProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceSubscriptionPayload {
  mutation: MutationType;
  node: Device;
  updatedFields: String[];
  previousValues: DevicePreviousValues;
}

export interface DeviceSubscriptionPayloadPromise
  extends Promise<DeviceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DevicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DevicePreviousValuesPromise>() => T;
}

export interface DeviceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DevicePreviousValuesSubscription>() => T;
}

export interface DeviceProfileConnection {
  pageInfo: PageInfo;
  edges: DeviceProfileEdge[];
}

export interface DeviceProfileConnectionPromise
  extends Promise<DeviceProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceProfileEdge>>() => T;
  aggregate: <T = AggregateDeviceProfilePromise>() => T;
}

export interface DeviceProfileConnectionSubscription
  extends Promise<AsyncIterator<DeviceProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeviceProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeviceProfileSubscription>() => T;
}

export interface DevicePreviousValues {
  id: Int;
  name?: String;
  description?: String;
  deviceModel?: String;
}

export interface DevicePreviousValuesPromise
  extends Promise<DevicePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  deviceModel: () => Promise<String>;
}

export interface DevicePreviousValuesSubscription
  extends Promise<AsyncIterator<DevicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  deviceModel: () => Promise<AsyncIterator<String>>;
}

export interface DeviceNetworkTypeLinkEdge {
  node: DeviceNetworkTypeLink;
  cursor: String;
}

export interface DeviceNetworkTypeLinkEdgePromise
  extends Promise<DeviceNetworkTypeLinkEdge>,
    Fragmentable {
  node: <T = DeviceNetworkTypeLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceNetworkTypeLinkEdgeSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinkEdge>>,
    Fragmentable {
  node: <T = DeviceNetworkTypeLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailVerification {
  id: Int;
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface EmailVerificationPromise
  extends Promise<EmailVerification>,
    Fragmentable {
  id: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  uuid: () => Promise<String>;
  email: () => Promise<String>;
  changeRequested: () => Promise<String>;
}

export interface EmailVerificationSubscription
  extends Promise<AsyncIterator<EmailVerification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  uuid: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  changeRequested: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDevice {
  count: Int;
}

export interface AggregateDevicePromise
  extends Promise<AggregateDevice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceSubscription
  extends Promise<AsyncIterator<AggregateDevice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceNetworkTypeLinkSubscriptionPayload {
  mutation: MutationType;
  node: DeviceNetworkTypeLink;
  updatedFields: String[];
  previousValues: DeviceNetworkTypeLinkPreviousValues;
}

export interface DeviceNetworkTypeLinkSubscriptionPayloadPromise
  extends Promise<DeviceNetworkTypeLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeviceNetworkTypeLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeviceNetworkTypeLinkPreviousValuesPromise>() => T;
}

export interface DeviceNetworkTypeLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceNetworkTypeLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeviceNetworkTypeLinkPreviousValuesSubscription>() => T;
}

export interface DeviceConnection {
  pageInfo: PageInfo;
  edges: DeviceEdge[];
}

export interface DeviceConnectionPromise
  extends Promise<DeviceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceEdge>>() => T;
  aggregate: <T = AggregateDevicePromise>() => T;
}

export interface DeviceConnectionSubscription
  extends Promise<AsyncIterator<DeviceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeviceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeviceSubscription>() => T;
}

export interface DeviceNetworkTypeLinkPreviousValues {
  id: Int;
  networkSettings?: String;
}

export interface DeviceNetworkTypeLinkPreviousValuesPromise
  extends Promise<DeviceNetworkTypeLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  networkSettings: () => Promise<String>;
}

export interface DeviceNetworkTypeLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface CompanyTypeEdge {
  node: CompanyType;
  cursor: String;
}

export interface CompanyTypeEdgePromise
  extends Promise<CompanyTypeEdge>,
    Fragmentable {
  node: <T = CompanyTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyTypeEdgeSubscription
  extends Promise<AsyncIterator<CompanyTypeEdge>>,
    Fragmentable {
  node: <T = CompanyTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRole {
  id: Int;
  name?: String;
}

export interface UserRolePromise extends Promise<UserRole>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserRoleSubscription
  extends Promise<AsyncIterator<UserRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCompanyNetworkTypeLink {
  count: Int;
}

export interface AggregateCompanyNetworkTypeLinkPromise
  extends Promise<AggregateCompanyNetworkTypeLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanyNetworkTypeLinkSubscription
  extends Promise<AsyncIterator<AggregateCompanyNetworkTypeLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceProfileSubscriptionPayload {
  mutation: MutationType;
  node: DeviceProfile;
  updatedFields: String[];
  previousValues: DeviceProfilePreviousValues;
}

export interface DeviceProfileSubscriptionPayloadPromise
  extends Promise<DeviceProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeviceProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeviceProfilePreviousValuesPromise>() => T;
}

export interface DeviceProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeviceProfilePreviousValuesSubscription>() => T;
}

export interface CompanyNetworkTypeLinkConnection {
  pageInfo: PageInfo;
  edges: CompanyNetworkTypeLinkEdge[];
}

export interface CompanyNetworkTypeLinkConnectionPromise
  extends Promise<CompanyNetworkTypeLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyNetworkTypeLinkEdge>>() => T;
  aggregate: <T = AggregateCompanyNetworkTypeLinkPromise>() => T;
}

export interface CompanyNetworkTypeLinkConnectionSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CompanyNetworkTypeLinkEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCompanyNetworkTypeLinkSubscription>() => T;
}

export interface DeviceProfilePreviousValues {
  id: Int;
  name?: String;
  description?: String;
  networkSettings?: String;
}

export interface DeviceProfilePreviousValuesPromise
  extends Promise<DeviceProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  networkSettings: () => Promise<String>;
}

export interface DeviceProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<DeviceProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: Int;
  username?: String;
  email?: String;
  lastVerifiedEmail?: String;
  emailVerified?: Boolean;
  passwordHash: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  lastVerifiedEmail: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  company: <T = CompanyPromise>() => T;
  passwordHash: () => Promise<String>;
  role: <T = UserRolePromise>() => T;
  emailVerifications: <T = FragmentableArray<EmailVerification>>(
    args?: {
      where?: EmailVerificationWhereInput;
      orderBy?: EmailVerificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  lastVerifiedEmail: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  company: <T = CompanySubscription>() => T;
  passwordHash: () => Promise<AsyncIterator<String>>;
  role: <T = UserRoleSubscription>() => T;
  emailVerifications: <
    T = Promise<AsyncIterator<EmailVerificationSubscription>>
  >(
    args?: {
      where?: EmailVerificationWhereInput;
      orderBy?: EmailVerificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateUserRole {
  count: Int;
}

export interface AggregateUserRolePromise
  extends Promise<AggregateUserRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRoleSubscription
  extends Promise<AsyncIterator<AggregateUserRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailVerificationSubscriptionPayload {
  mutation: MutationType;
  node: EmailVerification;
  updatedFields: String[];
  previousValues: EmailVerificationPreviousValues;
}

export interface EmailVerificationSubscriptionPayloadPromise
  extends Promise<EmailVerificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailVerificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailVerificationPreviousValuesPromise>() => T;
}

export interface EmailVerificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailVerificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailVerificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailVerificationPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailVerificationPreviousValues {
  id: Int;
  uuid?: String;
  email?: String;
  changeRequested?: String;
}

export interface EmailVerificationPreviousValuesPromise
  extends Promise<EmailVerificationPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  uuid: () => Promise<String>;
  email: () => Promise<String>;
  changeRequested: () => Promise<String>;
}

export interface EmailVerificationPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailVerificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  uuid: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  changeRequested: () => Promise<AsyncIterator<String>>;
}

export interface ReportingProtocolEdge {
  node: ReportingProtocol;
  cursor: String;
}

export interface ReportingProtocolEdgePromise
  extends Promise<ReportingProtocolEdge>,
    Fragmentable {
  node: <T = ReportingProtocolPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportingProtocolEdgeSubscription
  extends Promise<AsyncIterator<ReportingProtocolEdge>>,
    Fragmentable {
  node: <T = ReportingProtocolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PasswordPolicy {
  id: Int;
  ruleText?: String;
  ruleRegExp?: String;
}

export interface PasswordPolicyPromise
  extends Promise<PasswordPolicy>,
    Fragmentable {
  id: () => Promise<Int>;
  ruleText: () => Promise<String>;
  ruleRegExp: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
}

export interface PasswordPolicySubscription
  extends Promise<AsyncIterator<PasswordPolicy>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ruleText: () => Promise<AsyncIterator<String>>;
  ruleRegExp: () => Promise<AsyncIterator<String>>;
  company: <T = CompanySubscription>() => T;
}

export interface ProtocolDataEdge {
  node: ProtocolData;
  cursor: String;
}

export interface ProtocolDataEdgePromise
  extends Promise<ProtocolDataEdge>,
    Fragmentable {
  node: <T = ProtocolDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProtocolDataEdgeSubscription
  extends Promise<AsyncIterator<ProtocolDataEdge>>,
    Fragmentable {
  node: <T = ProtocolDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkSubscriptionPayload {
  mutation: MutationType;
  node: Network;
  updatedFields: String[];
  previousValues: NetworkPreviousValues;
}

export interface NetworkSubscriptionPayloadPromise
  extends Promise<NetworkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkPreviousValuesPromise>() => T;
}

export interface NetworkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkPreviousValuesSubscription>() => T;
}

export interface PasswordPolicyConnection {
  pageInfo: PageInfo;
  edges: PasswordPolicyEdge[];
}

export interface PasswordPolicyConnectionPromise
  extends Promise<PasswordPolicyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PasswordPolicyEdge>>() => T;
  aggregate: <T = AggregatePasswordPolicyPromise>() => T;
}

export interface PasswordPolicyConnectionSubscription
  extends Promise<AsyncIterator<PasswordPolicyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PasswordPolicyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePasswordPolicySubscription>() => T;
}

export interface NetworkPreviousValues {
  id: Int;
  name?: String;
  baseUrl?: String;
  securityData?: String;
}

export interface NetworkPreviousValuesPromise
  extends Promise<NetworkPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  baseUrl: () => Promise<String>;
  securityData: () => Promise<String>;
}

export interface NetworkPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  baseUrl: () => Promise<AsyncIterator<String>>;
  securityData: () => Promise<AsyncIterator<String>>;
}

export interface CompanyType {
  id: Int;
  name?: String;
}

export interface CompanyTypePromise extends Promise<CompanyType>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  companies: <T = FragmentableArray<Company>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CompanyTypeSubscription
  extends Promise<AsyncIterator<CompanyType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  companies: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProtocolData {
  id: Int;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface ProtocolDataPromise
  extends Promise<ProtocolData>,
    Fragmentable {
  id: () => Promise<Int>;
  network: <T = NetworkPromise>() => T;
  networkProtocol: <T = NetworkProtocolPromise>() => T;
  dataIdentifier: () => Promise<String>;
  dataValue: () => Promise<String>;
}

export interface ProtocolDataSubscription
  extends Promise<AsyncIterator<ProtocolData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  network: <T = NetworkSubscription>() => T;
  networkProtocol: <T = NetworkProtocolSubscription>() => T;
  dataIdentifier: () => Promise<AsyncIterator<String>>;
  dataValue: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNetworkProtocol {
  count: Int;
}

export interface AggregateNetworkProtocolPromise
  extends Promise<AggregateNetworkProtocol>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkProtocolSubscription
  extends Promise<AsyncIterator<AggregateNetworkProtocol>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkProtocolSubscriptionPayload {
  mutation: MutationType;
  node: NetworkProtocol;
  updatedFields: String[];
  previousValues: NetworkProtocolPreviousValues;
}

export interface NetworkProtocolSubscriptionPayloadPromise
  extends Promise<NetworkProtocolSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkProtocolPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkProtocolPreviousValuesPromise>() => T;
}

export interface NetworkProtocolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkProtocolSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkProtocolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkProtocolPreviousValuesSubscription>() => T;
}

export interface NetworkEdge {
  node: Network;
  cursor: String;
}

export interface NetworkEdgePromise extends Promise<NetworkEdge>, Fragmentable {
  node: <T = NetworkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkEdgeSubscription
  extends Promise<AsyncIterator<NetworkEdge>>,
    Fragmentable {
  node: <T = NetworkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkProtocolPreviousValues {
  id: Int;
  name?: String;
  protocolHandler?: String;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
}

export interface NetworkProtocolPreviousValuesPromise
  extends Promise<NetworkProtocolPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  protocolHandler: () => Promise<String>;
  networkProtocolVersion: () => Promise<String>;
  masterProtocol: () => Promise<Int>;
}

export interface NetworkProtocolPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkProtocolPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
  networkProtocolVersion: () => Promise<AsyncIterator<String>>;
  masterProtocol: () => Promise<AsyncIterator<Int>>;
}

export interface EmailVerificationConnection {
  pageInfo: PageInfo;
  edges: EmailVerificationEdge[];
}

export interface EmailVerificationConnectionPromise
  extends Promise<EmailVerificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailVerificationEdge>>() => T;
  aggregate: <T = AggregateEmailVerificationPromise>() => T;
}

export interface EmailVerificationConnectionSubscription
  extends Promise<AsyncIterator<EmailVerificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailVerificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailVerificationSubscription>() => T;
}

export interface NetworkProvider {
  id: Int;
  name?: String;
}

export interface NetworkProviderPromise
  extends Promise<NetworkProvider>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networks: <T = FragmentableArray<Network>>(
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NetworkProviderSubscription
  extends Promise<AsyncIterator<NetworkProvider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networks: <T = Promise<AsyncIterator<NetworkSubscription>>>(
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateDeviceNetworkTypeLink {
  count: Int;
}

export interface AggregateDeviceNetworkTypeLinkPromise
  extends Promise<AggregateDeviceNetworkTypeLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceNetworkTypeLinkSubscription
  extends Promise<AsyncIterator<AggregateDeviceNetworkTypeLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkProviderSubscriptionPayload {
  mutation: MutationType;
  node: NetworkProvider;
  updatedFields: String[];
  previousValues: NetworkProviderPreviousValues;
}

export interface NetworkProviderSubscriptionPayloadPromise
  extends Promise<NetworkProviderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkProviderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkProviderPreviousValuesPromise>() => T;
}

export interface NetworkProviderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkProviderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkProviderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkProviderPreviousValuesSubscription>() => T;
}

export interface DeviceEdge {
  node: Device;
  cursor: String;
}

export interface DeviceEdgePromise extends Promise<DeviceEdge>, Fragmentable {
  node: <T = DevicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceEdgeSubscription
  extends Promise<AsyncIterator<DeviceEdge>>,
    Fragmentable {
  node: <T = DeviceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkProviderPreviousValues {
  id: Int;
  name?: String;
}

export interface NetworkProviderPreviousValuesPromise
  extends Promise<NetworkProviderPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface NetworkProviderPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkProviderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CompanyTypeConnection {
  pageInfo: PageInfo;
  edges: CompanyTypeEdge[];
}

export interface CompanyTypeConnectionPromise
  extends Promise<CompanyTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyTypeEdge>>() => T;
  aggregate: <T = AggregateCompanyTypePromise>() => T;
}

export interface CompanyTypeConnectionSubscription
  extends Promise<AsyncIterator<CompanyTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanyTypeSubscription>() => T;
}

export interface Network {
  id: Int;
  name?: String;
  baseUrl?: String;
  securityData?: String;
}

export interface NetworkPromise extends Promise<Network>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  networkProvider: <T = NetworkProviderPromise>() => T;
  networkType: <T = NetworkTypePromise>() => T;
  networkProtocol: <T = NetworkProtocolPromise>() => T;
  baseUrl: () => Promise<String>;
  securityData: () => Promise<String>;
  protocolData: <T = FragmentableArray<ProtocolData>>(
    args?: {
      where?: ProtocolDataWhereInput;
      orderBy?: ProtocolDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NetworkSubscription
  extends Promise<AsyncIterator<Network>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  networkProvider: <T = NetworkProviderSubscription>() => T;
  networkType: <T = NetworkTypeSubscription>() => T;
  networkProtocol: <T = NetworkProtocolSubscription>() => T;
  baseUrl: () => Promise<AsyncIterator<String>>;
  securityData: () => Promise<AsyncIterator<String>>;
  protocolData: <T = Promise<AsyncIterator<ProtocolDataSubscription>>>(
    args?: {
      where?: ProtocolDataWhereInput;
      orderBy?: ProtocolDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkTypeSubscriptionPayload {
  mutation: MutationType;
  node: NetworkType;
  updatedFields: String[];
  previousValues: NetworkTypePreviousValues;
}

export interface NetworkTypeSubscriptionPayloadPromise
  extends Promise<NetworkTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkTypePreviousValuesPromise>() => T;
}

export interface NetworkTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkTypePreviousValuesSubscription>() => T;
}

export interface UserRoleConnection {
  pageInfo: PageInfo;
  edges: UserRoleEdge[];
}

export interface UserRoleConnectionPromise
  extends Promise<UserRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRoleEdge>>() => T;
  aggregate: <T = AggregateUserRolePromise>() => T;
}

export interface UserRoleConnectionSubscription
  extends Promise<AsyncIterator<UserRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserRoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserRoleSubscription>() => T;
}

export interface NetworkTypePreviousValues {
  id: Int;
  name: String;
}

export interface NetworkTypePreviousValuesPromise
  extends Promise<NetworkTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface NetworkTypePreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserRoleSubscriptionPayload {
  mutation: MutationType;
  node: UserRole;
  updatedFields: String[];
  previousValues: UserRolePreviousValues;
}

export interface UserRoleSubscriptionPayloadPromise
  extends Promise<UserRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRolePreviousValuesPromise>() => T;
}

export interface UserRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRolePreviousValuesSubscription>() => T;
}

export interface NetworkProtocol {
  id: Int;
  name?: String;
  protocolHandler?: String;
  networkProtocolVersion?: String;
  masterProtocol?: Int;
}

export interface NetworkProtocolPromise
  extends Promise<NetworkProtocol>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  protocolHandler: () => Promise<String>;
  networkType: <T = NetworkTypePromise>() => T;
  networkProtocolVersion: () => Promise<String>;
  masterProtocol: () => Promise<Int>;
  networks: <T = FragmentableArray<Network>>(
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  protocolData: <T = FragmentableArray<ProtocolData>>(
    args?: {
      where?: ProtocolDataWhereInput;
      orderBy?: ProtocolDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NetworkProtocolSubscription
  extends Promise<AsyncIterator<NetworkProtocol>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
  networkType: <T = NetworkTypeSubscription>() => T;
  networkProtocolVersion: () => Promise<AsyncIterator<String>>;
  masterProtocol: () => Promise<AsyncIterator<Int>>;
  networks: <T = Promise<AsyncIterator<NetworkSubscription>>>(
    args?: {
      where?: NetworkWhereInput;
      orderBy?: NetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  protocolData: <T = Promise<AsyncIterator<ProtocolDataSubscription>>>(
    args?: {
      where?: ProtocolDataWhereInput;
      orderBy?: ProtocolDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NetworkTypeEdge {
  node: NetworkType;
  cursor: String;
}

export interface NetworkTypeEdgePromise
  extends Promise<NetworkTypeEdge>,
    Fragmentable {
  node: <T = NetworkTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkTypeEdgeSubscription
  extends Promise<AsyncIterator<NetworkTypeEdge>>,
    Fragmentable {
  node: <T = NetworkTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PasswordPolicySubscriptionPayload {
  mutation: MutationType;
  node: PasswordPolicy;
  updatedFields: String[];
  previousValues: PasswordPolicyPreviousValues;
}

export interface PasswordPolicySubscriptionPayloadPromise
  extends Promise<PasswordPolicySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PasswordPolicyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PasswordPolicyPreviousValuesPromise>() => T;
}

export interface PasswordPolicySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PasswordPolicySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PasswordPolicySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PasswordPolicyPreviousValuesSubscription>() => T;
}

export interface NetworkProtocolConnection {
  pageInfo: PageInfo;
  edges: NetworkProtocolEdge[];
}

export interface NetworkProtocolConnectionPromise
  extends Promise<NetworkProtocolConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkProtocolEdge>>() => T;
  aggregate: <T = AggregateNetworkProtocolPromise>() => T;
}

export interface NetworkProtocolConnectionSubscription
  extends Promise<AsyncIterator<NetworkProtocolConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkProtocolEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkProtocolSubscription>() => T;
}

export interface PasswordPolicyPreviousValues {
  id: Int;
  ruleText?: String;
  ruleRegExp?: String;
}

export interface PasswordPolicyPreviousValuesPromise
  extends Promise<PasswordPolicyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ruleText: () => Promise<String>;
  ruleRegExp: () => Promise<String>;
}

export interface PasswordPolicyPreviousValuesSubscription
  extends Promise<AsyncIterator<PasswordPolicyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ruleText: () => Promise<AsyncIterator<String>>;
  ruleRegExp: () => Promise<AsyncIterator<String>>;
}

export interface DeviceProfileEdge {
  node: DeviceProfile;
  cursor: String;
}

export interface DeviceProfileEdgePromise
  extends Promise<DeviceProfileEdge>,
    Fragmentable {
  node: <T = DeviceProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceProfileEdgeSubscription
  extends Promise<AsyncIterator<DeviceProfileEdge>>,
    Fragmentable {
  node: <T = DeviceProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DeviceProfile {
  id: Int;
  name?: String;
  description?: String;
  networkSettings?: String;
}

export interface DeviceProfilePromise
  extends Promise<DeviceProfile>,
    Fragmentable {
  id: () => Promise<Int>;
  networkType: <T = NetworkTypePromise>() => T;
  company: <T = CompanyPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  networkSettings: () => Promise<String>;
  deviceNetworkTypeLinks: <T = FragmentableArray<DeviceNetworkTypeLink>>(
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DeviceProfileSubscription
  extends Promise<AsyncIterator<DeviceProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  networkType: <T = NetworkTypeSubscription>() => T;
  company: <T = CompanySubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  networkSettings: () => Promise<AsyncIterator<String>>;
  deviceNetworkTypeLinks: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCompanyType {
  count: Int;
}

export interface AggregateCompanyTypePromise
  extends Promise<AggregateCompanyType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanyTypeSubscription
  extends Promise<AsyncIterator<AggregateCompanyType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProtocolDataSubscriptionPayload {
  mutation: MutationType;
  node: ProtocolData;
  updatedFields: String[];
  previousValues: ProtocolDataPreviousValues;
}

export interface ProtocolDataSubscriptionPayloadPromise
  extends Promise<ProtocolDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProtocolDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProtocolDataPreviousValuesPromise>() => T;
}

export interface ProtocolDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProtocolDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProtocolDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProtocolDataPreviousValuesSubscription>() => T;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface ProtocolDataPreviousValues {
  id: Int;
  dataIdentifier?: String;
  dataValue?: String;
}

export interface ProtocolDataPreviousValuesPromise
  extends Promise<ProtocolDataPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  dataIdentifier: () => Promise<String>;
  dataValue: () => Promise<String>;
}

export interface ProtocolDataPreviousValuesSubscription
  extends Promise<AsyncIterator<ProtocolDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  dataIdentifier: () => Promise<AsyncIterator<String>>;
  dataValue: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePasswordPolicy {
  count: Int;
}

export interface AggregatePasswordPolicyPromise
  extends Promise<AggregatePasswordPolicy>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePasswordPolicySubscription
  extends Promise<AsyncIterator<AggregatePasswordPolicy>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateEmailVerification {
  count: Int;
}

export interface AggregateEmailVerificationPromise
  extends Promise<AggregateEmailVerification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailVerificationSubscription
  extends Promise<AsyncIterator<AggregateEmailVerification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeviceNetworkTypeLink {
  id: Int;
  networkSettings?: String;
}

export interface DeviceNetworkTypeLinkPromise
  extends Promise<DeviceNetworkTypeLink>,
    Fragmentable {
  id: () => Promise<Int>;
  device: <T = DevicePromise>() => T;
  networkType: <T = NetworkTypePromise>() => T;
  deviceProfile: <T = DeviceProfilePromise>() => T;
  networkSettings: () => Promise<String>;
}

export interface DeviceNetworkTypeLinkSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  device: <T = DeviceSubscription>() => T;
  networkType: <T = NetworkTypeSubscription>() => T;
  deviceProfile: <T = DeviceProfileSubscription>() => T;
  networkSettings: () => Promise<AsyncIterator<String>>;
}

export interface ReportingProtocolPreviousValues {
  id: Int;
  name?: String;
  protocolHandler?: String;
}

export interface ReportingProtocolPreviousValuesPromise
  extends Promise<ReportingProtocolPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  protocolHandler: () => Promise<String>;
}

export interface ReportingProtocolPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportingProtocolPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  protocolHandler: () => Promise<AsyncIterator<String>>;
}

export interface ReportingProtocolSubscriptionPayload {
  mutation: MutationType;
  node: ReportingProtocol;
  updatedFields: String[];
  previousValues: ReportingProtocolPreviousValues;
}

export interface ReportingProtocolSubscriptionPayloadPromise
  extends Promise<ReportingProtocolSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportingProtocolPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportingProtocolPreviousValuesPromise>() => T;
}

export interface ReportingProtocolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportingProtocolSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportingProtocolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportingProtocolPreviousValuesSubscription>() => T;
}

export interface Device {
  id: Int;
  name?: String;
  description?: String;
  deviceModel?: String;
}

export interface DevicePromise extends Promise<Device>, Fragmentable {
  id: () => Promise<Int>;
  application: <T = ApplicationPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  deviceModel: () => Promise<String>;
  deviceNetworkTypeLinks: <T = FragmentableArray<DeviceNetworkTypeLink>>(
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DeviceSubscription
  extends Promise<AsyncIterator<Device>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  application: <T = ApplicationSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  deviceModel: () => Promise<AsyncIterator<String>>;
  deviceNetworkTypeLinks: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinkSubscription>>
  >(
    args?: {
      where?: DeviceNetworkTypeLinkWhereInput;
      orderBy?: DeviceNetworkTypeLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DeviceNetworkTypeLinkConnection {
  pageInfo: PageInfo;
  edges: DeviceNetworkTypeLinkEdge[];
}

export interface DeviceNetworkTypeLinkConnectionPromise
  extends Promise<DeviceNetworkTypeLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceNetworkTypeLinkEdge>>() => T;
  aggregate: <T = AggregateDeviceNetworkTypeLinkPromise>() => T;
}

export interface DeviceNetworkTypeLinkConnectionSubscription
  extends Promise<AsyncIterator<DeviceNetworkTypeLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<DeviceNetworkTypeLinkEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateDeviceNetworkTypeLinkSubscription>() => T;
}

export interface NetworkProviderEdge {
  node: NetworkProvider;
  cursor: String;
}

export interface NetworkProviderEdgePromise
  extends Promise<NetworkProviderEdge>,
    Fragmentable {
  node: <T = NetworkProviderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkProviderEdgeSubscription
  extends Promise<AsyncIterator<NetworkProviderEdge>>,
    Fragmentable {
  node: <T = NetworkProviderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CompanyNetworkTypeLinkEdge {
  node: CompanyNetworkTypeLink;
  cursor: String;
}

export interface CompanyNetworkTypeLinkEdgePromise
  extends Promise<CompanyNetworkTypeLinkEdge>,
    Fragmentable {
  node: <T = CompanyNetworkTypeLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyNetworkTypeLinkEdgeSubscription
  extends Promise<AsyncIterator<CompanyNetworkTypeLinkEdge>>,
    Fragmentable {
  node: <T = CompanyNetworkTypeLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "DeviceNetworkTypeLink",
    embedded: false
  },
  {
    name: "Application",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "NetworkType",
    embedded: false
  },
  {
    name: "ApplicationNetworkTypeLink",
    embedded: false
  },
  {
    name: "ReportingProtocol",
    embedded: false
  },
  {
    name: "ProtocolData",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "Network",
    embedded: false
  },
  {
    name: "PasswordPolicy",
    embedded: false
  },
  {
    name: "NetworkProtocol",
    embedded: false
  },
  {
    name: "NetworkProvider",
    embedded: false
  },
  {
    name: "Device",
    embedded: false
  },
  {
    name: "DeviceProfile",
    embedded: false
  },
  {
    name: "CompanyNetworkTypeLink",
    embedded: false
  },
  {
    name: "CompanyType",
    embedded: false
  },
  {
    name: "EmailVerification",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
